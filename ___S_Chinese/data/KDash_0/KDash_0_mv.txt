//HYD_MoveTable <- {};
local t = {};

// BMvTbl.SetTutoMvFlag( 1 ); // 詐欺飛び
// BMvTbl.SetTutoMvFlag( 2 ); // ガード仕込み
// BMvTbl.SetTutoMvFlag( 5 ); // ミッションのバティスタに近づいた（COMから操作）
// BMvTbl.SetTutoMvFlag( 6 ); // 投げ抜け不能投げで掴まれた（相手から操作）
// BMvTbl.SetTutoMvFlag( 3 ); // 3+Bを相手の技の空振りに差し込んだ
// BMvTbl.SetTutoMvFlag( 4 ); // 2+Cをバクステの硬直にあてた
// BMvTbl.SetTutoMvFlag( 7 ); // VO中に623EXを使った

// BMvTbl.SetTutoMvFlag( 8 ); // 投げ抜け仕込みしゃがみA
// BMvTbl.SetTutoMvFlag( 9 ); // 投げ抜け仕込み通常技対空
// BMvTbl.SetTutoMvFlag( 10 ); // 投げ抜け仕込みバックステップ
// BMvTbl.SetTutoMvFlag( 11 ); // 投げ抜け仕込みジャンプ攻撃
// BMvTbl.SetTutoMvFlag( 12 ); // 投げ抜け仕込みヴェールオフ
// BMvTbl.SetTutoMvFlag( 13 ); // 236EXに対して暗転返しをしたっぽい

//-----------------------------------------------------------------------------
// フォースファンクション
//-----------------------------------------------------------------------------

local check_NearAtk = function( _checkXkyori = 200, _checkYkyori = 0 )
{
	// 相手までの距離でチェック
	local enemy = BMvCore.GetNearEnemyCharaData(); // 相手情報取得
	if( enemy.isdone() )
	{
		local posst = BMvEff.GetPointStatus( { target=enemy } ); // 位置情報取得
		// local angle_deg = posst.angle * 180; // 360度にしてみる（0.0-2.0 なのでx180で変換）
		// print( format( "距離：%d, %d", posst.distance,  posst.distance/128 ) );
		
		//Battle_Std.DrawDebugAttackInfo("dist "+posst.distance_y/128+" reqdist "+_checkYkyori);
		
		if( posst.distance_x <= _checkXkyori<<7 && posst.distance_y <= _checkYkyori<<7  )
		{
			return 1;
		}
	}
	
	return 0;
}

t.Mv_Neutral <-
{
	function Init_Before()
	{
		
		
		// フリーモーション処理作成テスト
		// Param3に予約が入ってたらパターン変更後にFrameIDJumpさせる
		BMvTbl.SetPP(0,0);
		local mvs = BMvTbl.GetMvStatus();
		// _dp("\n mvs.Param3:"+mvs.Param3 );
		local yoyaku = mvs.Param3;
		if( yoyaku >= 50 && yoyaku <= 56 )
		{
			BMvTbl.SetPP(0,yoyaku);
		}
		
		if(yoyaku == 255) BMvTbl.SetPP(0,yoyaku);
		
		//Battle_Std.DrawDebugAttackInfo("before "+yoyaku);
		//BMvEff.SetExist( { level=_Exist_NoKasanariHantei, mode=_ExistMode_Set } );
	}
	function Init_After()
	{
		local yoyaku = BMvTbl.GetPP(0);
		//Battle_Std.DrawDebugAttackInfo("cv "+yoyaku);
		
		local yoyaku_id = yoyaku - 50;
		local jumpFrameID = [5000,5001,5002,5003,5004,5005,5006];
		if( yoyaku_id >= 0 && yoyaku_id <= jumpFrameID.len()-1 )
		{
			local id = jumpFrameID[yoyaku_id%jumpFrameID.len()];
			
			//Battle_Std.DrawDebugAttackInfo("cv "+id);
			
			BMvTbl.JumpFrameID( id );
		}
		
		//Battle_Std.DrawDebugAttackInfo("init after yoyaku "+yoyaku);
		
		if(yoyaku == 255) 
		{
			BMvTbl.SetPattern("NeoMax_SPWin");
		}
	}
}

t.Mv_RoundWinPattern <- //決着勝利アニメ
{
	function Init_Before()
	{
		// フリーモーション処理作成テスト
		// Param3に予約が入ってたらパターン変更後にFrameIDJumpさせる
		BMvTbl.SetPP(0,0);
		local mvs = BMvTbl.GetMvStatus();
		// _dp("\n mvs.Param3:"+mvs.Param3 );
		local yoyaku = mvs.Param3;
		if( yoyaku >= 50 && yoyaku <= 56 )
		{
			BMvTbl.SetPP(0,yoyaku);
		}
		
		if(yoyaku == 255) BMvTbl.SetPP(0,yoyaku);
		
		//Battle_Std.DrawDebugAttackInfo("before "+yoyaku);
	}
	function Init_After()
	{
		local yoyaku = BMvTbl.GetPP(0);
		if(yoyaku == 255) BMvTbl.SetPattern("NeoMax_SPWin");
	}
}

t.Mv_WinPattern <-
{
	function Init_Before()
	{
		// フリーモーション処理作成テスト
		// Param3に予約が入ってたらパターン変更後にFrameIDJumpさせる
		BMvTbl.SetPP(0,0);
		local mvs = BMvTbl.GetMvStatus();
		// _dp("\n mvs.Param3:"+mvs.Param3 );
		local yoyaku = mvs.Param3;
		if( yoyaku >= 50 && yoyaku <= 56 )
		{
			BMvTbl.SetPP(0,yoyaku);
		}
		
		if(yoyaku == 255) BMvTbl.SetPP(0,yoyaku);
		
		//Battle_Std.DrawDebugAttackInfo("before "+yoyaku);
	}
	function Init_After()
	{
		local yoyaku = BMvTbl.GetPP(0);
		if(yoyaku == 255) BMvTbl.SetPattern("NeoMax_SPWin");
	}
}

t.Mv_Crouch_Wait <-
{
	function Init_Before()
	{
		
		
		// フリーモーション処理作成テスト
		// Param3に予約が入ってたらパターン変更後にFrameIDJumpさせる
		BMvTbl.SetPP(0,0);
		local mvs = BMvTbl.GetMvStatus();
		// _dp("\n mvs.Param3:"+mvs.Param3 );
		local yoyaku = mvs.Param3;
		if( yoyaku >= 50 && yoyaku <= 56 )
		{
			BMvTbl.SetPP(0,yoyaku);
		}
		
		//Battle_Std.DrawDebugAttackInfo("before "+yoyaku);
	}
	function Init_After()
	{
		local yoyaku = BMvTbl.GetPP(0);
		//Battle_Std.DrawDebugAttackInfo("cv "+yoyaku);
		
		local yoyaku_id = yoyaku - 50;
		local jumpFrameID = [5000,5001,5002,5003,5004,5005,5006];
		if( yoyaku_id >= 0 && yoyaku_id <= jumpFrameID.len()-1 )
		{
			local id = jumpFrameID[yoyaku_id%jumpFrameID.len()];
			
			//Battle_Std.DrawDebugAttackInfo("cv "+id);
			
			BMvTbl.JumpFrameID( id );
		}
	}
}

t.Mv_FireBall_Glasses_BandC <-
{
	function Init_After()
	{
		Battle_Std.AddFireBallFlags( def_BallFlags_NoAddHitComboRate );
		
		local eff = BMvEff.CreateObject( { start_pat="Glasses_GlowEff" } );
		if(eff.push())
		{
			BMvEff.SetObjectFlags( { flags=_ObjFlags_ParentMove } );	
			BMvEff.ObjProcFlags_Set( { flags=_ObjProcFlags_EraseParentNull|_ObjProcFlags_EraseChangeParentMv|_ObjProcFlag_EraseParentDelete } );
			
			BMvTbl.SetScale( { x=1.5*10000, y=1.5*10000 } );
			
			eff.pop();
		}
		
		local eff_2 = BMvEff.CreateObject( { start_pat="Glasses_GlowEff_Layer2" } );
		if(eff_2.push())
		{
			BMvEff.SetObjectFlags( { flags=_ObjFlags_ParentMove } );	
			BMvEff.ObjProcFlags_Set( { flags=_ObjProcFlags_EraseParentNull|_ObjProcFlags_EraseChangeParentMv|_ObjProcFlag_EraseParentDelete } );
			
			//BMvTbl.SetScale( { x=2*10000, y=2*10000 } );
			
			eff_2.pop();
		}
	}
	function FrameUpdate_After()
	{
		
	}
}

t.Mv_FireBall_Glasses_BandC_Hit <-
{
	function Init_After()
	{
		BMvTbl.SetPattern("Glasses_HitFireEff");
		
		local p = BMvCore.GetPlayerCharaData();
		if( p.push() )
		{
			BMvTbl.SetLP(1,1); //confirm glasses damage hit and use lp1 to avoid iw conflict
			p.pop();
		}
		
		BMvEff.SetObjectFlags( { flags=_ObjFlags_MoveTimeStopAll } );
		
	}
}

t.Mv_Atk_StdBandC <-
{
	function Init_After()
	{
		BMvTbl.SetLP(1,0); //glasses hit storage
	}
	function FrameUpdate_After() // フレーム更新処理
	{
		local s = BMvTbl.GetMvStatus(); // ステータス取得
		switch( Battle_Std.GetUpdateFrameID() )
		{
		case 100: //つきさすところ
			Battle_Std.CreateFireBall( { x=130, y=-290, vec = { x = 6000, y=100, addy=100 }, mv="Mv_FireBall_Glasses_BandC", pat = "Glasses_AtkObj_BandC" } );
			break;
		}
		
		if(s.FrameID==100 || s.FrameID==101)
		{
			if( BMvTbl.GetLP(1)==1 ) 
			{
				BMvTbl.SetAsStatusFlag( { special=_CancelFlag_None, time=254, flag=_ClearFlag_ChangeMv } );
				BMvTbl.SetFinalize(256);
			}
		}
	}
	function Finalize() // 
	{
		Battle_Std.SwitchNextMoveTable("Mv_Neutral", [256,"Mv_Skill_BandC_Attack"]); //デフォ,[code,mv]...
	}	
}

t.Mv_Skill_BandC_Attack <-
{
	flags = def_TmplFlags_NoAddComboRate,
	function Init_After()
	{
		Battle_Std.CreateObjectEX( { datatype=0, pat="41236SP_Ball_Hit_VanishEff", flags=_Position_ToolShift, objectflags=_ObjFlags_MoveTimeStopAll|_ObjFlags_NoGround } );	
		Battle_Std.MoveCode.AddFlag( def_MC_EnableCansel_SkilltoSkill );
		
	}	
	function HitInterrupt_After()
	{
		if( Battle_Std.CheckHitTiming() ) BMvTbl.JumpFrameID( 100 );
	}
}

//-----------------------------------------------------------------------------
// イベント
//-----------------------------------------------------------------------------

local call_TutorialCheckerObject = function()
{
	if( BMvTbl.GetMvStageStatus().IsTrainingBattle() != 2 ) return; // チュートリアルの時だけ処理する
	
	BMvEff.CreateObject( { mvname="Mv_Null_TutoChecker" } );
}

t.Mv_Startup <-
{
	function Init_After() : (call_TutorialCheckerObject)
	{
		call_TutorialCheckerObject();
	}
}

t.Mv_Standby <-
{
	function Init_After() : (call_TutorialCheckerObject)
	{
		call_TutorialCheckerObject();
	}
}

t.Mv_Null_TutoChecker <-
{
	function Init_After()
	{
		// _dp("\n 開始");
	}
	function FrameUpdate_After()
	{
		//現状は投げ抜けチェッカーとしてしか機能しない！
		local player = BMvCore.GetPlayerCharaData();
		if( player.push() )
		{
			local mvname = BMvTbl.GetMvName();
			local thmv = (mvname == "Mv_Bound_0023")? 1 : 0;
			
			// まず投げが成立していることが条件・・・は投げ抜けMvチェックするようになったので不要、かつこれだとヒットしないこともあった
			local grap = BMvTbl.CheckCommandString( { command = [ "A+B+C+D", "71+AD", "4+A+BD", "3+A+C+D", "v+AD" ], lastdelay=1 } ); // ガバガバ判定なので注意(ADのところがガバい)
			
			local vomv = (mvname == "Mv_Liberate")? 1 : 0;
			if( grap == 1 && vomv )
			{
				thmv = 1; // VOに仕込めていても成功にする
			}
			
			/*
			if( thmv || grap )
			{
				_dp1p("\n thmv:"+thmv+" grap:"+grap );
			}
			*/
			if( thmv && grap )
			{
				// _dp("\n grap:"+grap );
				
				switch( grap )
				{
				case 1:
					BMvTbl.SetTutoMvFlag( 12 ); // 投げ抜け仕込みヴェールオフ
					break;
				case 2:
					BMvTbl.SetTutoMvFlag( 11 ); // 投げ抜け仕込みジャンプ攻撃
					break;
				case 3:
					BMvTbl.SetTutoMvFlag( 10 ); // 投げ抜け仕込みバックステップ
					break;
				case 4:
					BMvTbl.SetTutoMvFlag( 9 ); // 投げ抜け仕込み通常技対空
					break;
				case 5:
					BMvTbl.SetTutoMvFlag( 8 ); // 投げ抜け仕込みしゃがみA
					break;
				
				}
				
			}
			
			player.pop();
		}
	}
}


t.Mv_Standby <-
{
	function Init_After()
	{
	
	}
	function FrameUpdate_After()
	{
		switch( Battle_Std.GetUpdateFrameID() )
		{
		case 900:
			BMvEff.CreateObject( { x=0, y=0, mvname="Mv_Obj_950ef", flags=_Position_ToolShift } );
			break;
		}
	}
}

// 登場時のインスレーター出現エフェクト
// ハイドの特殊判定の座標にくっつく
t.Mv_Obj_950ef <-
{
	function Init_After() // 
	{
		BMvEff.SetObjectFlags( { flags=_ObjFlags_EraseParentPatChange } );
	}
	function FrameUpdate_After() // 
	{			
		local player = BMvCore.GetPlayerCharaData(); // 操作親の情報を得る
		if( player.push() )
		{
			local oya_UpdateFrameID = Battle_Std.GetUpdateFrameID();
			
			local rc = BMvEff.GetHanteiRect( { check=[ _Hantei_Etc, 0 ], flags=0 } );
			player.pop();
			
			if( rc.sx != _Hantei_Error ) // 存在するか
			{
				local use_Xpos = (BMvTbl.GetMuki() == 1)? rc.sx : rc.ex; // 右向きならsx、左向きならex
				BMvTbl.SetPosition( { x=use_Xpos, y=rc.sy } );
			}
			if( oya_UpdateFrameID == 600 ) // 親が終了のところまで進んだ
			{
				BMvTbl.JumpFrameID( 600 ); // 消滅アニメへ
			}
		}
	}
}

//-----------------------------------------------------------------------------
// 共通動作
//-----------------------------------------------------------------------------

local check_Tuto_Guard = function()
{
	if( BMvTbl.GetMvStageStatus().IsTrainingBattle() != 2 ) return; // チュートリアルの時だけ処理する
	
	if( BMvTbl.CheckStickHold( (1<<4) | (1<<1) ) )
	{
		// _dp("\n ガード仕込み");
		BMvTbl.SetTutoMvFlag( 2 ); // フラグたて
	}
}

t.Mv_DashWait_F <-
{
	function FrameUpdate_After() : (check_Tuto_Guard)
	{
		check_Tuto_Guard(); // ガードを入れるとフラグがたつ
	}
}

t.Mv_Dash_F <- 
{
	function FrameUpdate_After() : (check_Tuto_Guard)
	{
		check_Tuto_Guard(); // ガードを入れるとフラグがたつ
	}	
}

t.Mv_DashStop_F <- 
{
	function FrameUpdate_After() : (check_Tuto_Guard)
	{
		check_Tuto_Guard(); // ガードを入れるとフラグがたつ
	}	
}

t.Mv_Dash_B <- // バクステ
{
	function Init_After() // 
	{
	}
}

//-----------------------------------------------------------------------------
// 通常投げ
//-----------------------------------------------------------------------------

t.Mv_Throw_F_Hit <-
{
	function Init_After()
	{
		Battle_Std.SetThrowEnemyMuteki( 254 ); // 投げ中の相手に無敵時間を設定
	}
	function FrameUpdate_After()
	{
		switch( Battle_Std.GetUpdateFrameID() )
		{
		case 900:
			//BMvEff.ThrowParam( { pat=326, x=50, y=0 } );
			//BMvEff.ThrowRelease( { type="前転倒", airrecover=0, flags=0 } );
			break;
		case 1000: // ここで攻撃
			Battle_Std.SetThrowEnemyMuteki( 0 ); // 投げ中の相手に無敵時間を設定
			BMvEff.ThrowRelease( { type=5, airrecover=0, flags=_ThrowRelease_NoGroundRecover } );
			break;
		}
	}
	function Update_After()
	{
	}
}

t.Mv_JumpWait_F <-
{
	function LastUpdate_After()
	{
		if( BMvTbl.CheckStickHold( (1<<7) | (1<<8) | (1<<9) ) )
		{
			BMvTbl.SetLP(0,0);
		}
		else
		{
			BMvTbl.SetLP(0,1);
		}
	}
}

t.Mv_JumpWait_N <-
{
	function LastUpdate_After()
	{
		if( BMvTbl.CheckStickHold( (1<<7) | (1<<8) | (1<<9) ) )
		{
			BMvTbl.SetLP(0,0);
		}
		else
		{
			BMvTbl.SetLP(0,1);
		}
	}
}

t.Mv_JumpWait_B <-
{
	function LastUpdate_After()
	{
		if( BMvTbl.CheckStickHold( (1<<7) | (1<<8) | (1<<9) ) )
		{
			BMvTbl.SetLP(0,0);
		}
		else
		{
			BMvTbl.SetLP(0,1);
		}
	}
}

t.Mv_Jump_N <-
{
	function Init_After()
	{
		if( BMvTbl.GetLP(0)==1 )
		{
			BMvTbl.SetVector( { y=-2500, addy=200 flags=_Vector_Normal } );
			BSound.SE_Play( { type=_SeType_Player, num=4 } ); 
		}		
	}
}

t.Mv_Jump_F <-
{
	function Init_After()
	{
		if( BMvTbl.GetLP(0)==1 )
		{
			//BMvTbl.SetVector( { x=0, y=1000, addy=0 flags=_Vector_Normal } );
			BMvTbl.SetVector( { x=1500, y=-2500, addy=200 flags=_Vector_Normal } );
			BSound.SE_Play( { type=_SeType_Player, num=4 } ); 
		}		
	}
}

t.Mv_Jump_B <-
{
	function Init_After()
	{
		if( BMvTbl.GetLP(0)==1 )
		{
			BMvTbl.SetVector( { x=-1500, y=-2500, addy=200 flags=_Vector_Normal } );
			BSound.SE_Play( { type=_SeType_Player, num=4 } ); 
		}		
	}
}

//-----------------------------------------------------------------------------
// 通常攻撃
//-----------------------------------------------------------------------------

// 相手の特定のMvの重なり判定に攻撃が重なっているとフラグが立つ関数
local check_Tuto_Sagi = function( param={} )
{
	if( BMvTbl.GetMvStageStatus().IsTrainingBattle() != 2 ) return; // チュートリアルの時だけ処理する
	
	// チュートリアル用の仕込み
	// 詐欺飛びチェック
	local mvs = BMvTbl.GetMvStatus();
	if( mvs.FrameID == param.frameID )
	{
		// ためJCや22の攻撃部分
		// 攻撃判定が相手の重なりに重なっている…？
		local enemy = BMvEff.CheckHantei( { src=[ _Hantei_Attack , 0, -1 ], dst=[ _Hantei_Kasanari , 0, -1 ], flags=_HC_EnemyPc } );
		if( enemy.push() )
		{
			local emvs = BMvTbl.GetMvStatus();
			local emvname = BMvTbl.GetMvName();
			
			enemy.pop();
			
			if( emvs.CharaNo == param.chr && emvname == param.mvname )
			{
				//_dp("\n 詐欺飛びできてるよ！！");
				local player = BMvCore.GetPlayerCharaData();
				if( player.push() )
				{
					BMvTbl.SetTutoMvFlag( 1 ); // フラグたて
					
					player.pop();
				}
			}
		}
	}
}

t.Mv_Obj_236_236EX_Laser <-
{
	
}

t.Mv_Obj_NeoMax_GloveMeltEff <-
{
	
}

t.Mv_Atk_StdA <-
{
	function Init_After()
	{
		//Battle_Std.DrawDebugAttackInfo("tsflag "+_ObjFlags_MoveTimeStopAll);
		//Battle_Std.CreateObjectEX( { x=0, datatype=0, pat="236236_FireEff_6", flags=_Position_ToolShift, objectflags=_ObjFlags_MoveTimeStopAll|_ObjFlags_NoGround } );
		
		//BMvEff.SetCamera_Focus( { charapos=1, zoom=1.35, time=[400,0,30], type_in=3 } );
		
		//BMvEff.CreateObject( { mvname="Mv_Obj_NeoMax_FirePillarEff" } );
		
		//BMvEff.CreateObject( { mvname="Mv_Obj_NeoMax_GloveMeltEff" } );
		
		//BMvEff.SetExist( { level=_Exist_NoKasanariHantei, mode=_ExistMode_Erase } );
	}
	function FrameUpdate_After()
	{
	}
}

t.Mv_Atk_StdB <-
{
	function Init_After() : (check_NearAtk)
	{
		if( check_NearAtk( 150, 5000 )==1 )
		{
			BMvTbl.SetPattern("Near_StdB");
		}
	}
}

t.Mv_Atk_StdC <-
{
	function Init_After() : (check_NearAtk)
	{
		if( check_NearAtk( 170, 150 )==1 )
		{
			BMvTbl.SetPattern("Near_StdC");
			BMvTbl.SetHitCheckFlag( { type=1, val=_HitCheckFlag_Legs, time=255, flag=_ClearFlag_ChangeMv } );
		}
	}
	function FrameUpdate_After()
	{
		Battle_Std.SetHitMuteki( 1, 8, _HitCheckFlag_Head ); // Param1 & 8 の時、_HitCheckFlag_Head 頭無敵
	}
	function LastUpdate_After()
	{
		if( BMvTbl.FromFinalize()==1 ) BSound.SE_Play( { type=_SeType_Normal, num=172 } );
	}
}

t.Mv_Atk_CroA <-
{
	function Init_After()
	{
		BMvTbl.SetHitCheckFlag( { type=1, val=_HitCheckFlag_Legs, time=255, flag=_ClearFlag_ChangeMv } ); // 足無敵にスカる
	}
}

t.Mv_Atk_CroB <-
{
	function Finalize()
	{
		BMvTbl.SetNextMoveTable( "Mv_Neutral" );
	}
}

t.Mv_Atk_CroC <-
{
	function Init_After()
	{
		BMvTbl.SetHitCheckFlag( { type=1, val=_HitCheckFlag_Legs, time=255, flag=_ClearFlag_ChangeMv } ); // 足無敵にスカる
	}
	function HitInterrupt_After()
	{
		if( BMvTbl.GetMvStageStatus().IsTrainingBattle() == 2 )
		{
			if( Battle_Std.CheckDamageTiming() )
			{
				local enemy = BMvCore.GetEnemyCharaData();
				if( enemy.push() )
				{
					local emv = BMvTbl.GetMvName();
					enemy.pop();
					
					if( emv == "Mv_Dash_B" )
					{
						_dp("\n バクステにさした");
						BMvTbl.SetTutoMvFlag( 4 ); // 2+Cをバクステの硬直にあてた
					}
				}
			}
		}
	}
}

t.Mv_Atk_AirA <-
{
	function Init_After()
	{
	}
	function FrameUpdate_After()
	{
	}
}


t.Mv_Atk_AirB <-
{
	function FrameUpdate_After()
	{
	}
}

t.Mv_Atk_AirC <-
{
	function FrameUpdate_After() : (check_Tuto_Sagi)
	{
		Battle_Std.JumpFrameID_NotHoldButton({ mask=(1<<2), checkid=100, jumpid=101, endid=150 }); //ボタンホールドしてなかったらIDジャンプ
		
		check_Tuto_Sagi( { frameID=200, chr=Def_ChrNo_Hyd, mvname="Mv_Skill_41236EX" } ); // 一致でフラグ1がたつ
	}
}

t.Mv_Atk_DashStdC <- 
{
	function FrameUpdate_After()
	{
		Battle_Std.SetHitMuteki( 1, 8, _HitCheckFlag_Head ); // Param1 & 32 の時、足無敵
	}
	function HitInterrupt_After()
	{
	}
	function LastUpdate_After()
	{
		if( BMvTbl.FromFinalize()==1 ) BSound.SE_Play( { type=_SeType_Normal, num=172 } );
	}
}

t.Mv_Atk_Air6C <-
{
	function FrameUpdate_After()
	{
	}
}

t.Mv_Atk_Air2C <-
{
	function Init_After()
	{
		// 各種補正は最初の１ヒットのみ
		BMvTbl.SetNoHoseiFlag( {  val=1, time=254, flag=_ClearFlag_ChangePattern|_ClearFlag_ChangeMv } );
	}
	function FrameUpdate_After()
	{
		local hitnum = BMvTbl.CalcHitValue(0);  // ヒット数出現の残り取得
		if( hitnum>0 && hitnum != 2 ) // 初段以外
		{
			// 屈ガード＋空ガード可能に（空ガードは全段シールド取らないでいいように追加）
			BMvTbl.SetAtkGuardFlag( { guard=_GuardFlag_GuardCrouch|_GuardFlag_GuardAir, time=64, flag=_ClearFlag_ChangeMv } );
		}
		
		Battle_Std.JumpFrameID_NotHoldButton({ mask=(1<<2), checkid=100, jumpid=101, endid=200 }); //ボタンホールドしてなかったらIDジャンプ		
	}
}

t.Mv_Atk_Std6B <-
{
	function FrameUpdate_After()
	{
	}
}

t.Mv_Atk_Cro3B <-
{
	function Init_After()
	{
		BMvTbl.SetHitCheckFlag( { type=1, val=_HitCheckFlag_Legs, time=255, flag=_ClearFlag_ChangeMv } ); // 足無敵にスカる
	}
	function HitInterrupt_After()
	{
		if( BMvTbl.GetMvStageStatus().IsTrainingBattle() == 2 )
		{
			if( Battle_Std.CheckDamageTiming() )
			{
				local enemy = BMvCore.GetEnemyCharaData();
				if( enemy.push() )
				{
					local mvname = BMvTbl.GetMvName();
					local mvs = BMvTbl.GetMvStatus();
					
					// _dp("\n mvname:"+mvname+" cnt:"+mvs.MvCount );
					
					enemy.pop();
					
					if( mvname == "Mv_Skill_214_AddC" && mvs.MvCount >= 47 )
					{
						//214Cの追加のMvかどうか見る
						BMvTbl.SetTutoMvFlag( 3 ); // 3+Bを相手の技の空振りに差し込んだ
					}
				}
			}
		}
	}
}

t.Mv_Atk_Cro3C <-
{
	function FrameUpdate_After()
	{
		Battle_Std.SetHitMuteki( 1, 8, _HitCheckFlag_Head ); // Param1 & 8 の時、_HitCheckFlag_Head 頭無敵
	}
}


//-----------------------------------------------------------------------------
// 214攻撃
//-----------------------------------------------------------------------------

t.Mv_Skill_214A <- 
{
	function FrameUpdate_After()
	{
		if(Battle_Std.GetUpdateFrameID()==100)
		{
			local nowvec = BMvTbl.GetVector(0); // 現在のベクトルを得る（パターン変更後だと初期化されてるかも）
			
			//Battle_Std.InitVector(); // ベクトル初期化
			
			//BMvTbl.SetVector( { x=nowvec.x, addx=(-nowvec.x/25), flags=_Vector_Div } ); //20Fで収束ベクトルを登録	
			BMvTbl.SetVector( { x=nowvec.x, addx=(-nowvec.x/25), y=nowvec.y, addy=nowvec.addy+100 flags=_Vector_Normal } );
		}
	}
};

t.Mv_Skill_214B <-
{
	function FrameUpdate_After()
	{
		if(Battle_Std.GetUpdateFrameID()==100)
		{
			local nowvec = BMvTbl.GetVector(0); // 現在のベクトルを得る（パターン変更後だと初期化されてるかも）
			
			//Battle_Std.DrawDebugAttackInfo("vecx "+nowvec.x+" vecy "+nowvec.y);
			
			//Battle_Std.InitVector(); // ベクトル初期化
			
			//BMvTbl.SetVector( { x=nowvec.x, addx=(-nowvec.x/25), flags=_Vector_Div } ); //20Fで収束ベクトルを登録	
			
			//BMvTbl.SetVector( { x=nowvec.x, addx=(-nowvec.x/20), y=nowvec.y, addy=nowvec.addy+50, flags=_Vector_Normal } );
		}
	}
};

t.Mv_Skill_214_Add <-
{
	function Init_After()
	{
		BMvTbl.SetPosition( { y=0 } );
	}
}

t.Mv_Skill_236_AddB <-
{
	function FrameUpdate_After()
	{
		Battle_Std.SetHitMuteki( 1, 8, _HitCheckFlag_Head );
	}
	function LastUpdate_After()
	{
		if( BMvTbl.FromFinalize()==1 ) BSound.SE_Play( { type=_SeType_Normal, num=172 } );
	}
}

t.Mv_Skill_214_JAdd1 <-
{
}

t.Mv_Skill_214_JAdd2 <-
{
	function FrameUpdate_After()
	{
	}
}

/*
t.Mv_Skill_214EX <-
{
	function HitInterrupt_After()
	{
		if( Battle_Std.CheckDamageTiming() )
		{
			Battle_Std.SetPosition_DamageHanteiRect({ power=50, });
		}
		
		local hs = BMvTbl.GetMvHitStatus();
		if( hs.Type & _HitType_Damage && hs.isCatchFlag == 0 )
		{
			BMvTbl.SetFinalize(256); //ヒットMvに状態移行
		}
	}
	function Finalize()
	{
		Battle_Std.SwitchNextMoveTable("Mv_Neutral",[256,"Mv_Skill_214EX_Hit"]); //デフォ,[code,mv]...
	}
}


t.Mv_Skill_214EX_Hit <-
{
	flags = def_TmplFlags_NoAddComboRate|def_TmplFlags_ChangeStatusOnly // コンボレートを加算しない, 状態の移行のみ行う
	function HitInterrupt_After()
	{
		if( Battle_Std.CheckDamageTiming() )
		{
			Battle_Std.SetPosition_DamageHanteiRect({ power=50, });
		}
	}
}
*/

//-----------------------------------------------------------------------------
// 236攻撃
//-----------------------------------------------------------------------------

local maketmpl_SkillFireBall = function( param={} )
{
	local ret_tmpl = {};
	
	local mvparam =
	{
		ball_st = {},
	}
	
	switch( param.type )
	{
	case "A":
		mvparam.ball_st = { x=125, y=-184, mv="Mv_FireBall_236A",
		pat = "236Tama", vec = { x = 2300 }, ball=6, }
		break;
	case "B":
		mvparam.ball_st = { x=125, y=-184, mv="Mv_FireBall_236B",
		pat = "236Tama", vec = { x = 4000 }, ball=6, }
		break;
	case "C":
		mvparam.ball_st = { x=125, y=-184, mv="Mv_FireBall_236B",
		pat = "236Tama", vec = { x = 5000 }, ball=6, }
		break;
	case "EX":
		mvparam.ball_st = { x=125, y=-184, pat="236TamaEX", mv="Mv_FireBall_236EX", vec={ x=4200 }, ball=6 };
		break;
	}

	ret_tmpl.Init_After <- function()
	{
		BMvTbl.SetPP( def_PP_Hyd_236Bakuha, 0 ); //爆破フラグリセット
		
		Battle_Std.MoveCodeEx.AddFlag( 1, def_MC1_ChainShiftOK ); // ツールでCS可なら空振りCS可能
	}
	
	ret_tmpl.FrameUpdate_After <- function() : (mvparam)
	{
		switch( Battle_Std.GetUpdateFrameID() )
		{
		case 10:
			Battle_Std.CreateFireBall( mvparam.ball_st );
			break;
		}
	}	
	
	return ret_tmpl;
}

t.Mv_Skill_236A  <-
{
	function FrameUpdate_After()
	{
		if( Battle_Std.GetUpdateFrameID()==100 ) BMvTbl.SetCommandLongDelay(2);
		if( Battle_Std.GetUpdateFrameID()==200 ) Battle_Std.CreateFireBall( { x=0, y=0, mv="Mv_FireBall_236A", pat = "FireBallA", } );
	}
}

t.Mv_Skill_236B  <-
{
	function FrameUpdate_After()
	{
		if( Battle_Std.GetUpdateFrameID()==100 ) BMvTbl.SetCommandLongDelay(2);
		if( Battle_Std.GetUpdateFrameID()==200 ) Battle_Std.CreateFireBall( { x=0, y=0, mv="Mv_FireBall_236B", pat = "FireBallB", } );
	}
}

t.Mv_FireBall_236EX <-
{
	function Init_After()
	{
		Battle_Std.MoveCode.AddFlag( def_MC_Sousai|def_MC_Sousai_NoSubHitCount );
	}
	function FrameUpdate_After()
	{
		if( Battle_Std.CheckPlayerisDamage() )
		{
			local mvs = BMvTbl.GetMvStatus();
			BMvTbl.CalcHitValue(-10000);
		}
	}
}

t.Mv_Skill_236EX  <-
{
	function FrameUpdate_After()
	{
		if( Battle_Std.GetUpdateFrameID()==100 ) BMvTbl.SetCommandLongDelay(2);
		if( Battle_Std.GetUpdateFrameID()==200 ) Battle_Std.CreateFireBall( { x=0, y=0, mv="Mv_FireBall_236EX", pat = "FireBallEX", } );
	}
}

t.Mv_FireBall_236_AddA <-
{
	function Init_After()
	{
	}
	function FrameUpdate_After()
	{
	}
}

t.Mv_FireBall_236_AddA_Sousai <-
{
	function Init_After()
	{
		BMvTbl.SetPattern("Glasses_HitFireEff");
	}
}

t.Mv_FireBall_236_AddA_B <- t.Mv_FireBall_236_AddA;
t.Mv_FireBall_236_AddA_B_Sousai <- t.Mv_FireBall_236_AddA_Sousai;

t.Mv_Skill_236_AddA  <-
{
	function FrameUpdate_After()
	{
		if( Battle_Std.GetUpdateFrameID()==200 ) Battle_Std.CreateFireBall( { x=200, y=-220, vec = { x = 2500 }, mv="Mv_FireBall_236_AddA", pat = "FireBall_AddA", } );
		Battle_Std.SetHitMuteki( 1, 8, _HitCheckFlag_Legs );
	}
}

t.Mv_Skill_236_AddA_B  <-
{
	function FrameUpdate_After()
	{
		if( Battle_Std.GetUpdateFrameID()==200 ) Battle_Std.CreateFireBall( { x=200, y=-220, vec = { x = 3200 }, mv="Mv_FireBall_236_AddA_B", pat = "FireBall_AddA", } );
		Battle_Std.SetHitMuteki( 1, 8, _HitCheckFlag_Legs );
	}
}

t.Mv_FireBall_236A <-
{
	function Init_After()
	{
		Battle_Std.MoveCode.AddFlag( def_MC_Sousai );
	}
	function FrameUpdate_After()
	{
		if( Battle_Std.CheckPlayerisDamage() )
		{
			local mvs = BMvTbl.GetMvStatus();
			BMvTbl.CalcHitValue(-10000);
		}
	}
}

t.Mv_FireBall_236B <- t.Mv_FireBall_236A;

local moveenemy = function( _frame )
{
	local enemy = BMvEff.CheckHantei( { src=[ _Hantei_Etc, 4, 1 ], dst=[ _Hantei_Kurai, 0, -1 ], flags=_HC_EnemyPc } );
	if( enemy.isdone() )
	{
		//Battle_Std.DrawDebugAttackInfo("pushyboy ");
		
		local posst = BMvEff.GetPointStatus( { target=enemy } );
		
		local kyori = posst.pos_x; // 向きを計算しない
		local ykyori = posst.pos_y; // ykyori
		
		local move_pow =
		{
			xpow = -kyori/_frame,
			ypow = -ykyori/_frame,
		}		
		
		//Battle_Std.DrawDebugAttackInfo("kyori "+kyori+" move pow "+move_pow.xpow);
		
		if( enemy.push() )
		{
			local isAir = ( BMvTbl.CheckPosState( _PosState_Ground ) == 0)
			local bs = BtlMvStd.GetBoundStatus();
			if( bs.isDone )
			{
				//Battle_Std.DrawDebugAttackInfo("boundgettyboy ");
				
				BMvTbl.SetPosition( { x=move_pow.xpow, flags=_Position_Add } );
				
				if(isAir && move_pow.ypow > 0)
				{
					BMvTbl.SetPosition( { y=move_pow.ypow, flags=_Position_Add } );
				}
			}
			
			
			enemy.pop();
		}
	}	
}

t.Mv_SousaiObj_236Bakuha <-
{
	function Init()
	{
		// 各種補正は最初の１ヒットのみ
		BMvTbl.SetNoHoseiFlag( {  val=1, time=254, flag=_ClearFlag_ChangePattern|_ClearFlag_ChangeMv } );
		Battle_Std.MoveCode.AddFlag( def_MC_Sousai ); // 相殺が発生する
		
		BMvTbl.SetHitCheckFlag( { type=1, val=_HitCheckFlag_FireBall, time=255, flag=_ClearFlag_ChangeMv } ); // 弾無敵にスカる
	}
	function FrameUpdate() : (moveenemy)
	{
		Battle_Std.CheckSousai(); // def_MC_Sousai と触れたら相殺する
		
		moveenemy( 20 );
	}
	function Finalize()
	{
		BMvTbl.SetDeleteMoveTable();
	}
}


//-----------------------------------------------------------------------------
// 0202攻撃
//-----------------------------------------------------------------------------

t.Mv_FireBall_0202A <-
{
	function Init_After()
	{
		// 各種補正は最初の１ヒットのみ
		BMvTbl.SetNoHoseiFlag( {  val=1, time=254, flag=_ClearFlag_ChangePattern } );
	}
	function FrameUpdate_After() : (check_Tuto_Sagi)
	{
		check_Tuto_Sagi( { frameID=100, chr=Def_ChrNo_Hyd, mvname="Mv_Skill_623B" } ); // 一致でフラグ1がたつ
	}
}

t.Mv_FireBall_0202A_Hit <- {};
t.Mv_FireBall_0202A_Sousai <- {};

t.Mv_FireBall_0202B <- t.Mv_FireBall_0202A;
t.Mv_FireBall_0202B_Hit <- t.Mv_FireBall_0202A_Hit
t.Mv_FireBall_0202B_Sousai <- t.Mv_FireBall_0202A_Sousai;

local maketmpl_SkillThrustGroundWave = function( param={} )
{
	local ret_tmpl = {};
	
	local mvparam =
	{
		ball_xpos = 450,
		ball_mv = "Mv_FireBall_0202A",
	}
	
	switch( param.type )
	{
	case "A":
		mvparam.ball_xpos = 450;
		mvparam.ball_mv = "Mv_FireBall_0202A";
		break;
	case "B":
		mvparam.ball_xpos = 700;
		mvparam.ball_mv = "Mv_FireBall_0202B";
		break;
	case "C":
		mvparam.ball_xpos = 850;
		mvparam.ball_mv = "Mv_FireBall_0202B";
		break;
	}
	
	ret_tmpl.FrameUpdate_After <- function() : (mvparam)
	{
		switch( Battle_Std.GetUpdateFrameID() )
		{
		case 110:
			local eff = BMvEff.CreateObject( { x=mvparam.ball_xpos, y=0, start_pat="0202Tama", mvname=mvparam.ball_mv, flags=_Position_ToolShift } );		
			if( eff.push() )
			{
				//画面外に出てたら補正をかけよう
				local pos = BMvTbl.GetPosition( 0 ); //現在座標
				if( pos.x >= def_POS_GamenHajiX )
				{
					pos.x = def_POS_GamenHajiX;
				}
				else if( pos.x <= -def_POS_GamenHajiX )
				{
					pos.x = -def_POS_GamenHajiX;
				}
				BMvTbl.SetPosition( pos ); //座標更新
				BMvEff.ObjType_Set( { type=_ObjType_FireBall } ); //飛び道具
				Battle_Std.MoveCode.AddFlag( def_MC_FireBall ); // 行動コード(飛び道具)を設定		
				
				eff.pop();
			}
			break;
		}
	}	
	
	return ret_tmpl;
}

t.Mv_Skill_0202A <- maketmpl_SkillThrustGroundWave( { type="A" } );
t.Mv_Skill_0202B <- maketmpl_SkillThrustGroundWave( { type="B" } );

t.Mv_Skill_0202EX <-
{
	function FrameUpdate_After()
	{
		switch( Battle_Std.GetUpdateFrameID() )
		{
		case 100:
			BMvEff.CreateObject( { x=150, y=0, mvname="Mv_Obj_0202EXMover", flags=_Position_ToolShift } );
			break;
		}
	}
}

t.Mv_Obj_0202EXMover <-
{
	function Init_After()
	{
		BMvTbl.SetLP(1,0); // 子がヒットしたかどうかの受け皿
	}
	function FrameUpdate_After()
	{
		// _dp("\n BMvTbl.GetLP(1):"+BMvTbl.GetLP(1) );
		local pat = 0;
		switch( Battle_Std.GetUpdateFrameID() )
		{
		case 10: //小
			pat = "0202EXTama1";
			break;
		case 20: //中
			pat = "0202EXTama1";
			break;
		case 30: //大
			pat = "0202EXTama1";
			break;
		}
		if( pat!=0 )
		{
			local eff = BMvEff.CreateObject( { x=0, y=0, start_pat=pat, mvname="Mv_FireBall_0202EX" } );
		}
		
		if( Battle_Std.CheckFrontStageDistance( -150 ) )
		{
			local vec = BMvTbl.GetVector( 0 );
			BMvTbl.SetMuki( _Direction_Reverse );
			BMvTbl.SetVector( { x=vec.x, flags=_Vector_Normal } );
		}		
	}
}

local enemy_shift_y = function( y=0 )
{
	local enemy = BMvCore.GetNearEnemyCharaData(); // 敵情報を得る
	if(enemy.push())
	{
		local pos = BMvTbl.GetPosition(0);
		
		if(pos.y + (y*128) >= 0) y=0;
		
		//Battle_Std.DrawDebugAttackInfo( "e "+pos.y+" and y "+y+" and math "+((y*128)+pos.y) );
		
		BMvTbl.SetPosition( { x=0, y=y, flags=( _Position_Add | _Position_CaptureShift | _Position_ChangeMuki ) } );
		
		enemy.pop();
	}
}

t.Mv_FireBall_0202EX <-
{
	function Init_After()
	{
		local hosei_kaketa = 0;
		local oya = BMvCore.GetParentCharaData();
		if( oya.push() )
		{
			hosei_kaketa = BMvTbl.GetLP(1);
			
			oya.pop();
		}
		
		if( hosei_kaketa )
		{
			// 各種補正は最初の１ヒットのみ、をすでにかけた
			BMvTbl.SetNoHoseiFlag( {  val=0x80, time=254, flag=_ClearFlag_ChangePattern } );		
		}
		else
		{
			// 各種補正は最初の１ヒットのみ
			BMvTbl.SetNoHoseiFlag( {  val=1, time=254, flag=_ClearFlag_ChangePattern } );
		}
		
		BMvEff.ObjProcFlags_Set( { flags=_ObjProcFlags_EraseParentNull } ); // ヒット時親LPに値を入れるので親の引継ぎなし
		
	}
}

t.Mv_FireBall_0202EX_Hit <-
{
	function Init_After() : (enemy_shift_y)
	{
		local oya = BMvCore.GetParentCharaData();
		if( oya.push() )
		{
			// _dp("\n 親にヒットしたのを伝える")
			BMvTbl.AddLP(1,1); // ヒットしたよ
			oya.pop();
			
			
		}
		
		local epos = Battle_Std.GetEnemyPosition();
		
		//Battle_Std.DrawDebugAttackInfo( "e "+epos.y/128 );
		
		//if(epos.y < -200*128) enemy_shift_y(150);
		
	}
}
t.Mv_FireBall_0202EX_Sousai <- {};



//-----------------------------------------------------------------------------
// J236攻撃
//-----------------------------------------------------------------------------

local maketmpl_SkillAirFireBall = function( param={} )
{
	local ret_tmpl = {};
	
	local mvparam =
	{
		ball_st = {},
	}
	
	switch( param.type )
	{
	case "A":
		mvparam.ball_st = { x=0, y=50, mv="Mv_FireBall_J236A", pat = "J236Tama", };
		break;
	case "B":
		mvparam.ball_st = { x=0, y=50, mv="Mv_FireBall_J236B", pat = "J236Tama", };
		break;
	case "C":
		mvparam.ball_st = { x=0, y=50, mv="Mv_FireBall_J236B", pat = "J236Tama", };
		break;
	case "EX":
		mvparam.ball_st = { x=0, y=50, mv="Mv_FireBall_J236EX", pat = "J236EXTama", };
		break;
	}
	
	ret_tmpl.FrameUpdate_After <- function() : (mvparam)
	{
		switch( Battle_Std.GetUpdateFrameID() )
		{
		case 10:
			Battle_Std.CreateFireBall( mvparam.ball_st );
			break;
		}
	}	
	
	return ret_tmpl;
}

t.Mv_Skill_J236A <- maketmpl_SkillAirFireBall( { type="A" } );
t.Mv_Skill_J236B <- maketmpl_SkillAirFireBall( { type="B" } );
t.Mv_Skill_J236EX <- maketmpl_SkillAirFireBall( { type="EX" } );

t.Mv_FireBall_J236A <-
{
	function Init_After()
	{
		// 各種補正は最初の１ヒットのみ
		BMvTbl.SetNoHoseiFlag( {  val=1, time=254, flag=_ClearFlag_ChangePattern|_ClearFlag_ChangeMv } );
	}
}


t.Mv_FireBall_J236A_Sousai <- //飛び道具ヒット部分
{
	function Init_After() // 初回処理
	{
		BMvTbl.JumpFrameID( 256 );
	}
}

t.Mv_FireBall_J236B <- t.Mv_FireBall_J236A;
t.Mv_FireBall_J236B_Sousai <- t.Mv_FireBall_J236A_Sousai;
t.Mv_FireBall_J236EX <- t.Mv_FireBall_J236A;
t.Mv_FireBall_J236EX_Sousai <- t.Mv_FireBall_J236A_Sousai;

//-----------------------------------------------------------------------------
// 623攻撃
//-----------------------------------------------------------------------------


t.Mv_Obj_623_Fire <-
{
	function FrameUpdate_After()
	{
		if( Battle_Std.GetUpdateFrameID()==100 )
		{
			BMvEff.ObjProcFlags_Erase( { flags=_ObjProcFlags_EraseParentNull|_ObjProcFlags_EraseChangeParentMv|_ObjProcFlag_EraseParentDelete } );
		}
	}
}

t.Mv_Skill_623A <-
{
	function Init_After()
	{
		Battle_Std.InitVector(); //sliding causes desync from the effect
		
		local eff = BMvEff.CreateObject( { start_pat="623A_FireEff", mvname="Mv_Obj_623_Fire" } );
		if(eff.push())
		{
			BMvEff.SetObjectFlags( { flags=_ObjFlags_FromParentStop } );	
			BMvEff.ObjProcFlags_Set( { flags=_ObjProcFlags_EraseParentNull|_ObjProcFlags_EraseChangeParentMv|_ObjProcFlag_EraseParentDelete } );
			eff.pop();
		}
	}
	function FrameUpdate_After()
	{
		Battle_Std.SetHitMuteki2_Param1( { [8]=_HitCheckFlag_Head, [64]=Def_HitCheckFlag_AirDive } );
	}
};

t.Mv_Skill_623B <- {
	function Init_After()
	{
		Battle_Std.InitVector(); //sliding causes desync from the effect
		
		local eff = BMvEff.CreateObject( { start_pat="623B_FireEff", mvname="Mv_Obj_623_Fire" } );
		if(eff.push())
		{
			BMvEff.SetObjectFlags( { flags=_ObjFlags_FromParentStop } );	
			BMvEff.ObjProcFlags_Set( { flags=_ObjProcFlags_EraseParentNull|_ObjProcFlags_EraseChangeParentMv|_ObjProcFlag_EraseParentDelete } );
			eff.pop();
		}
	}
	function LastUpdate_After()
	{
		Battle_Std.CSAntenGaesi_DamageHosei(); // CSからの暗転返しで出したら補正をかける
	}
};

t.Mv_Skill_623_JAdd <-
{
	function LastUpdate_After()
	{
		Battle_Std.NoCansel_NoAttackHit();
	}
}

t.Mv_Skill_623EX <- {
	function Init_After()
	{
		BMvTbl.SetNoHoseiFlag( {  val=1, time=254, flag=_ClearFlag_ChangePattern|_ClearFlag_ChangeMv } );
	}
	function FrameUpdate_After()
	{	
		switch( Battle_Std.GetUpdateFrameID() )
		{
			case 5:
				local eff = BMvEff.CreateObject( { start_pat="623A_FireEff" } );
				if(eff.push())
				{
					//BMvEff.SetObjectFlags( { flags=_ObjFlags_FromParentStop } );	
					eff.pop();
				}
				break;
			case 6:
				local eff = BMvEff.CreateObject( { start_pat="623B_FireEff" } );
				if(eff.push())
				{
					//BMvEff.SetObjectFlags( { flags=_ObjFlags_FromParentStop } );	
					eff.pop();
				}
				break;
		}
	}
	function HitInterrupt_After()
	{
		if( Battle_Std.CheckDamageTiming() )
		{
			Battle_Std.SetPosition_DamageHanteiRect({ power=50 });
		}
	}
	function LastUpdate_After()
	{
		Battle_Std.CSAntenGaesi_DamageHosei(); // CSからの暗転返しで出したら補正をかける
	}
};

//-----------------------------------------------------------------------------
// 41236EX攻撃
//-----------------------------------------------------------------------------

t.Mv_Skill_41236EX <-
{
	function Init_After()
	{
		if( BMvTbl.GetMvStageStatus().IsTrainingBattle() == 2 ) // チュートリアルの時だけ処理する
		{
			//相手が236EXを出していて、MvCountがいくつ居ないなら暗転返し、という作りにする
			local enemy = BMvCore.GetEnemyCharaData();
			if( enemy.push() )
			{
				local e_mvname = BMvTbl.GetMvName();
				local e_mvs = BMvTbl.GetMvStatus();
				
				enemy.pop();
				
				//_dp("\n e:"+e_mvname+" s:"+e_mvs.MvCount );
				
				if( e_mvname == "Mv_Skill_236EX" && e_mvs.MvCount < 25 )
				{
					BMvTbl.SetTutoMvFlag( 13 ); // 236EXに対して暗転返しをしたっぽい
				}
			}
		}
	}
	function HitInterrupt_After()
	{
		if( Battle_Std.CheckDamageTiming() )
		{
			Battle_Std.SetPosition_DamageHanteiRect({ power=50 });
		}
		if( Battle_Std.CheckDamageTiming_FrameID( 20 ) )
		{
			BMvTbl.SetFinalize( 256 );
			
			//相手との距離が近かったらベクトル収束させる
			local kyori = Battle_Std.GetEnemyDistance()/128;
			// _dp("\n kyori:"+kyori );
			if( kyori <= 200 && kyori >= 0 )
			{
				// 120〜320 : 普通にヒット　かなり遅くする
				// 320〜    : 牽制とかにヒット　500ぐらいまではあるな
				
				// 200以内収束させる感じで
				local conv_par = (kyori / 2) * 85 / 100;
				if( conv_par < 30 ) conv_par = 10;
				if( conv_par > 100 ) conv_par = 100;

				local vec = BMvTbl.GetVector();

				// _dp("\n conv_par:"+conv_par+" x:"+vec.x );
				vec.x = vec.x * conv_par / 100;
				// _dp(" -> "+vec.x );
				
				BMvTbl.SetVector( { x=vec.x, addx=vec.addx, flags=_Vector_Normal } );
				
			}
		}
	}
	function Finalize_After()
	{
		Battle_Std.SwitchNextMoveTable("Mv_Neutral", [256,"Mv_Skill_41236EX_Hit"]); //デフォ,[code,mv]...				
	}
}

t.Mv_Skill_41236EX_Hit <-
{
	flags = def_TmplFlags_ChangeStatusOnly //状態の移行のみ行う
	function Init_After()
	{
		Battle_Std.PassBeforeMoveCodeEx( 1, def_MC1_CSAntenGaesiSkill ); // 前のMVからフラグの引き継ぐ
	}
	function FrameUpdate_After()
	{
		switch( Battle_Std.GetUpdateFrameID() )
		{
		case 50:
			BMvTbl.JumpFrameID(200);
			break;
		}
	}
	function LastUpdate_After()
	{
		Battle_Std.CSAntenGaesi_DamageHosei(); // CSからの暗転返しで出したら補正をかける
	}	
}

//-----------------------------------------------------------------------------
// 41236SP攻撃
//-----------------------------------------------------------------------------


t.Mv_Obj_41236EX_GarekiS <- 
{
	function Init_After() // 初回処理
	{
		BMvEff.SetObjectFlags( { flags=_ObjFlags_MoveTimeStopAll|_ObjFlags_NoGround  } );		

		BMvTbl.SetAngle( { angle_float=BMvEff.Random_F() } ); //てきとう
		local vx = (BMvEff.Random_Limit(2000)-1000)*3;
		local ry = BMvEff.Random_Limit(2000);
		local vy = -6500-ry;
		local frame = 40+BMvEff.Random_Limit(30);
		BMvTbl.SetVector( { x=vx, y=vy, addx=0, addy=-vy/frame, flags=_Vector_Div } );
	}
}

t.Mv_FireBall_Glasses <-
{
	function Init_After()
	{
		Battle_Std.AddFireBallFlags( def_BallFlags_NoAddHitComboRate );
		
		local eff = BMvEff.CreateObject( { start_pat="Glasses_GlowEff" } );
		if(eff.push())
		{
			BMvEff.SetObjectFlags( { flags=_ObjFlags_ParentMove } );	
			BMvEff.ObjProcFlags_Set( { flags=_ObjProcFlags_EraseParentNull|_ObjProcFlags_EraseChangeParentMv|_ObjProcFlag_EraseParentDelete } );
			
			BMvTbl.SetScale( { x=1.5*10000, y=1.5*10000 } );
			
			eff.pop();
		}
		
		local eff_2 = BMvEff.CreateObject( { start_pat="Glasses_GlowEff_Layer2" } );
		if(eff_2.push())
		{
			BMvEff.SetObjectFlags( { flags=_ObjFlags_ParentMove } );	
			BMvEff.ObjProcFlags_Set( { flags=_ObjProcFlags_EraseParentNull|_ObjProcFlags_EraseChangeParentMv|_ObjProcFlag_EraseParentDelete } );
			
			//BMvTbl.SetScale( { x=2*10000, y=2*10000 } );
			
			eff_2.pop();
		}
	}
	function FrameUpdate_After()
	{
		
	}
}

t.Mv_FireBall_Glasses_Damage <-
{
	function Init_After()
	{
		BMvTbl.SetPattern("Glasses_HitFireEff");
		
		local p = BMvCore.GetPlayerCharaData();
		if( p.push() )
		{
			BMvTbl.SetLP(0,1); //confirm glasses damage hit
			p.pop();
		}
		
		BMvEff.SetObjectFlags( { flags=_ObjFlags_MoveTimeStopAll } );
		
	}
}

t.Mv_Skill_41236SP <- //インス技
{
	function Init_After()
	{
		BMvTbl.SetLP(0,0); //glasses hit storage
	}
	function FrameUpdate_After() // フレーム更新処理
	{
		local s = BMvTbl.GetMvStatus(); // ステータス取得
		switch( Battle_Std.GetUpdateFrameID() )
		{
		case 100: //つきさすところ
			Battle_Std.CreateFireBall( { x=130, y=-290, vec = { x = 6000, y=100, addy=100 }, mv="Mv_FireBall_Glasses", pat = "Glasses_AtkObj" } );
			break;
		}
		
		if(s.FrameID==100 || s.FrameID==101)
		{
			if( BMvTbl.GetLP(0)==1 ) BMvTbl.SetFinalize(256);
		}
	}
	function Finalize() // 
	{
		local fc = BMvTbl.GetFinalizeCode();
		if( fc != 256 )
		{
			BMvEff.CutInProc_Erase(); //カットインがあったら消去する		
		}
		
		Battle_Std.SwitchNextMoveTable("Mv_Neutral", [256,"Mv_Skill_41236SP_Attack"]); //デフォ,[code,mv]...
	}	
	function LastUpdate()
	{
	}
}

t.Mv_Skill_41236SP_Attack <-
{
	flags = def_TmplFlags_NoAddComboRate,
	function Init_After()
	{
		Battle_Std.CreateObjectEX( { datatype=0, pat="41236SP_Ball_Hit_VanishEff", flags=_Position_ToolShift, objectflags=_ObjFlags_MoveTimeStopAll|_ObjFlags_NoGround } );	
	}
	function HitInterrupt_After()
	{
		Battle_Std.SetThrowHitFinalize(256);
	}
	function Finalize() // 
	{
		local fc = BMvTbl.GetFinalizeCode();
		if( fc != 256 )
		{
			BMvEff.CutInProc_Erase(); //カットインがあったら消去する		
		}
		
		Battle_Std.SwitchNextMoveTable("Mv_Neutral", [256,"Mv_Skill_41236SP_Hit"]); //デフォ,[code,mv]...
	}	
}

t.Mv_Obj_Glasses_Hit_AirSpin <-
{
	function FrameUpdate_After()
	{
		local p = BMvCore.GetPlayerCharaData();
		if( p.push() )
		{
			local s = BMvTbl.GetMvStatus();
			
			p.pop();
						
			if(s.FrameID==200) BMvTbl.SetFinalize();
		}
	}
	function Finalize_After()
	{
		Battle_Std.CreateObjectEX({ flags=_Position_ToolShift, datatype=1, pat=55, objectflags=_ObjFlags_MoveTimeStopAll|_ObjFlags_NoGround });
	}
}

t.Mv_Skill_41236SP_Hit <-
{
	flags = def_TmplFlags_NoAddComboRate,
	function Init_After()
	{
		BMvEff.SetCamera_Clipping( 0 );
		
		BMvEff.ThrowParam( { x=200, y=0 } );
		
		local epos = Battle_Std.GetEnemyPosition();		
		local sa_x = 0;
		//_dm("座標:"+epos.x);
		if( epos.x > def_POS_TechOverGamenHajiX )
		{
			sa_x = epos.x - def_POS_TechOverGamenHajiX;
		}
		else if( epos.x < -def_POS_TechOverGamenHajiX )
		{
			sa_x = epos.x - -def_POS_TechOverGamenHajiX;
		}
		//_dm("差："+sa_x);
		if( sa_x != 0 )
		{
			BMvTbl.SetPosition( { x=-(sa_x*2.8), flags=_Position_Add } );
			local pposx = BMvTbl.GetPP( def_PP_PlayerPosX ); //保存してある自分の座標を取得
			pposx -= sa_x; //こっちもズラす
			BMvTbl.SetPP( def_PP_PlayerPosX, pposx );		//自分の座標を更新		
			
			//Battle_Std.DrawDebugAttackInfo("gamen "+sa_x);
		}
		
		BMvEff.ThrowParam( { x=200, y=0 } );
		
		BMvEff.ThrowRelease( { type=5, airrecover=0, flags=_ThrowRelease_NoGroundRecover } );
		
		BMvEff.SetStopTime( { time=130, stopme=0, bounderase=1 } );

		Battle_Std.CreateObjectEX( { x=150, y=-150, datatype=0, mvname="Mv_Obj_Glasses_Hit_AirSpin", flags=_Position_ToolShift, objectflags=_ObjFlags_MoveTimeStopAll|_ObjFlags_NoGround } );
	}
	function FrameUpdate_After()
	{
		switch( Battle_Std.GetUpdateFrameID() )
		{
			case 201:
				Battle_Std.DrawDebugAttackInfo("fid 201");
				Battle_Std.CreateObjectEX( { datatype=0, pat="41236SP_Hit_Combo_VanishEff_1", flags=_Position_ToolShift, objectflags=_ObjFlags_MoveTimeStopAll|_ObjFlags_NoGround|_ObjFlags_ParentMove } );
				break;
			case 300:
				Battle_Std.CreateObjectEX( { x=0, datatype=0, pat="236236_FireEff_1", flags=_Position_ToolShift, objectflags=_ObjFlags_MoveTimeStopAll|_ObjFlags_NoGround } );	
				Battle_Std.CreateObjectEX( { x=0, datatype=0, pat="236236_FireEff_3", flags=_Position_ToolShift, objectflags=_ObjFlags_MoveTimeStopAll|_ObjFlags_NoGround } );
				break;
			case 301:
				Battle_Std.CreateObjectEX( { x=0, datatype=0, pat="236236_FireEff_4", flags=_Position_ToolShift, objectflags=_ObjFlags_MoveTimeStopAll|_ObjFlags_NoGround } );
				break;
			case 302:
				
				break
			case 303:
				Battle_Std.CreateObjectEX( { x=0, datatype=0, pat="236236_FireEff_5", flags=_Position_ToolShift, objectflags=_ObjFlags_MoveTimeStopAll|_ObjFlags_NoGround } );
				Battle_Std.CreateObjectEX( { x=0, datatype=0, pat="236236_FireEff_2", flags=_Position_ToolShift, objectflags=_ObjFlags_MoveTimeStopAll|_ObjFlags_NoGround } );
				break;
			case 304:
				Battle_Std.CreateObjectEX( { datatype=0, pat="236236_FireEff_6", flags=_Position_ToolShift, objectflags=_ObjFlags_MoveTimeStopAll|_ObjFlags_NoGround } );
				break;
			case 500:
				BMvEff.SetCamera_Quake( { type=2, time=20, power=6666 } );
				break;
			case 499:	
				local enemy = BMvCore.GetNearEnemyCharaData(); // 相手情報取得
				local e_pos = Battle_Std.GetEnemyPosition();
				
				local muki = BMvTbl.GetMuki();
				
				BMvEff.SetCamera_Focus( { y=e_pos.y, x=e_pos.x + ( (-300*128)*muki ), zoom=1.25, time=[28,100,10], type_in=1 } );
				
				break;
		}
	}
	function HitInterrupt_After()
	{
		if( Battle_Std.CheckDamageTiming_FrameID(200) )
		{
			BMvEff.SetCamera_Quake( { type=2, time=20, power=6666 } );
			//BMvEff.Slowmotion_Set( { time=20, power=6666 } );
			BMvEff.SetCamera_Focus( { charapos=1, zoom=1.5, time=[0,5,5] } );
		}
	}
	function LastUpdate_After()
	{
		BMvEff.SetCamera_Clipping( 1 );
		BMvEff.CutInProc_Erase();
		
		Battle_Std.NoCansel_NoAttackHit();
	}
}

t.Mv_Obj_IW_AtkRect <-
{
	function Init_After()
	{
		BMvTbl.SetNoHoseiFlag( {  val=1, time=254, flag=_ClearFlag_ChangePattern|_ClearFlag_ChangeMv } ); // ONCE補正
	}
}

t.Mv_Obj_NeoMax_FirePillarEff <-
{
	function Init_After()
	{
		BMvTbl.SetScale( { x=1*10000, y=2*10000 } );
		BMvTbl.SetLP(0,0);
	}
	function FrameUpdate_After()
	{
		local mvs = BMvTbl.GetMvStatus();
		
		local p = BMvCore.GetPlayerCharaData();
		if( p.push() )
		{
			local p_mvs = BMvTbl.GetMvStatus();
			
			local p_hitstatus = BMvTbl.GetLP(0);
			local p_frameID = p_mvs.FrameID;
			
			p.pop();
			
			if(mvs.FrameID==100) BMvTbl.JumpFrameID( 101 );
			
			if( p_mvs.FrameID==101 && p_mvs.isFrameUpdate && BMvTbl.GetLP(0)==0 )
			{
				BMvTbl.JumpFrameID( 102 );
				
				BSound.SE_Play( { type=_SeType_Player, num=605 } );
				
				//Battle_Std.DrawDebugAttackInfo("se");
				
				BMvTbl.SetLP(0,1);
			}
		}
	}
}


t.Mv_Skill_63214SP <-
{
	function Init_After()
	{
		BMvTbl.SetLP(0,0); //main attack hit storage
		
		BMvTbl.SetNoHoseiFlag( {  val=1, time=254, flag=_ClearFlag_ChangePattern|_ClearFlag_ChangeMv } );
	}
	function FrameUpdate_After() // フレーム更新処理
	{
		local s = BMvTbl.GetMvStatus();
		if( s.FrameID==100 )
		{
			if( BMvTbl.GetLP(0)==0 ) 
			{
				Battle_Std.DrawDebugAttackInfo("jump to whiff");
				BMvTbl.JumpFrameID( 101 );
			}
			
			BMvEff.SetCamera_Quake( { time=25, type=2, clear=0, } );
		}
		if( s.FrameID==300 )
		{
			if( BMvTbl.GetLP(0)==1 ) BMvTbl.JumpFrameID( 301 );
		}
		if( s.FrameID==200 )
		{
			if( BMvTbl.GetLP(0)==0 ) BMvTbl.JumpFrameID( 201 );
			if( BMvTbl.GetLP(0)==100 ) BMvTbl.JumpFrameID( 1024 );
		}
		
		if( s.FrameID==10 && s.isFrameUpdate && BMvTbl.GetLP(0)==1 )
		{
			//Battle_Std.DrawDebugAttackInfo("fr");
			
			BSound.SE_Play( { type=_SeType_Player, num=604 } );
		}		
		
		if( Battle_Std.GetUpdateFrameID()==101 && BMvTbl.GetLP(0)==1  )
		{
			BMvEff.SetCamera_Quake( { time=50, type=2, clear=0, } );
			
			//BMvEff.ResetCamera();
			BMvEff.ResetViewCamera();
			BMvEff.SetCamera_Focus( { charapos=1, zoom=1.35, time=[0,75,20] } );
		}	
				
		if( Battle_Std.GetUpdateFrameID()==1000  ) BMvEff.CreateObject( { mvname="Mv_Obj_NeoMax_FirePillarEff", y=-20*128 } );
		
		if( Battle_Std.GetUpdateFrameID()==2048 ) BMvEff.CreateObject( { mvname="Mv_Obj_NeoMax_GloveMeltEff", y=0 } );
		if( Battle_Std.GetUpdateFrameID()==1025 ) 
		{
			BMvEff.CutInProc_Erase();
			
			//BMvTbl.SetFinalize(0);
			BMvTbl.SetPattern("NeoMax_SPWin");
		}
	}
	function HitInterrupt_After()
	{
		local s = BMvTbl.GetMvStatus();
		local pos = BMvTbl.GetPosition( 0 );
		
		if( Battle_Std.CheckDamageTiming() && BMvTbl.GetLP(0)==0 && s.FrameID==300 ) 
		{
			BMvTbl.SetLP(0,1);
			
			//BMvEff.ResetCamera();
			//BMvEff.ResetViewCamera();
			BMvEff.SetCamera_Focus( { charapos=1, zoom=1.35, time=[250,0,30], type_in=2 } );
		}
		
		//if( Battle_Std.CheckDamageTiming_FrameID( 101 ) )		
		
		if( Battle_Std.CheckDamageTiming() )
		{
			Battle_Std.SetPosition_DamageHanteiRect({ power=50 });
		}
		
		if( s.FrameID==101 )
		{
			local rs = BMvTbl.GetMvRoundStatus();
			
			if(	rs.isKo )
			{
				BMvTbl.SetLP(0,100); //special victory
				
				//Battle_Std.DrawDebugAttackInfo("glove melt condition");
				//BMvEff.Cockpit_SetView( { mode=0 } );
				
				//BMvEff.Slowmotion_Set( { time=300, power=40000 } );
			}
		}
		
	}
	function Finalize() // 
	{
		BMvEff.CutInProc_Erase();
		
		Battle_Std.SwitchNextMoveTable("Mv_Neutral",[256,"Mv_RoundWinPattern"]); //デフォ,[code,mv]...
	}	
	function LastUpdate()
	{
	}
}

//-----------------------------------------------------------------------------
// インフィニットワースＥＸＳ
//-----------------------------------------------------------------------------

t.Mv_Skill_IWEXIST <- 
{
	flags = def_TmplFlags_NoAddComboRate // コンボレートを加算しない
	function HitInterrupt_After()
	{
		Battle_Std.SetThrowHitFinalize(256); // ヒット分岐ファイナライズ
	}
	function Finalize() // 
	{
		Battle_Std.SwitchNextMoveTable("Mv_Neutral",[256,"Mv_Skill_IWEXIST_Hit"]); //デフォ,[code,mv]...
	}	
}

t.Mv_Skill_IWEXIST_Hit <-
{
	flags = def_TmplFlags_NoAddComboRate // コンボレートを加算しない
	function StepPhase( setphase=-1 )
	{
		if( setphase== -1)
		{
			BMvTbl.AddLP(0, 1);
			BMvTbl.SetLP(1, 0);		
		}
		else
		{
			BMvTbl.SetLP(0, setphase);
			BMvTbl.SetLP(1, 0);			
		}
	}
	
	function Init_After()
	{
		//Battle_Std.IWEXIST_CallOnePunch(); // 相手をMvBoundにする
	
		BSound.SE_Play( { type=_SeType_Player, num=610 } );
		
		Battle_Std.InitIWExistSkill();
		//BSound.SE_Play( { type=_SeType_Player, num=610 } ); //発動
		//BSound.SE_Play( { type=_SeType_Player, num=610 } ); //発動

		BMvEff.ThrowParam( { pattern=304, x=600, y=0, } ); //敵の座標を設定

		local p = BMvCore.GetCaptureCharaData();
		if( p.IsDone )
		{
			BMvCore.PushCharaData( p ); //	
				//BMvEff.SetObjectFlags( { flags=_ObjFlags_NoRender } ); //非表示にする
				Battle_Std.InitVector(); //とりあえず…
			BMvCore.PopCharaData(); //	
		}
		
		BMvEff.ThrowChara_SetJoint( 0 ); //くっつけない
		
		Battle_Std.CreateObjectEX( { datatype=0, x=0, y=0, mvname="Mv_IWEXIST_Camera", flags=_Position_ToolShift,
		objectflags=_ObjFlags_NoCamera|_ObjFlags_MoveTimeStopAll|_ObjFlags_NoRender|_ObjFlags_NoGround,
		objprocflags=_ObjProcFlags_EraseChangeParentMv, //行動変更で消滅
		initfunc = function()
		{
			BMvEff.SetExist( { level = _Exist_NoHantei } );
		}
		} );		
		
		//多分ここまではワンセットなのでは
		BMvTbl.SetPP(def_PP_Temp,0); //状態管理に使おう
		
		BMvTbl.SetLP(0,0); //フェイズ番号
		BMvTbl.SetLP(1,0); //フェイズカウンタ
		BMvTbl.SetLP(8,0); //音声タイミング
	}
	function FrameUpdate_After()
	{
		//音声は別扱い
		//BMvTbl.SetLP(8,0); //音声タイミング
		local sound_time = BMvTbl.GetLP(8);
		BMvTbl.AddLP(8,1);
		if( sound_time==0 )
		{
			//BSound.SE_Play( { type=_SeType_Player, num=610 } );
		}
		else if( sound_time==120-60+15 )
		{
			BSound.SE_Play( { type=_SeType_Player, num=651 } );		
		}		
	
		local s = BMvTbl.GetMvStatus(); // ステータス取得
		local mode = BMvTbl.GetLP(0); //状態
		local phasecnt = BMvTbl.GetLP(1); //カウンタ取得
		BMvTbl.AddLP(1,1); //1F進める		
		
		switch( mode )
		{
		case 0: //初期待機
			if( phasecnt>40 ) StepPhase();
			break;
		case 1: //タマを飛ばす
			if( phasecnt==0 )
			{
				//たまを飛ばす
				BMvEff.ThrowParam( { pattern=320, x=600, y=0, } );
				Battle_Std.DrawBladeEffect( { x=600, y=-250, pat="391ef_a100", } );
				
				// local p = BMvCore.GetCaptureCharaData();
				// if( p.IsDone )
				// {
					// BMvCore.PushCharaData( p ); //	
						// BMvEff.EraseObjectFlags( { flags=_ObjFlags_NoRender } ); //消していたのを戻す
					// BMvCore.PopCharaData(); //					
				// }			
			}
			break;
		case 150: //きった後
			if( phasecnt>200 ) StepPhase();
			break;
		case 151: //きった後
			if( phasecnt>300 ) StepPhase();
			break;
		}
		
		switch( Battle_Std.GetUpdateFrameID( s ) )
		{
		case 50: //かまえループ開始
			Battle_Std.DrawBladeEffect( { x=-24, y=-236, pat="391ef_a", } );
			break;
		case 100: //きりはじめ
			//ハイド付近にカメラを固定
			//BSound.SE_Play( { type=_SeType_Player, num=624 } ); //ため
			
			StepPhase(100); //切った後にする 
			break;
		case 120: //剣をチャージ開始
			BMvEff.SetCamera_Quake( { time=120, type=2, clear=0, } ); //揺らし
			break;
		case 150: //きった
			BMvEff.SetCamera_Quake( { time=255, type=2, clear=0, } ); //揺らし
			
			//BSound.SE_Play( { type=_SeType_Player, num=624 } ); //ため
			Battle_Std.CreateObjectEX( { x=80, y=0, pat="391ef_b", mvname="Mv_IWEXIST_Eff_391ef_b", flags=_Position_ToolShift,
				objectflags=_ObjFlags_EraseParentPatChange, //パターン変更で
				objprocflags=_ObjProcFlags_EraseChangeParentMv, //行動変更で消滅
			} );
			
			Battle_Std.CreateObjectEX( { x=80, y=0, mvname="Mv_Call_LightEff", flags=_Position_ToolShift,
				objectflags=_ObjFlags_NoCamera|_ObjFlags_MoveTimeStopAll|_ObjFlags_NoRender|_ObjFlags_NoGround,
				objprocflags=_ObjProcFlags_EraseChangeParentMv, //行動変更で消滅
			} );

			StepPhase(150); //すすめる
			
			local p = BMvCore.GetCaptureCharaData();
			if( p.IsDone )
			{
				BMvCore.PushCharaData( p );
					BMvTbl.SetVector( { x=-256, y=-64 } );
				BMvCore.PopCharaData();		
			}
			
			BMvEff.ThrowParam( { pattern=320, x=750, y=-150, } );

			
			break;
		case 250: //とどめ判定
			Battle_Std.IWExistSkill_FinishEffect(); //KOと同じような揺れやスローを呼ぶ

			BSound.SE_Play( { type=_SeType_Player, num=626 } ); //ﾊｧﾊｧ
		
			StepPhase(250); //すすめる
			BMvEff.FadeProc_Set({type=0, time=[30,300,0] color=0x8D0017})
			break;
		case 300: //ホアイトアウト
			break;
		}
	}
	function Finalize()
	{
		BMvTbl.SetNextMoveTable( "Mv_Skill_IWEXIST_End" );
	}	
	function LastUpdate_After()
	{
		BMvEff.FadeProc_SetRenderFlag(1); // 0:カットインBG描画なし
		
		BMvEff.SetCamera_Quake( { time=0, type=2, clear=0, } ); //揺らし
		BMvEff.FadeProc_Set({type=0, time=[0,1,30] color=0x8D0017})
	
		//つかみ開放
		//BMvEff.SetCamera_Focus( { zoom=1.0, time=[0,0,30] } ); //カメラ固定
		BMvEff.ThrowParam( { x=100, y=-1224, } );
		BMvEff.ThrowRelease( { type="斜め下バウンド", airrecover=0, flags=_ThrowRelease_NoAttackHit|_ThrowRelease_NoGroundRecover } );
		Battle_Std.FinalizeIWExistSkill();
	}	
}

t.Mv_Skill_IWEXIST_End <- {};
	

//演出中はこいつにカメラが固定される
t.Mv_IWEXIST_Camera <-
{
	function Init()
	{
		BMvEff.SetCamera_Focus( { charapos=1, zoom=1.0, time=[60,999,60] } );
		//LP0
	}
	function FrameUpdate()
	{
		//親のLPみて変化
		local p = BMvCore.GetPlayerCharaData(); // プレイヤーの情報を得る
		if( p.IsDone )
		{
			BMvCore.PushCharaData( p ); //
				local mode = BMvTbl.GetLP(0);
			BMvCore.PopCharaData(); //

			//PP変化の瞬間のみ見る
			if( mode!= BMvTbl.GetLP(0) )
			{
				BMvTbl.SetLP(0,mode);
				_dm("モード変更:"+mode);
				
				switch( mode )
				{
				case 0: //
					break;
				case 100: //構え開始
					//カメラ拡大
					BMvEff.SetCamera_Focus( { charapos=1, zoom=1.25, time=[60,999,60] } );
					break;
				case 150: //きるところ
					break;
				}
			}
			
			//モード中常時やること
			switch( mode )
			{
			case 150: //
				//相手の方に移動開始
				local enemy = BMvCore.GetNearEnemyCharaData(); // 相手情報取得
				if( enemy.IsDone ) // 有効かどうか一応チェック
				{
					local posst = BMvEff.GetPointStatus( { target=enemy } ); // 位置情報取得
					//local angle_deg = posst.angle * 180; // 360度にしてみる（0.0-2.0 なのでx180で変換）
					//print( format( "角度：%f  距離：%d", angle_deg, posst.distance ) );
					
					local v = BMvEff.GetVector_FromAngle( { angle = posst.angle, speed = posst.distance/60 } );
					BMvTbl.SetVector( { x=v.x, y=v.y, flags=_Vector_DivKeep|_VecFlag_NoMuki } );							
				}
				break;
			case 151: //
				//相手の方に移動開始
				local enemy = BMvCore.GetNearEnemyCharaData(); // 相手情報取得
				if( enemy.IsDone ) // 有効かどうか一応チェック
				{
					local posst = BMvEff.GetPointStatus( { target=enemy } ); // 位置情報取得
					//local angle_deg = posst.angle * 180; // 360度にしてみる（0.0-2.0 なのでx180で変換）
					//print( format( "角度：%f  距離：%d", angle_deg, posst.distance ) );
					
					local v = BMvEff.GetVector_FromAngle( { angle = posst.angle, speed = posst.distance/200 } );
					local pow = 150;
					BMvTbl.SetVector( { x=v.x*pow/100, y=v.y, flags=_Vector_DivKeep|_VecFlag_NoMuki } );							
				}
				break;
			case 152: //
				Battle_Std.InitVector(); //ベクトル初期化
				break;
			case 300: //
				BMvTbl.SetFinalize(0); //さよなら
				break;
			}
		}
	}
	function Finalize()
	{
		BMvTbl.SetDeleteMoveTable();
	}
	function LastUpdate()
	{
		BMvEff.SetCamera_Focus( { time=[0,0,0] } );
		BMvEff.ResetViewCamera();
	}
}

t.Mv_IWEXIST_Eff_391ef_b <-
{
	function Init()
	{
		//BMvTbl.SetPattern("391ef_b");
	}
	function FrameUpdate()
	{
		//親のLPみて変化
		local p = BMvCore.GetPlayerCharaData(); // プレイヤーの情報を得る
		if( p.IsDone )
		{
			BMvCore.PushCharaData( p ); //
				local mode = BMvTbl.GetLP(0);
			BMvCore.PopCharaData(); //	
		
			//赤いのが出始めたらうんたん
			switch( Battle_Std.GetUpdateFrameID() )
			{
			case 100:
				local p = BMvCore.GetPlayerCharaData(); // 操作親の情報を得る
				BMvCore.PushCharaData( p ); //	
					BMvEff.SetCharaColor( { color=0x222222, intime=20, time=255, type=4} );
				BMvCore.PopCharaData(); //
				
				BMvEff.CreateObject( { mvname="Mv_IWEXIST_Eff_391ef_AtkRect" } ); //判定			
				break;
			}
			
			if( mode>= 300 )
			{
				BMvTbl.SetFinalize(0);
			}
		}
	}
	function Finalize()
	{
		BMvTbl.SetDeleteMoveTable();
	}
	function LastUpdate()
	{
		BMvEff.SetCharaColor( { color=0x222222, time=0, type=0} );	
	}
}

t.Mv_IWEXIST_Eff_391ef_AtkRect <-
{
	function Init()
	{
		BMvTbl.SetPattern("391ef_AtkRect");
	}
	function FrameUpdate()
	{
		//親のLPみて変化
		local p = BMvCore.GetPlayerCharaData(); // プレイヤーの情報を得る
		if( p.IsDone )
		{
			BMvCore.PushCharaData( p ); //
				local mode = BMvTbl.GetLP(0);
			BMvCore.PopCharaData(); //	
		
			if( mode>= 250 )
			{
				BMvTbl.SetFinalize(0);
			}
		}
	}
	function Finalize()
	{
		BMvTbl.SetDeleteMoveTable();
	}
}

t.Mv_Call_LightEff <-
{
	function Init()
	{
		//BMvTbl.SetPattern("391ef_b");
		BMvTbl.SetLP(0,0); //カウンタ初期化
		BMvEff.SetExist( { level = _Exist_NoHantei } ); // 全ての判定チェックなし
	}
	function FrameUpdate()
	{
		//赤いのが出始めたらうんたん
		//local mvcnt = BMvTbl.GetLP(0); //カウンタ取得
		//BMvTbl.AddLP(0,1); //1F進める
		
		local s = BMvTbl.GetMvStatus(); // ステータス取得
		if( s.MvCount%30==0 && s.MvCount!=BMvTbl.GetLP(0) )
		{
			BMvTbl.SetLP(0,s.MvCount); //処理したフレームを記憶
			
			Battle_Std.CreateObjectEX({ x=0, y=0, pat="IWE_Light", FrameID=[0,10,20],
				objectflags=_ObjFlags_NoCamera|_ObjFlags_MoveTimeStopAll|_ObjFlags_NoGround,
			});		
		}
	}
	function Finalize()
	{
		BMvTbl.SetDeleteMoveTable();
	}
}






KDASH_MoveTable <- Battle_Std.MakeMoveTable( t, KDASH_CommandTable, Def_ChrNo_KDash );
__dofile__("./data/KDash_0/KDash_0_selist.txt"); //ＳＥ定義

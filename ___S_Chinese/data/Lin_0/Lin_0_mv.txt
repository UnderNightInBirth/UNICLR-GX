// 行動リストテーブル
//LIN_MoveTable <- {};
local t = {};

//-----------------------------------------------------------------------------
// フォースファンクション
//-----------------------------------------------------------------------------

t.Mv_Atk_StdBandC <-
{
	function Init_After()
	{
		Battle_Std.SetVorpalPattern( "V_B+C" );
		
		// モーション中弾無敵にする？
		BMvTbl.SetLP(0,0); // エフェクトよんだかどうか。実質避けに成功したかどうかです。コマンドの方でも使ってる。
		Battle_Std.InitVector(); // ダッシュ慣性が付くと重なり表裏ができるので消す
		Battle_Std.PP_AddFlag( def_PP_GRDAction_UseGRD, def_PP_GAU_NoUpdateUse ); // 4F目の消費を無くす
	}
	function FrameUpdate_After()
	{
		Battle_Std.SetHitMuteki( 1, 8, _HitCheckFlag_Head|_HitCheckFlag_FireBall ); // Param1 & 8 の時、_HitCheckFlag_Head|_HitCheckFlag_FireBall 頭無敵＋弾無敵
	
		// 特殊判定に攻撃が触れていたら避けエフェクトを出す
		// でも避けれないでやられちゃうかもしれないからダメージ消去フラグはつける
		// なんでも攻撃出現が１減ったら無敵なので何もしない
		if( BMvTbl.GetLP(0)==0 )
		{
			local enemy = BMvEff.CheckHantei( { src=[ _Hantei_Etc, 0, -1 ], dst=[ _Hantei_Attack, 0, -1 ], flags=_HC_EnemyPc|_HC_EnemyObj } );
			if( enemy.push() ) //親かオブジェクトが触れていた
			{
				// 攻撃出現チェック
				local lefthitcount = BMvTbl.CalcHitValue(0);
				local e_mvcode = BMvTbl.GetMoveCode();
				local atkGuardFlag = BMvTbl.GetAtkGuardFlag();
				enemy.pop();
				
				if( lefthitcount != 0 && (e_mvcode&def_MC_Throw)==0 && !(atkGuardFlag&_GuardFlag_ThroughExceptBound) )
				{
					BMvTbl.SetLP(0,1); // エフェクトよんだ
					local eff = BMvEff.CreateObject( { mvname="Mv_Obj_SakeDummy" } );
					BMvTbl.SetPP( def_PP_GRDAction_UseGRD, 0 ); // 避け成功したのでGRD減る予約を消す
				}
			}
		}
	}
}

t.Mv_Obj_SakeDummy <-
{
	function Init_After()
	{
		BMvEff.SetObjectFlags( { flags=_ObjFlags_EraseParentDamage } );
	}
	function FrameUpdate_After()
	{
		local player = BMvCore.GetPlayerCharaData();
		if( player.push() )
		{
			local pl_pos = BMvTbl.GetPosition();
			player.pop();
			
			// 避けの行動中のみ追尾するようにする
			// ObjectFlagでやると、1Fズレるのでこうしている
			if( BMvTbl.CheckMvUniqueID( { datatype=_DataType_Player } ) != 0 )
			{
				BMvTbl.SetPosition( { x=pl_pos.x } );
			}
		}
	}
}

t.Mv_Atk_StdBandC_AddAtk <-
{
	function Init()
	{
		Battle_Std.InitCharaVector() //慣性を残したベクトル初期化
		BMvTbl.ClearHitStatus(); //ヒット情報のクリア
		BMvTbl.CalcHitValue(-10000);  // 攻撃回数情報のクリア
	
		BMvTbl.SetPattern("B+C_Add");
		BMvTbl.SetMvAction(def_MVA_EXAtk);
		Battle_Std.MoveCode.AddFlag( def_MC_Atk ); // 行動コード(通常技)を設定
		
		// BMvTbl.SetLP(0,0); // 前の避けで避けに成功していると1が入っている
		
		if( BMvTbl.GetLP(0)==1 )
		{
			BMvTbl.JumpFrameID(50); // 避け成功していると発生が早くなる
		}
	}
	function FrameUpdate()
	{
		Battle_Std.SetHitMuteki( 1, 8, _HitCheckFlag_Head ); // Param1 & 8 の時、_HitCheckFlag_Head 頭無敵
		
		Battle_Std.TypeSE_Play({ type="Mv_Atk_StdBandC_AddAtk_FU" });
	}
	function HitInterrupt()
	{
		Battle_Std.SetThrowHitFinalize(256); // ヒット分岐ファイナライズ
		
		if( Battle_Std.CheckGuardTiming() || Battle_Std.CheckCatchedTiming_FlagHit() )
		{
			//
			Battle_Std.MoveCodeEx.AddFlag( 1, def_MC1_ChainShiftOK ); // ツールでCS可なら空振りCS可能
		}
	}
	function Finalize() // 
	{
		Battle_Std.SwitchNextMoveTable("Mv_Neutral",[256,"Mv_Atk_StdBandC_AddAtk_Hit"]); //デフォ,[code,mv]...
	}
}

t.Mv_Atk_StdBandC_AddAtk_Hit <-
{
	function Init()
	{
		Battle_Std.InitCharaVector() //慣性を残したベクトル初期化
		BMvTbl.ClearHitStatus(); //ヒット情報のクリア
		BMvTbl.CalcHitValue(-10000);  // 攻撃回数情報のクリア
	
		BMvTbl.SetPattern("B+C_Add_Hit")
		Battle_Std.MoveCode.AddFlag( def_MC_Atk ); // 行動コード(通常技)を設定
		BMvTbl.SetMvAction(def_MVA_EXAtk);
		
		//保険処理（判定側で開放自体はしている）
		BMvEff.ThrowParam( { pattern=320, x=200, y=0, } );
		BMvEff.ThrowRelease( { type="追撃ダウン", airrecover=0, flags=0 } ); //開放のみ
	}
	function FrameUpdate()
	{
		local mvs = BMvTbl.GetMvStatus();
		switch( Battle_Std.GetUpdateFrameID( mvs ) )
		{
		case 100: // 空中に出現
			// 相手の座標に出てくる
			local enemy = BMvCore.GetNearEnemyCharaData();
			if( enemy.push() )
			{	
				BMvTbl.SetPosition( { x=-64, flags=_Position_ChangeMuki|_Position_Add } );
				local epos = BMvTbl.GetPosition(0);
				enemy.pop();
				
				BMvTbl.SetPosition( { x=epos.x+(200<<7)*BMvTbl.GetMuki(), y=epos.y } ); // 相手の位置に出現
			}
			break;
		case 200: // 空中に出現
			// 相手の座標に出てくる
			local enemy = BMvCore.GetNearEnemyCharaData();
			if( enemy.push() )
			{	
				BMvTbl.SetPosition( { x=-64, flags=_Position_ChangeMuki|_Position_Add } );
				local epos = BMvTbl.GetPosition(0);
				enemy.pop();
				
				BMvTbl.SetPosition( { x=epos.x+(200<<7)*BMvTbl.GetMuki(), y=epos.y-(150<<7) } ); // 相手の位置に出現　少し上
			}
			break;
		case 300: // 地上に出現
			local enemy = BMvCore.GetNearEnemyCharaData();
			if( enemy.push() )
			{	
				BMvTbl.SetPosition( { x=-64, flags=_Position_ChangeMuki|_Position_Add } );
				local epos = BMvTbl.GetPosition(0);
				enemy.pop();
				
				BMvTbl.SetPosition( { x=epos.x+(300<<7)*BMvTbl.GetMuki(), y=0 } ); // 相手の位置に出現
			}			
			BMvTbl.SetPosition( { y=0 } ); // 着地
			break;
		}
		if( mvs.FrameID == 280 )
		{
			// 相手があと何フレームで地面に落ちるか計算
			// 相手の高さがある程度下になったら進む
			local enemy = BMvCore.GetNearEnemyCharaData();
			if( enemy.push() )
			{	
				local epos = BMvTbl.GetPosition(0);
				enemy.pop();
				if( epos.y > -370<<7 )
				{
					BMvTbl.JumpFrameID( 300 );
					BMvTbl.SetPosition( { y=0 } ); // 着地
				}
			}
		}
		else if( mvs.FrameID == 310 || mvs.FrameID == 330 || mvs.FrameID == 340)
		{
			// 相手があと何フレームで地面に落ちるか計算
			// 相手の高さがある程度下になったら進む
			local enemy = BMvCore.GetNearEnemyCharaData();
			if( enemy.push() )
			{	
				local epos = BMvTbl.GetPosition(0);
				enemy.pop();
				//_dp("\n epos.y:"+epos.y);
				if( epos.y > -120<<7 )
				{
					BMvTbl.JumpFrameID( 350 );
				}
			}
		}		
		Battle_Std.TypeSE_Play({ type="Mv_Atk_StdBandC_AddAtk_Hit_FU" });
	}
	function Finalize()
	{
		BMvTbl.SetNextMoveTable( "Mv_Neutral" );
	}
	function LastUpdate_After()
	{
		Battle_Std.NoCansel_NoAttackHit(); //何かでキャンセルしなかった場合追撃不能にする
	}	
}

//-----------------------------------------------------------------------------
// イベント
//-----------------------------------------------------------------------------

t.Mv_Standby <-
{
	function Init_After()
	{
		BMvEff.CreateObject( { x=-100, y=-300, mvname="Mv_Geboku", flags=_Position_ToolShift } );
	}
}

t.Mv_Startup <-
{
	function Init_After()
	{
		BMvEff.CreateObject( { x=-100, y=-300, mvname="Mv_Geboku", flags=_Position_ToolShift } );
	}
}

//-----------------------------------------------------------------------------
// 共通動作
//-----------------------------------------------------------------------------

t.Mv_NeutralWait <-
{
	function FrameUpdate_After()
	{
		local s = BMvTbl.GetMvStatus(); // ステータス取得
		if( s.FrameID==500 )
		{
			//ランダムで先(510)に進む
			local r = BMvEff.Random_Limit(512);
			if( r<2 )
			{
				BMvTbl.JumpFrameID(510);
			}			
		}
	}
}

t.Mv_Dash_B <- // バクステ
{
	function Init_After() // 
	{
	}
}


//-----------------------------------------------------------------------------
// 通常投げ
//-----------------------------------------------------------------------------

t.Mv_Throw_F_Hit <- 
{
	function Init_After()
	{
		BMvEff.ThrowChara_SetJoint( 0 ); // 投げているキャラを自分の移動にくっつけるかどうか
		Battle_Std.SetThrowEnemyMuteki( 254 ); // 投げ中の相手に無敵時間を設定
	}
	function FrameUpdate_After()
	{
		switch( Battle_Std.GetUpdateFrameID() )
		{
		case 500: // けるところ
			Battle_Std.SetThrowEnemyMuteki( 0 ); // 投げ中の相手に無敵時間を設定
			BMvEff.ThrowParam( { x=100, y=0, pattern=320 } );
			BMvEff.ThrowRelease( {type="リンネ投げ転倒", airrecover=0, flags=_ThrowRelease_NoGroundRecover } );
			break;
		case 600: // ジャンプ
			local enemy = BMvCore.GetNearEnemyCharaData(); // 操作親
			if( enemy.isdone() ) // 有効かどうか一応チェック
			{
				local posst = BMvEff.GetPointStatus( { target=enemy } ); // 位置情報取得
				local vecx = (posst.distance/128)-100;
				BMvTbl.SetVector( { x=vecx*10, addx=0 } ); //  X要素だけ登録
			}
			break;
		case 1500: // 再度つかむ
			break;
		case 1510: //自分の座標を決定 出現
			BMvEff.ThrowChara_SetJoint( 0 ); //くっつけない
			local enemy = BMvCore.GetNearEnemyCharaData(); // 敵の情報をかえる
			if( enemy.push() )
			{
				BMvTbl.SetPattern( 290 );
				BMvTbl.SetPosition( { y=0 } ); // 地面につける
				
				BMvCore.CallEntryBCCachePreTransfer( { pat=290, frame=1, rest=6 } ); // つきさされの絵もキャッシュに載せる
				
				enemy.pop();
			}
			
			// 自分の特殊１の矩形取得
			local rc = BMvEff.GetHanteiRect( { check=[ _Hantei_Etc, 0 ], flags=( _HanteiFlag_Tool | _HanteiFlag_NoMukiChange ) } );
			// rcの左上座標に相手のパターン301の特殊１２をくっつける
			//if( rc.sy > -1 ) rc.sy = -1; //Ｙが０で地上が出ないようにｗ
			BMvEff.ThrowParam( { x=rc.sx, y=rc.sy, pattern=290, hantei_rect=[ _Hantei_Etc, 11 ], flags=(_Position_CaptureChara )  } );
			BMvEff.ThrowChara_SetJoint( 0 ); //くっつけない
			local pos = BMvTbl.GetPosition(0);
			if( pos.y>=0 ) BMvTbl.SetPosition( { y=-64 } );
			//_dm("rc.sy"+rc.sy);
			break;
		case 1600: //つきさすところ
			local cp = BMvCore.GetCaptureCharaData();
			if( cp.push() )
			{
				BMvTbl.JumpFrameID(1);
				
				cp.pop();
			}
			break;
		case 1700: //相手のやられ絵を戻す
			local cp = BMvCore.GetCaptureCharaData();
			if( cp.push() )
			{
				BMvTbl.JumpFrameID(0);
				
				cp.pop();
			}
			break;
		case 2000: //つかみ開放
			BMvEff.ThrowRelease( {type="あお向け起き上がり", airrecover=0, flags=_ThrowRelease_NoGroundRecover|_ThrowRelease_NoAttackHit } );
			local enemy = BMvCore.GetNearEnemyCharaData(); // 敵の情報をかえる
			if( enemy.push() )
			{
				BMvTbl.SetPosition( { y=0, } ); //念のため地面に埋める
				
				enemy.pop();
			}
			break;
		}
	}
}


//-----------------------------------------------------------------------------
// 通常攻撃
//-----------------------------------------------------------------------------

t.Mv_Obj_TestObj <- 
{
	function Init_After()
	{
		BMvEff.EraseObjectFlags( { flags=_ObjFlags_NoGround } );
	}
};

t.Mv_Atk_StdA <-
{
	function Init_After()
	{
		//BMvEff.CreateObject( { mvname="Mv_Obj_TestObj", start_pat=0x2b, x=250, y=0, flags=_Position_ToolShift } );
		
	}
	function HitInterrupt_After()
	{
		if( BMvTbl.GetMvStageStatus().IsTrainingBattle() == 2 )
		{
			//チュートリアルの時だけ処理する
		
			// チュートリアルのファジー5A用に仕込み
			// 地上の相手にヒットしたらフラグを立てる
			if( Battle_Std.CheckDamageTiming() )
			{
				local hs = BMvTbl.GetMvHitStatus();
				if( hs.PosState & _PosState_Ground  )
				{
					// _dp("\n チュートリアル");
					BMvTbl.SetTutoMvFlag( 2 ); // フラグたて
				}
			}
		}
	}
}

t.Mv_Atk_StdB <-
{
}

t.Mv_Atk_StdC <-
{
	function Init_After()
	{
		// 各種補正は最初の１ヒットのみ
		BMvTbl.SetNoHoseiFlag( {  val=1, time=254, flag=_ClearFlag_ChangePattern|_ClearFlag_ChangeMv } );
	}
}

t.Mv_Atk_CroA <-
{
	function Init_Before()
	{
		BMvTbl.SetLP(0,0); //FrameIDの飛び先指定
		local s = BMvTbl.GetMvStatus();
		if( s.DataPattern == def_PAT_Atk_CroA )
		{
			//FrameIDみてどっちに派生するか決める
			local s = BMvTbl.GetMvStatus();
			if( s.FrameID==100 || s.FrameID==110 )
			{
				BMvTbl.SetLP(0,1);
			}
		}
	}
	function Init_After()
	{
		switch( BMvTbl.GetLP(0) )
		{
		case 1: //２回目
			{
				BMvTbl.JumpFrameID(101);
				//下段なのでこっちだけ足属性にする
				BMvTbl.SetHitCheckFlag( { type=1, val=_HitCheckFlag_Legs|Def_HitCheckFlag_LightLegs, time=255, flag=_ClearFlag_ChangeMv } ); // 足無敵と小足無敵にスカる
			}
			break;
		}
		
		BMvTbl.SetLP(0,0); //一応初期化
		
		BMvTbl.SetHitCheckFlag( { type=1, val=_HitCheckFlag_Legs|Def_HitCheckFlag_LightLegs, time=255, flag=_ClearFlag_ChangeMv } );
	}
}

t.Mv_Atk_CroB <-
{
	function Init_After()
	{
		BMvTbl.SetHitCheckFlag( { type=1, val=_HitCheckFlag_Legs, time=255, flag=_ClearFlag_ChangeMv } ); // 足無敵にスカる
	}
	function FrameUpdate_After()
	{	
		Battle_Std.AddToolShift_NoSurinuke_FU( 3, (1<<1) );
	}
}

t.Mv_Atk_CroC <-
{
	function Init_After()
	{
		BMvTbl.SetHitCheckFlag( { type=1, val=_HitCheckFlag_Legs, time=255, flag=_ClearFlag_ChangeMv } ); // 足無敵にスカる
	}
}

t.Mv_Atk_DashStdB <-
{
	function Init_After()
	{
		// 各種補正は最初の１ヒットのみ
		BMvTbl.SetNoHoseiFlag( {  val=1, time=254, flag=_ClearFlag_ChangePattern|_ClearFlag_ChangeMv } );
	}
}

t.Mv_Atk_DashStdC <-
{
	function Init_After()
	{
		// 各種補正は最初の１ヒットのみ
		BMvTbl.SetNoHoseiFlag( {  val=1, time=254, flag=_ClearFlag_ChangePattern|_ClearFlag_ChangeMv } );
	}
}

//-----------------------------------------------------------------------------
// J6B
//-----------------------------------------------------------------------------

t.Mv_Atk_Air6B <-
{
	function FrameUpdate_After()
	{
		Battle_Std.JumpFrameID_NotHoldButton({ mask=(1<<1), checkid=100, jumpid=101, endid=150 }); //ボタンホールドしてなかったらIDジャンプ
	}
}

//-----------------------------------------------------------------------------
// C追加C
//-----------------------------------------------------------------------------

t.Mv_Atk_C_C <-
{
	function FrameUpdate_After()
	{
		Battle_Std.JumpFrameID_NotHoldButton({ mask=(1<<2), checkid=100, jumpid=101, endid=150 }); //ボタンホールドしてなかったらIDジャンプ
	}
}

//-----------------------------------------------------------------------------
// ６Ｃ三段攻撃
//-----------------------------------------------------------------------------
t.Mv_Atk_Std6C <-
{
	function FrameUpdate_After()
	{
		Battle_Std.SetHitMuteki2_Param1( { [8]=_HitCheckFlag_Head, } ); // Param1 & 8 の時、頭無敵
		
		Battle_Std.TypeSE_Play({ type="特殊技１" });
	}
}

//TODO:自動で生成したい
t.Mv_Atk_6C_6C <-
{
	function Init() // 
	{
		//BMvTbl.SetMuki(_Direction_Auto);
		Battle_Std.InitCharaVector() //慣性を残したベクトル初期化
		BMvTbl.ClearHitStatus(); //ヒット情報のクリア
		BMvTbl.CalcHitValue(-10000);  // 攻撃回数情報のクリア
	
		BMvTbl.SetPattern("6C_6C");
		Battle_Std.MoveCode.AddFlag( def_MC_Atk ); // 行動コード(通常技)を設定
	}
	function FrameUpdate()
	{
		Battle_Std.TypeSE_Play({ type="特殊技２" });
	}
	function Finalize() // 
	{
		BMvTbl.SetNextMoveTable( "Mv_Neutral" );
	}
}

t.Mv_Atk_6C_6C_6C <-
{
	function Init() // 
	{
		//BMvTbl.SetMuki(_Direction_Auto);
		Battle_Std.InitCharaVector() //慣性を残したベクトル初期化
		BMvTbl.ClearHitStatus(); //ヒット情報のクリア
		BMvTbl.CalcHitValue(-10000);  // 攻撃回数情報のクリア

		BMvTbl.SetPattern("6C_6C_6C");
		Battle_Std.MoveCode.AddFlag( def_MC_Atk ); // 行動コード(通常技)を設定
	}
	function FrameUpdate()
	{
		Battle_Std.TypeSE_Play({ type="特殊技３" });
	}
	function Finalize() // 
	{
		BMvTbl.SetNextMoveTable( "Mv_Neutral" );
	}
}

//-----------------------------------------------------------------------------
// ダッシュキャンセル前転
//-----------------------------------------------------------------------------

// 避け成功から出す時のかませMV
t.Mv_Shift_SakeSeikouCancelRoll <-
{
	function Init()
	{
		BMvTbl.SetFinalize(0);
		// 無敵時間をつける
		BMvEff.SetPlayerTimer( { muteki_nage=4, muteki_dage=4 } );
	}
	function Finalize()
	{
		BMvTbl.SetNextMoveTable( "Mv_Skill_CancelRoll" );
	}
}

t.Mv_Skill_CancelRoll <-
{
	flags = def_TmplFlags_NoFurimuki //振り向きを行わない
	function Init_After()
	{
		//ダッシュから直以外でも出るようになったのでダッシュから出した風にベクトルを固定する
		Battle_Std.InitVector(); // ベクトル初期化ですわ
		BMvTbl.SetVector( { x=2900, flags=_Vector_Normal } );
		BMvTbl.SetVector( { x=3500, addx=-350,flags=_Vector_DivKeep } ); // 収束でダッシュ慣性を登録		
		
		BMvEff.PcAfterImage_Set( {  type=1, range=8, delay=2, color=0x8FAAAAFF, blendmode=0 } );
	}
	function FrameUpdate_After() // フレーム更新処理
	{
		local s = BMvTbl.GetMvStatus(); // ステータス取得
		if( s.FrameID == 10 ) //分岐
		{
			local nowvec = BMvTbl.GetVector(0); // 現在のベクトルを得る（パターン変更後だと初期化されてるかも）
			Battle_Std.InitVector(); // ベクトル初期化
			BMvTbl.SetVector( { x=nowvec.x, addx=(-nowvec.x/5), flags=_Vector_Div } ); //10Fで収束ベクトルを登録
			
			if( BMvTbl.CheckFurimuki() )
			{
				BMvTbl.JumpFrameID(200);
				BMvTbl.SetMuki(_Direction_Reverse); //逆なんで反転
			}
			else
			{
				BMvTbl.JumpFrameID(100);			
			}
		}
		Battle_Std.SetHitMutekiParam1( { [8]=_HitCheckFlag_Head|_HitCheckFlag_FireBall, [16]=_HitCheckFlag_FireBall } );
	}
	function Finalize() // 
	{
		BMvTbl.SetNextMoveTable( "Mv_Crouch_Wait" );
	}
	function LastUpdate_After()
	{
		BMvEff.PcAfterImage_Clear(); //残像の消去
	}
}

//-----------------------------------------------------------------------------
// 特殊ダッシュキャンセル
//-----------------------------------------------------------------------------

t.Mv_Skill_CancelDash <- // 前ダッシュ
{
	function Init_After()
	{
		BMvEff.PcAfterImage_Set( {  type=1, range=8, delay=2, color=0x8FAAAAFF, blendmode=0 } );
	}
	function LastUpdate_After() //ダッシュから抜けるときに呼ぶ
	{
		local vec = BMvTbl.GetVector(0);  //vec に現在のベクトルを格納
		BMvTbl.SetVector( { x=vec.x, addx=-vec.x/10,flags=_Vector_DivKeep } ); // 収束でダッシュ慣性を登録
	}
	function LastUpdate_After()
	{
		BMvEff.PcAfterImage_Clear(); //残像の消去
	}	
}

t.Mv_Skill_JCancelAssult <- // アサルト
{
	function Init_After()
	{
		BMvEff.PcAfterImage_Set( {  type=1, range=8, delay=2, color=0x8FAAAAFF, blendmode=0 } );
		BMvTbl.AddAirCount( def_AC_Assault, 1 ); // アサルトカウンタ加算して再度使えないように
		BMvTbl.AddAirJumpCount(1);  //ジャンプ回数を加算し二段ジャンプした扱いにする
		BMvTbl.SetPrio( _CharaPrio_Near ); // アサルトによるプライオリティ手前
		
		Battle_Std.TypeSE_Play({ type="アサルト" });
		Battle_Std.MoveCodeEx.AddFlag( 7, def_MC7_AirAssult );//空中アサルト扱いとする
	}
	function FrameUpdate_After()
	{
		local mvs = BMvTbl.GetMvStatus();
		switch( Battle_Std.GetUpdateFrameID( mvs ) )
		{
		case 100:
			//ダッシュ開始
			local angle = Battle_Std.CCharaVector_GetToolAngle();	
			local eff = BMvEff.CreateObject( { x=0, y=-200, mvname="", datatype=1, start_pat=66, flags=_Position_ToolShift } );
			if( eff.push() )
			{
				BMvEff.SetObjectFlags( { flags=_ObjFlags_NoGround|_ObjFlags_MoveTimeStopAll } );
				BMvTbl.SetAngle({ angle=angle });
				
				eff.pop();
			}
			break;
		}
		if( mvs.MvCount == 12 )
		{
			local vec = BMvTbl.GetVector(0);
			vec.x = vec.x * 70 / 100;
			if( vec.x>2000 ) vec.x = 2000;
			BMvTbl.SetVector( { x=vec.x, addx=0, addy=190, flags=_Vector_Normal } );
				
			BMvTbl.SetMoveableFlag( { move=1, time=254, flag=_ClearFlag_ChangeMv } ); // Mv中行動可能にする
			BMvTbl.SetAsFlag( { as_flags=_AsFlag_GuardRev, time=254, flag=_ClearFlag_ChangeMv } ); // 行動可能だけどガード不能にする
			BMvTbl.SetCommandLongDelay(1); //受付時間増加（先行入力用）
		}
		
		//着地
		if( mvs.isLanding )
		{
			BMvEff.PcAfterImage_Clear(); //残像の消去
			BMvTbl.SetMoveableFlag( { move=0, time=def_FL_Assault_LandRecovery, flag=_ClearFlag_ChangeMv } );
		}
	}
	function LastUpdate_After()
	{
		BMvEff.PcAfterImage_Clear(); //残像の消去
	}	
}	

	
//-----------------------------------------------------------------------------
// 二段ジャンプ
//-----------------------------------------------------------------------------

t.Mv_MultiJump_F <- 
{
	function Init_After()
	{
		BMvTbl.SetMuki(_Direction_Auto );		
	}
}
t.Mv_MultiJump_N <- 
{
	function Init_After()
	{
		BMvTbl.SetMuki(_Direction_Auto );		
	}
}
t.Mv_MultiJump_B <- 
{
	function Init_After()
	{
		BMvTbl.SetMuki(_Direction_Auto );		
	}
}

//-----------------------------------------------------------------------------
// リンネの下僕管理
//-----------------------------------------------------------------------------
t.Mv_Geboku <-
{
	function Init()
	{
		BMvTbl.SetPattern("Geboku");
		BMvEff.SetObjectFlags( { flags=_ObjFlags_NoGround|_ObjFlags_NoRenderBlackOut } );
		
		BMvTbl.SetLP(0,0); //状態初期化
		BMvTbl.SetLP(1,0); //音声カウンタ初期化
		BMvTbl.SetLP(2,0); //Mvカウンタ
		//LP0 : 音声管理用状態 0:通常　10:ラウンド勝利 15:勝利 20:ラウンド敗北 25:敗北
	}
	function FrameUpdate()
	{
		local s = BMvTbl.GetMvStatus(); // ステータス取得
		//local bs = BtlMvStd.GetBoundStatus(); //バウンドステータス
		
		local mode = BMvTbl.GetLP(0); //現状のクーの音声分岐用モード
		local cnt = BMvTbl.GetLP(1); //モードになってからどんだけたったか
		local mvcnt = BMvTbl.GetLP(2); //カウンタ取得
		BMvTbl.AddLP(2,1); //1F進める		
		
		
		//_dm(" mode:"+mode+" cnt:"+cnt);		
		
		//操作親の座標に向かって動く
		local p = BMvCore.GetPlayerCharaData(); // 相手情報取得
		if( p.IsDone ) // 有効かどうか一応チェック
		{
			//親の情報を取得
			BMvCore.PushCharaData( p ); //
				local pos = BMvTbl.GetPosition(0); //操作親の座標を取得
				local oya_is_migi = (BMvTbl.GetMuki()==1); //親が右向きかどうか。オフセット座標用
				local oya_muki = BMvTbl.GetMuki();
			BMvCore.PopCharaData(); //	

			//つかまれ中だったらつかまれ中のを親にしないといけないらしい
			local enemy = BMvCore.GetNearEnemyCharaData(); // 敵情報を得る
			if( enemy.IsDone )
			{
				BMvCore.PushCharaData( enemy ); // 
					local cp = BMvCore.GetCaptureCharaData(); //FU中だからちょっと判定があいまいかも
				BMvCore.PopCharaData(); // 
				
				//有効だったら＝つかまれ中だったら
				if( cp.IsDone )
				{
					BMvCore.PushCharaData( cp ); //
						pos = BMvTbl.GetPosition(0); //操作親の座標を取得
						oya_is_migi = (BMvTbl.GetMuki()==1); //親が右向きかどうか。オフセット座標用
						oya_muki = BMvTbl.GetMuki();
					BMvCore.PopCharaData(); //				
					//print("!");
				}
			}
			

			local offx = -100*128*oya_muki;
			local offy = -300*128;			
			//BMvTbl.SetMuki( _Direction_Auto );
			
			//posにリンネの座標があるが、高すぎるyとかは補正をかけよう
			//_dm(format("x:%d , y:%d",pos.x, pos.y));
			if( pos.y <= -20000 ) pos.y=-20000 + ((pos.y+20000)*25/100); //あんまおっかけない
			
			
			pos.x += offx;
			pos.y += offy;
			
			
			//
			local movetime = 45; //座標までの移動時間
			
			//KOになってからの待機状態
			if( mode==25 || mode==26 )
			{
				pos.x = -(def_POS_GamenHajiX+(def_POS_GamenGaiYuuyoX*2))*oya_muki;
				pos.y = -45000;
				movetime = 100;
				
				local posst = BMvEff.GetPointStatus( { position=pos } ); // 位置情報取得
				local v = BMvEff.GetVector_FromAngle( { angle = posst.angle, speed = 1250 } );
				BMvTbl.SetVector( { x=v.x, y=v.y, flags=_Vector_DivKeep|_VecFlag_NoMuki } );								
			}
			else
			{
				local posst = BMvEff.GetPointStatus( { position=pos } ); // 位置情報取得
				
				//local angle_deg = posst.angle * 180; // 360度にしてみる（0.0-2.0 なのでx180で変換）
				//print( format( "角度：%f  距離：%d", angle_deg, posst.distance ) );
				
				local v = BMvEff.GetVector_FromAngle( { angle = posst.angle, speed = posst.distance/movetime } );
				BMvTbl.SetVector( { x=v.x, y=v.y, flags=_Vector_DivKeep|_VecFlag_NoMuki } );				
			}
			
		}

		//print("\nvec:"+vec.x);
		
		//アニメパターン別でやる行動
		switch( Battle_Std.GetUpdateFrameID( s ) )
		{
		//待機
		case 1:
		case 2:
		case 3:
		case 4:
			if( BMvTbl.CheckFurimuki()==1 )
			{
				BMvTbl.SetMuki( _Direction_Auto ); //向きを変更する
				BMvTbl.JumpFrameID(480);	
			}
			break;
		//前進
		case 101:
		case 102:
		case 103:
		case 104:
			break;
		//後退
		case 111:
		case 112:
		case 113:
		case 114:
			if( BMvTbl.CheckFurimuki()==1 )
			{
				BMvTbl.SetMuki( _Direction_Auto ); //向きを変更する
				BMvTbl.JumpFrameID(480);	
			}
			break;
		//振り向き
		case 480:
			break;
		}
		
		//ベクトルを見てアニメパターンを変更する
		local vec = BMvTbl.GetVector({ flags=_Vector_DivKeep });
		
		if( vec.x > 500 ) //前進
		{
			switch( s.FrameID )
			{
			case 1:
			case 111:
				BMvTbl.JumpFrameID(100);
//					BMvTbl.JumpFrameID(101);
				break;
			case 2:
			case 112:
				BMvTbl.JumpFrameID(100);
//					BMvTbl.JumpFrameID(102);
				break;
			case 3:
			case 113:
				BMvTbl.JumpFrameID(100);
//					BMvTbl.JumpFrameID(103);
				break;
			case 4:
			case 114:
				BMvTbl.JumpFrameID(100);
//					BMvTbl.JumpFrameID(104);
				break;
			}
		}
		else if( vec.x < -500 ) //後退
		{
			switch( s.FrameID )
			{
			case 1:
			case 101:
				BMvTbl.JumpFrameID(111);
				break;
			case 2:
			case 102:
				BMvTbl.JumpFrameID(112);
				break;
			case 3:
			case 103:
				BMvTbl.JumpFrameID(113);
				break;
			case 4:
			case 104:
				BMvTbl.JumpFrameID(114);
				break;
			}
		}
		else if( s.FrameID!=1 ) //待機
		{
			switch( s.FrameID )
			{
			case 101:
			case 111:
				BMvTbl.JumpFrameID(1);
				break;
			case 102:
			case 112:
				BMvTbl.JumpFrameID(2);
				break;
			case 103:
			case 113:
				BMvTbl.JumpFrameID(3);
				break;
			case 104:
			case 114:
				BMvTbl.JumpFrameID(4);
				break;
			}
		}

		/*
		//なりた要望及びツッコミ　7/24
		if( mvcnt%10==0 ) //10Fに１回粉を吐く
		{
			local pos = BMvEff.Random_PointRad( { radx=50, rady=50 } );
			local p = BMvEff.CreateObject( { x=pos.x, y=pos.y, start_pat=985, flags=_Position_ToolShift } );
			BMvCore.PushCharaData( p ); //
				BMvEff.SetObjectFlags( { flags=_ObjFlags_NoGround|_ObjFlags_NoRenderBlackOut } );
			BMvCore.PopCharaData(); //				
		}
		*/
		
		//親の状態を見てmodeをかえる
		/*
		Mv_RoundLose
		Mv_Lose
		Mv_RoundWinPattern
		Mv_WinPattern
		*/

		

		
		

		
		switch( mode )
		{
		case 0: //通常
			local rs = BMvTbl.GetMvRoundStatus();
			/*
			if( mvcnt%360==0 && rs.TimeUpdate ) //会話中とかタイマー動いてない時はしゃべらない
			{
				local rnd = BMvEff.Random_Limit(100);
				if( rnd<10 )
				{
					BSound.SE_Play( { type=_SeType_Player, num=90 } ); //待機音声
				}
			}
			*/
			local p = BMvCore.GetPlayerCharaData(); // 敵情報を得る
			if( p.IsDone )
			{
				BMvCore.PushCharaData( p ); //
					local mvname = BMvTbl.GetMvName();
				BMvCore.PopCharaData(); //
				switch( mvname )
				{
				case "Mv_RoundWinPattern":
					//_dm("ラウンド勝利");
					BMvTbl.SetLP(0,10);
					break;
				case "Mv_WinPattern":
					//_dm("勝利");
					BMvTbl.SetLP(0,15);
					break;
				case "Mv_RoundLose":
					//_dm("ラウンド敗北");
					BMvTbl.SetLP(0,20);
					break;
				case "Mv_Lose":
					//_dm("敗北");
					BMvTbl.SetLP(0,25);
					break;
				case "Mv_TimeupLose":
					//_dm("タイムアップ敗北");
					BMvTbl.SetLP(0,20);
					break;
				}
			}
		
			break;
		case 10: //ラウンド勝利の瞬間
			BMvTbl.AddLP(1,1); //1F進める
			if( BMvTbl.GetLP(1)>60 )
			{
				BMvTbl.AddLP(0,1); //ズラし
				BMvTbl.AddLP(1,0); //初期化
				//BSound.SE_Play( { type=_SeType_Player, num=91 } ); //勝利
			}
			break;
		case 15: //勝利の瞬間
			BMvTbl.AddLP(1,1); //1F進める
			if( BMvTbl.GetLP(1)>60 )
			{
				BMvTbl.AddLP(0,1); //ズラし
				BMvTbl.AddLP(1,0); //初期化
				//BSound.SE_Play( { type=_SeType_Player, num=94 } ); //くっくー
			}
			break;
		case 20: //ラウンド敗北の瞬間
			BMvTbl.AddLP(1,1); //1F進める
			if( BMvTbl.GetLP(1)>60 )
			{
				BMvTbl.AddLP(0,1); //ズラし
				BMvTbl.AddLP(1,0); //初期化
				//BSound.SE_Play( { type=_SeType_Player, num=92 } ); //いかり
			}
			break;
		case 25: //敗北の瞬間
			BMvTbl.AddLP(1,1); //1F進める
			if( BMvTbl.GetLP(1)>60 )
			{
				BMvTbl.AddLP(0,1); //ズラし
				BMvTbl.AddLP(1,0); //初期化
				//BSound.SE_Play( { type=_SeType_Player, num=93 } ); //あいしゅう
			}
			break;
		}
		
	}
	function Finalize()
	{
		//消えたらまずいんだけど一応
		BMvTbl.SetDeleteMoveTable();
	}	
}


//-----------------------------------------------------------------------------
// インフィニットワース
//-----------------------------------------------------------------------------

t.Mv_Skill_41236SP <- 
{
	function Init_After()
	{
		BMvTbl.SetNoHoseiFlag( {  val=1, time=254, flag=_ClearFlag_ChangeMv } ); // ONCE補正
	}
	function FrameUpdate_After()
	{
		switch( Battle_Std.GetUpdateFrameID() )
		{
		case 500:
			//ボカーンエフェクト呼び
			//自分の座標+485が画面外なら修正
			local len = Battle_Std.GetGamenHajiDistance({flags=_Position_ToolShift});
			//_dm("距離？"+len);
			local eff_x = 485;
			if( eff_x>len) 
			{
				local sa = eff_x - len;
				eff_x = eff_x - sa;
			}
			//_dm("結果："+eff_x)
			//Battle_Std.CreateObjectEX( { x=eff_x, y=0, pat="SPBomb", flags=_Position_ToolShift, } );
			BMvEff.CreateObject( { x=eff_x, y=0, mvname="Mv_Obj_SPBomb", flags=_Position_ToolShift } );
			
			Battle_Std.CreateObjectEX( { x=0, y=0, pat="IW_AtkRect1", flags=_Position_ToolShift, mvname="Mv_Obj_IW_AtkRect1",
			objectflags=_ObjFlags_EraseParentPatChange|_ObjFlags_ParentMove } );
			break;
		}
	}
	function HitInterrupt_After()
	{
		if( Battle_Std.CheckDamageTiming() )
		{
			Battle_Std.SetPosition_DamageHanteiRect( { power=40 } );
		}
	}
}

t.Mv_Obj_SPBomb <-
{
	function FrameUpdate_After()
	{
		local s = BMvTbl.GetMvStatus();
		//操作親ののけぞりで終了
		if( Battle_Std.CheckPlayerisDamage() )
		{
			BMvTbl.SetFinalize(0);
			return; //先にも進めない
		}
		
		switch( Battle_Std.GetUpdateFrameID() )
		{
		case 20: //判定呼び
			local eff = Battle_Std.CreateObjectEX( { x=0, y=0, flags=_Position_ToolShift, mvname="Mv_Obj_IW_AtkRect2",
			objectflags=_ObjFlags_EraseParentPatChange  } );
			break;
		case 100: //ループ抜け(1F後にPatも変わって呼び出したオブジェクトも消える)
			break;
		}
	}
	function Finalize()
	{
		BMvEff.CreateObject( { x=0, y=0, mvname="Mv_Obj_SPBombEnd", flags=_Position_ToolShift } );
		BMvTbl.SetNextMoveTable( "..." );
	}
}

t.Mv_Obj_SPBombEnd <-
{
}

t.Mv_Obj_IW_AtkRect1 <-
{
}
t.Mv_Obj_IW_AtkRect2 <-
{
	function Init_After()
	{
		// 各種補正は最初の１ヒットのみ
		BMvTbl.SetNoHoseiFlag( {  val=1, time=254, flag=_ClearFlag_ChangePattern|_ClearFlag_ChangeMv } );
	}
}

//-----------------------------------------------------------------------------
// ２３６攻
//-----------------------------------------------------------------------------

local maketmpl_SkillFireBall = function( param={} )
{
	local ret_tmpl = {};
	
	local mvparam =
	{
		ball_st = {},
		i_ball_st = {},
		i_ball_st_2 = {},
		i_ball_st_2_hit = {},
		hold = { isdone=0, button=0, jumpid=0, checkid=0, endid=0 },
	}
	
	switch( param.type )
	{
	case "A":
		mvparam.ball_st = { x=0, y=-200, mv="Mv_FireBall_236A", pat = "236FireBall", ball=1,
		vec = Battle_Std.GetVector_FromAngle( { angle=2500, speed=8500, frame=20, flags=_Vector_Div } ) };
		break;
	case "B":
		mvparam.hold.isdone = 1;
		mvparam.hold.button = (1<<1);
		mvparam.hold.checkid = 50;
		mvparam.hold.endid = 60;
		mvparam.hold.jumpid = 100;
		mvparam.ball_st = { x=0, y=-200, mv="Mv_FireBall_236B", pat = "236FireBall", ball=1,
		vec = Battle_Std.GetVector_FromAngle( { angle=2500, speed=10000, frame=20, flags=_Vector_Div } ) };
		// 181108 根元まで判定つけて画面外に出なくする処理消したので出現位置調整
		// mvparam.i_ball_st = { x=680, y=-175, mv="Mv_FireBall_236B", pat = "i236BFireBall1", ball=1, };
		// mvparam.i_ball_st_2 = { x=680, y=-175, mv="Mv_FireBall_236B", pat = "i236BFireBall2", ball=1, };
		mvparam.i_ball_st = { x=80, y=-175, mv="Mv_FireBall_i236B", pat = "i236BFireBall1", ball=1, };
		mvparam.i_ball_st_2 = { x=80, y=-175, mv="Mv_FireBall_i236B_2", pat = "i236BFireBall2", ball=1, };
		mvparam.i_ball_st_2_hit = { x=80, y=-175, mv="Mv_FireBall_i236B_2", pat = "i236BFireBall2_hit", ball=1, };
		break;
	case "C":
		mvparam.ball_st = { x=0, y=-200, mv="Mv_FireBall_236B", pat = "236FireBall", ball=1,
		vec = Battle_Std.GetVector_FromAngle( { angle=2500, speed=12000, frame=20, flags=_Vector_Div } ) };
		break;
	case "EX":
		mvparam.ball_st = { x=-50, y=-200, mv="Mv_FireBall_236EX", pat = "236EXFireBall", ball=2,
		vec = Battle_Std.GetVector_FromAngle( { angle=2500, speed=7500, frame=20, flags=_Vector_Div } ) };
		break;
	}

	ret_tmpl.Init_After <- function()
	{
		Battle_Std.MoveCodeEx.AddFlag( 6, def_MC6_EnableCansel_AddCommand );
	}
	
	ret_tmpl.FrameUpdate_After <- function() : (mvparam)
	{
		if( mvparam.hold.isdone )
		{
			Battle_Std.JumpFrameID_NotHoldButton({ mask=mvparam.hold.button, checkid=mvparam.hold.checkid, jumpid=mvparam.hold.jumpid, endid=mvparam.hold.endid }); //ボタンホールドしてなかったらIDジャンプ
		}
		switch( Battle_Std.GetUpdateFrameID() )
		{
		case 100:
			Battle_Std.CreateFireBall( mvparam.ball_st );
			break;
		case 210: // タメ
			local eff = Battle_Std.CreateFireBall( mvparam.i_ball_st );
			break;
		case 220: // タメ
			local hs = BMvTbl.GetMvHitStatus();
			if( hs.Type&_HitType_Hit )
			{
				local eff = Battle_Std.CreateFireBall( mvparam.i_ball_st_2_hit );
			}
			else
			{
				local eff = Battle_Std.CreateFireBall( mvparam.i_ball_st_2 );
			}
		}
	}	
	
	return ret_tmpl;
}

t.Mv_Skill_236A <- maketmpl_SkillFireBall( { type="A" } );
t.Mv_Skill_236B <- maketmpl_SkillFireBall( { type="B" } );
t.Mv_Skill_236EX <- maketmpl_SkillFireBall( { type="EX" } );

t.Mv_FireBall_236A <-
{
	function Init_After()
	{
		// 各種補正は最初の１ヒットのみ
		BMvTbl.SetNoHoseiFlag( {  val=1, time=254, flag=_ClearFlag_ChangePattern|_ClearFlag_ChangeMv } );
	}
	function FrameUpdate_After()
	{
		local s = BMvTbl.GetMvStatus(); // ステータス取得

		if( s.FrameID==1 && s.MvCount%2==0 && s.MvCount>2 && s.CallCount==0 )
		{
			local eff = BMvEff.CreateObject( { x=0, y=0, start_pat="Zan310", flags=_Position_ToolShift } );
			local vec = BMvTbl.GetVector( { flags=_Vector_Div } );
			if( eff.push() )
			{
				local usevec = 
				{
					x = vec.x/3,
					y = vec.y/3,
					addx = vec.addx/3,
					addy = vec.addy/3,
				}
				BMvTbl.SetVector( { x=usevec.x, addx=-usevec.x/6, y=usevec.y, addy=-usevec.y/6, flags=_Vector_Div } );
				
				eff.pop();
			}
		}
	}
}

t.Mv_FireBall_236A_Sousai <-
{
	function Init_After()
	{
		BMvTbl.JumpFrameID(900); //相殺の絵に飛ぶ
	}
}

t.Mv_FireBall_236B <- t.Mv_FireBall_236A;
t.Mv_FireBall_236B_Sousai <- t.Mv_FireBall_236A_Sousai;

t.Mv_FireBall_236EX <-
{
	function Init_After()
	{
		// 各種補正は最初の１ヒットのみ
		BMvTbl.SetNoHoseiFlag( {  val=1, time=254, flag=_ClearFlag_ChangePattern|_ClearFlag_ChangeMv } );
	}
	function FrameUpdate_After()
	{
		local s = BMvTbl.GetMvStatus(); // ステータス取得
		if( s.FrameID==1 && s.MvCount%2==0 && s.MvCount>2 && s.CallCount==0 )
		{
			BMvEff.CreateObject( { x=0, y=0, start_pat="Zan310ex", flags=_Position_ToolShift } );
		}
	}
}


t.Mv_FireBall_236EX_Sousai <-
{
	function Init_After()
	{
		BMvTbl.JumpFrameID(900); //相殺の絵に飛ぶ
	}
}

t.Mv_FireBall_i236B <-
{
	function Init_After()
	{
		// 各種補正は最初の１ヒットのみ
		BMvTbl.SetNoHoseiFlag( {  val=1, time=254, flag=_ClearFlag_ChangePattern|_ClearFlag_ChangeMv } );
	}
}

t.Mv_FireBall_i236B_Sousai <-
{
	function Init_After()
	{
		BMvTbl.JumpFrameID(900); //相殺の絵に飛ぶ
	}	
}

t.Mv_FireBall_i236B_2 <- t.Mv_FireBall_i236B;

t.Mv_FireBall_i236B_2_Sousai <- t.Mv_FireBall_i236B_Sousai;

//-----------------------------------------------------------------------------
// Ｊ２３６攻
//-----------------------------------------------------------------------------

local maketmpl_SkillAirFireBall = function( param={} )
{
	local ret_tmpl = {};
	
	local mvparam =
	{
		ball_st = {},
		i_ball_st = {},
		i_ball_st_2 = {},
		hold = { isdone=0, button=0, jumpid=0, checkid=0, endid=0 },
	}
	
	switch( param.type )
	{
	case "A":
		mvparam.ball_st = { x=0, y=-200, mv="Mv_FireBall_J236A", pat = "J236FireBall", ball=3, angle=(2500+1050), 
		vec = Battle_Std.GetVector_FromAngle( { angle=(2500+1050), speed=8500, frame=20, flags=_Vector_Div } ) };
		break;
	case "B":
		mvparam.hold.isdone = 1;
		mvparam.hold.button = (1<<1);
		mvparam.hold.checkid = 50;
		mvparam.hold.endid = 60;
		mvparam.hold.jumpid = 70;
		mvparam.ball_st = { x=0, y=-200, mv="Mv_FireBall_J236B", pat = "J236FireBall", ball=3, angle=(2500+550),
		vec = Battle_Std.GetVector_FromAngle( { angle=(2500+550), speed=10000, frame=20, flags=_Vector_Div } ) };
		
		mvparam.i_ball_st = { x=-20, y=-95, mv="Mv_FireBall_iJ236B", pat = "iJ236BFireBall1", ball=3, };
		mvparam.i_ball_st_2 = { x=-50, y=-90, mv="Mv_FireBall_iJ236B_2", pat = "iJ236BFireBall2", ball=3, };
		break;
	case "EX":
		mvparam.ball_st = { x=0, y=-200, mv="Mv_FireBall_J236EX", pat = "J236EXFireBall_2", ball=4,
		vec = Battle_Std.GetVector_FromAngle( { angle=(2500+750), speed=8500, frame=20, flags=_Vector_Div } ) };
		break;
	}

	ret_tmpl.Init_After <- function()
	{
		Battle_Std.MoveCodeEx.AddFlag( 6, def_MC6_EnableCansel_AddCommand );
	}
	
	ret_tmpl.FrameUpdate_After <- function() : (mvparam)
	{
		if( mvparam.hold.isdone )
		{
			Battle_Std.JumpFrameID_NotHoldButton({ mask=mvparam.hold.button, checkid=mvparam.hold.checkid, jumpid=mvparam.hold.jumpid, endid=mvparam.hold.endid }); //ボタンホールドしてなかったらIDジャンプ
		}
		switch( Battle_Std.GetUpdateFrameID() )
		{
		case 100:
			Battle_Std.CreateFireBall( mvparam.ball_st );
			break;
		case 210: // タメ
			local eff = Battle_Std.CreateFireBall( mvparam.i_ball_st );
			break;
		case 220: // タメ
			local eff = Battle_Std.CreateFireBall( mvparam.i_ball_st_2 );
			break;
		}
	}	
	
	return ret_tmpl;
}

t.Mv_Skill_J236A <- maketmpl_SkillAirFireBall( { type="A" } );
t.Mv_Skill_J236B <- maketmpl_SkillAirFireBall( { type="B" } );
t.Mv_Skill_J236EX <- maketmpl_SkillAirFireBall( { type="EX" } );


t.Mv_FireBall_J236A <-
{
	function Init_After()
	{
		// 各種補正は最初の１ヒットのみ
		BMvTbl.SetNoHoseiFlag( {  val=1, time=254, flag=_ClearFlag_ChangePattern|_ClearFlag_ChangeMv } );
	}
	function FrameUpdate_After()
	{
		local s = BMvTbl.GetMvStatus(); // ステータス取得
		if( s.FrameID==1 && s.MvCount%2==0 && s.MvCount>2 && s.CallCount==0 )
		{
			local eff = BMvEff.CreateObject( { x=0, y=0, start_pat="Zan320", flags=_Position_ToolShift } );
			local vec = BMvTbl.GetVector( { flags=_Vector_Div } );
			local oya_angle = BMvTbl.GetAngle();
			if( eff.push() )
			{
				local usevec = 
				{
					x = vec.x/3,
					y = vec.y/3,
					addx = vec.addx/3,
					addy = vec.addy/3,
				}
				BMvTbl.SetVector( { x=usevec.x, addx=-usevec.x/6, y=usevec.y, addy=-usevec.y/6, flags=_Vector_Div } );
				BMvTbl.SetAngle( { angle=oya_angle } );
				BMvEff.SetObjectFlags( { flags=_ObjFlags_NoGround } );
				
				eff.pop();
			}
		}
	}	
}

t.Mv_FireBall_J236A_Sousai <-
{
	function Init_After()
	{
		BMvTbl.JumpFrameID(900); //相殺の絵に飛ぶ
	}	
}

t.Mv_FireBall_J236B <- t.Mv_FireBall_J236A;
t.Mv_FireBall_J236B_Sousai <- t.Mv_FireBall_J236A_Sousai;

t.Mv_FireBall_J236EX <-
{
	function Init_After()
	{
		// 各種補正は最初の１ヒットのみ
		BMvTbl.SetNoHoseiFlag( {  val=1, time=254, flag=_ClearFlag_ChangePattern|_ClearFlag_ChangeMv } );
	}
	function FrameUpdate_After()
	{
		local s = BMvTbl.GetMvStatus(); // ステータス取得
		if( s.FrameID==1 && s.MvCount%2==0 && s.MvCount>2 && s.CallCount==0 )
		{
			local eff = BMvEff.CreateObject( { x=0, y=0, start_pat="Zan320ex", flags=_Position_ToolShift } );
			if( eff.push() )
			{
				BMvEff.SetObjectFlags( { flags=_ObjFlags_NoGround } );
				
				eff.pop();
			}
		}
	}	
}

t.Mv_FireBall_J236EX_Sousai <-
{
	function Init_After()
	{
		BMvTbl.JumpFrameID(900); //相殺の絵に飛ぶ
	}	
}

t.Mv_FireBall_iJ236B <-
{
	function Init_After()
	{
		// 各種補正は最初の１ヒットのみ
		BMvTbl.SetNoHoseiFlag( {  val=1, time=254, flag=_ClearFlag_ChangePattern|_ClearFlag_ChangeMv } );
	}
}

t.Mv_FireBall_iJ236B_Sousai <-
{
	function Init_After()
	{
		BMvTbl.JumpFrameID(900); //相殺の絵に飛ぶ
	}	
}

t.Mv_FireBall_iJ236B_2 <- t.Mv_FireBall_iJ236B;

t.Mv_FireBall_iJ236B_2_Sousai <- t.Mv_FireBall_iJ236B_Sousai;

//-----------------------------------------------------------------------------
// ２１４攻
//-----------------------------------------------------------------------------

local maketmpl_SkillContinuousSlashAtk = function( param={} )
{
	local ret_tmpl = {};
	
	local mvparam =
	{
		half_lock = 0,
		hit_pat = 0,
		enable_add = 0,
		hit_mv = 0,
	}
	
	switch( param.type )
	{
	case "A":
		mvparam.enable_add = 1;
		break;
	case "B":
		mvparam.enable_add = 1;
		break;
	case "EX":
		mvparam.half_lock = 1;
		mvparam.hit_mv = "Mv_Skill_214EX_Hit";
		break;
	}

	ret_tmpl.Init_After <- function() : (mvparam)
	{
		if( mvparam.enable_add )
		{
			Battle_Std.MoveCodeEx.AddFlag( 6, def_MC6_EnableCansel_AddCommand );
		}
		
		if( mvparam.half_lock )
		{
			Battle_Std.MoveCodeEx.AddFlag( 7, def_MC7_SetMutekiDamage );
		}
		
		BMvTbl.SetLP(0,0);//ヒットID記憶
	}
	
	ret_tmpl.FrameUpdate_After <- function() : (mvparam)
	{
	}
	
	ret_tmpl.HitInterrupt_After <- function() : (mvparam)
	{
		if( mvparam.half_lock )
		{
			if( Battle_Std.CheckDamageTiming() )
			{
				Battle_Std.SetPosition_DamageHanteiRect( { power=100 } );
			}
		}
		if( mvparam.hit_mv )
		{
			local hit = Battle_Std.SetThrowHitFinalize(256); // ヒット分岐ファイナライズ
			if( hit )
			{
				local mvs = BMvTbl.GetMvStatus();
				BMvTbl.SetLP(0, mvs.FrameID ); // ヒットしたID
			}
		}
	}
	if( mvparam.hit_mv )
	{
		ret_tmpl.Finalize <- function() : (mvparam)
		{
			Battle_Std.SwitchNextMoveTable("Mv_Neutral",[256,mvparam.hit_mv]); //デフォ,[code,mv]...
		}
	}
	
	return ret_tmpl;
}

t.Mv_Skill_214A <- maketmpl_SkillContinuousSlashAtk( { type="A" } );
t.Mv_Skill_214B <- maketmpl_SkillContinuousSlashAtk( { type="B" } );
t.Mv_Skill_214EX <- maketmpl_SkillContinuousSlashAtk( { type="EX" } );

t.Mv_Skill_214EX_Hit <-
{
	flags = def_TmplFlags_NoAddComboRate // コンボレートを加算しない
	function Init_After()
	{
		Battle_Std.MoveCodeEx.AddFlag( 7, def_MC7_SetMutekiDamage );
		
		local hit_id = BMvTbl.GetLP(0); // ロック判定あたったときのFrameIDを取得
		local jump_id_tbl = { [100]=101, [140]=141 }; // 飛び先定義
		if( hit_id in jump_id_tbl )
		{
			_dpn("飛び先:"+jump_id_tbl[hit_id]);
			BMvTbl.JumpFrameID( jump_id_tbl[hit_id] );
		}
		
		//保険処理（判定側で開放自体はしている）
		BMvEff.ThrowParam( { pattern=320, x=200, y=0, } );
		BMvEff.ThrowRelease( { type="追撃ダウン", airrecover=0, flags=0 } ); //開放のみ
	}
	function FrameUpdate_After()
	{
	}
	function HitInterrupt_After()
	{
		if( Battle_Std.CheckDamageTiming() )
		{
			Battle_Std.SetPosition_DamageHanteiRect({ power=100, });
		}
	}
}

t.Mv_Skill_214_AddA <-
{
	flags = def_TmplFlags_NoFurimuki //振り向きを行わない
	function Init_After()
	{
		Battle_Std.MoveCode.AddFlag( def_MC_EnableCansel_SkilltoAtk );
	}
}

t.Mv_Skill_214_AddB <-
{
	flags = def_TmplFlags_NoFurimuki //振り向きを行わない
	function Init_After()
	{
		Battle_Std.MoveCode.AddFlag( def_MC_EnableCansel_SkilltoAtk );
	}
}

t.Mv_Skill_214_AddC <-
{
	flags = def_TmplFlags_NoFurimuki //振り向きを行わない
	function Init_After()
	{
		Battle_Std.MoveCode.AddFlag( def_MC_EnableCansel_SkilltoAtk );
	}
	function HitInterrupt_After()
	{
		// 最終段ヒット時に相手が後ろにいた場合位置補正をかける
		if( Battle_Std.CheckDamageTiming_FrameID( 400 ) )
		{
			local kyori = Battle_Std.GetEnemyDistance();
			if( kyori < 0 )
			{
				Battle_Std.SetPosition_DamageHanteiRect( { power=100, flags=(1<<1) } );
			}
		}
	}
}

//-----------------------------------------------------------------------------
// ６３２１４攻
//-----------------------------------------------------------------------------

local maketmpl_SkillJumpingSlashDown = function( param={} )
{
	local ret_tmpl = {};
	
	local mvparam =
	{
		ball_muteki = 0,
		leg_muteki = 0,
		fold_faint = 0,
		nohosei = 0,
		csAntenHosei = 0,
		
		xSeachJump = 0,
	}
	
	switch( param.type )
	{
	case "A":
		mvparam.leg_muteki = 1;
		mvparam.nohosei = 1;
		break;
	case "B":
		mvparam.leg_muteki = 1;
		mvparam.fold_faint = (1<<1);
		mvparam.nohosei = 1;
		break;
	case "EX":
		mvparam.leg_muteki = 1;
		mvparam.ball_muteki = 1;
		mvparam.csAntenHosei = 1;
		mvparam.xSeachJump = { seachDistance=1400*128, max_frame=14, vec={ addy=300, x=3400}, flags=(1<<0) };
		break;
	}
	
	ret_tmpl.Init_After <- function() : (mvparam)
	{
		if( mvparam.nohosei )
		{
			// 各種補正は最初の１ヒットのみ
			BMvTbl.SetNoHoseiFlag( {  val=1, time=254, flag=_ClearFlag_ChangePattern|_ClearFlag_ChangeMv } );
		}
	}
	
	ret_tmpl.FrameUpdate_After <- function() : (mvparam)
	{
		if( mvparam.ball_muteki && mvparam.leg_muteki )
		{
			// 複数登録する用
			Battle_Std.SetHitMutekiParam1( { [40]=_HitCheckFlag_Legs|_HitCheckFlag_FireBall, [8]=_HitCheckFlag_FireBall, [32]=_HitCheckFlag_Legs } );
		}	
		else if( mvparam.ball_muteki )
		{
			Battle_Std.SetHitMuteki( 1, 8, _HitCheckFlag_FireBall ); // Param1 & 8 の時、弾無敵
		}
		else if( mvparam.leg_muteki )
		{
			Battle_Std.SetHitMuteki( 1, 32, _HitCheckFlag_Legs ); // Param1 & 32 の時、足無敵
		}
		
		switch( Battle_Std.GetUpdateFrameID() )
		{
		case 50:
			if( mvparam.fold_faint )
			{
				// Bボタンをホールドしてたら移行
				//NotHold的な処理
				if( BMvTbl.CheckButtonHold( mvparam.fold_faint ) )
				{
					// 残像だ、へ
					local vec = BMvTbl.GetVector(0);
					local eff = BMvEff.CreateObject( { start_pat="63214B_dummy" } );
					if( eff.push() )
					{
						BMvTbl.SetVector( { x=vec.x, addx=vec.addx, y=vec.y, addy=vec.addy } );
						BMvEff.SetObjectFlags( { flags=_ObjFlags_NoGround } );
						eff.pop();
					}
					BMvTbl.SetPattern( "63214B_Faint" );
					Battle_Std.MoveCodeEx.AddFlag( 1, def_MC1_ExtendAction );
				}
			}
			break;
		case 100: // ジャンプするところ
			if( mvparam.xSeachJump )
			{
				Battle_Std.SetVector_SeachJump( mvparam.xSeachJump );
			}
			break;
		}
	}
	
	ret_tmpl.HitInterrupt_After <- function()
	{
		if( Battle_Std.CheckDamageTiming_FrameID(80) )
		{
			// フェイントZの移動のところ
			local eff = BMvEff.CreateObject( { start_pat="eff624fz", x=20, y=0, flags=_Position_ToolShift } );
			if( eff.push() )
			{
				BMvEff.SetObjectFlags( { flags=_ObjFlags_NoGround|_ObjFlags_EraseParentPatChange|_ObjFlags_ParentMove|_ObjFlags_FromParentStop } );
				
				eff.pop();
			}			
		}
	}
	
	ret_tmpl.LastUpdate_After <- function() : (mvparam)
	{
		if( mvparam.csAntenHosei )
		{
			Battle_Std.CSAntenGaesi_DamageHosei(); // CSからの暗転返しで出したら補正をかける
		}
	}
	
	return ret_tmpl;
}


t.Mv_Skill_63214A <- maketmpl_SkillJumpingSlashDown( { type="A" } );
t.Mv_Skill_63214B <- maketmpl_SkillJumpingSlashDown( { type="B" } );
t.Mv_Skill_63214EX <- maketmpl_SkillJumpingSlashDown( { type="EX" } );

//-----------------------------------------------------------------------------
// ６２３攻
//-----------------------------------------------------------------------------


t.Mv_Skill_623A <-
{
	function Init_After()
	{
	}
	function FrameUpdate_After()
	{
		Battle_Std.SetHitMuteki2_Param1( { [8]=_HitCheckFlag_Head, [64]=Def_HitCheckFlag_AirDive } );
		
		// 対空ですり抜けないようにしつつ座標移動
		switch( Battle_Std.GetUpdateFrameID() )
		{
		case 30:
			Battle_Std.AddToolShift_NoSurinuke( 30, (1<<0) );
			break;
		case 40:
			Battle_Std.AddToolShift_NoSurinuke( 40, (1<<0) );
			break;
		}
	}
}

t.Mv_Skill_623B <-
{
	function Init_After()
	{
	}
	function FrameUpdate_After()
	{
		Battle_Std.SetHitMuteki2_Param1( { [8]=_HitCheckFlag_Head, [64]=Def_HitCheckFlag_AirDive } );

		// 対空ですり抜けないようにしつつ座標移動
		switch( Battle_Std.GetUpdateFrameID() )
		{
		case 30:
			Battle_Std.AddToolShift_NoSurinuke( 30, (1<<0) );
			break;
		case 40:
			Battle_Std.AddToolShift_NoSurinuke( 40, (1<<0) );
			break;
		case 45:
			Battle_Std.AddToolShift_NoSurinuke( 40, (1<<0) );
			break;
		}
	}
	function LastUpdate_After()
	{
		Battle_Std.CSAntenGaesi_DamageHosei(); // CSからの暗転返しで出したら補正をかける
	}
}

t.Mv_Skill_623EX <-
{
	function Init_After()
	{
	}
	function FrameUpdate_After()
	{
		// 対空ですり抜けないようにしつつ座標移動
		switch( Battle_Std.GetUpdateFrameID() )
		{
		case 30:
			Battle_Std.AddToolShift_NoSurinuke( 30, (1<<0) );
			break;
		case 40:
			Battle_Std.AddToolShift_NoSurinuke( 40, (1<<0) );
			break;
		case 45:
			Battle_Std.AddToolShift_NoSurinuke( 40, (1<<0) );
			break;
		}
	}
	function HitInterrupt_After()
	{
		if( Battle_Std.CheckDamageTiming() )
		{
			Battle_Std.SetPosition_DamageHanteiRect({ power=50 });
		}
	}
	function LastUpdate_After()
	{
		Battle_Std.CSAntenGaesi_DamageHosei(); // CSからの暗転返しで出したら補正をかける
	}
}

//-----------------------------------------------------------------------------
// Ｊ６３２１４攻
//-----------------------------------------------------------------------------

local maketmpl_SkillJumpingSlammed = function( param={} )
{
	local ret_tmpl = {};
	
	local mvparam =
	{
		xSeachJump = 0,
	}
	
	switch( param.type )
	{
	case "A":
		break;
	case "B":
		mvparam.xSeachJump = { seachDistance=600*128, max_frame=20, vec={ addy=250, x=2000}, flags=(1<<0) };
		break;
	case "EX":
		break;
	}
	
	ret_tmpl.Init_After <- function() : (mvparam)
	{
		BMvTbl.SetHitCheckFlag( { type=1, val=Def_HitCheckFlag_AirDive, time=255, flag=_ClearFlag_ChangeMv } ); // 空突無敵にスカる
	}
		
	ret_tmpl.FrameUpdate_After <- function() : (mvparam)
	{		
		switch( Battle_Std.GetUpdateFrameID() )
		{
		case 100: // ジャンプするところ
			if( mvparam.xSeachJump )
			{
				Battle_Std.SetVector_SeachJump( mvparam.xSeachJump );
			}
			break;
		}
	}
	return ret_tmpl;
}


t.Mv_Skill_J63214A <- maketmpl_SkillJumpingSlammed( { type="A" } );
t.Mv_Skill_J63214B <- maketmpl_SkillJumpingSlammed( { type="B" } );
t.Mv_Skill_J63214EX <- maketmpl_SkillJumpingSlammed( { type="EX" } );



//-----------------------------------------------------------------------------
// インフィニットワースＥＸＳ
//-----------------------------------------------------------------------------

t.Mv_Skill_IWEXIST <- 
{
	flags = def_TmplFlags_NoAddComboRate // コンボレートを加算しない
	function HitInterrupt_After()
	{
		Battle_Std.SetThrowHitFinalize(256); // ヒット分岐ファイナライズ
	}
	function Finalize() // 
	{
		Battle_Std.SwitchNextMoveTable("Mv_Neutral",[256,"Mv_Skill_IWEXIST_Hit"]); //デフォ,[code,mv]...
	}	
}



local aniset1 = 
[
	{ Data = [330,0,4], },
	{ Data = [330,1,4], },
	{ Data = [330,2,4], RelJump = -1 },
];

local aniset2 = 
[
	{ Data = [330,2,6], }, // aniset1で読んでるからダイジョブ
	{ Data = [330,3,6], },
	{ Data = [330,4,6], },
	{ Data = [330,5,7], },
	{ Data = [330,6,8], },
	{ Data = [330,7,255], RelJump = 0 },
];

local aniset3 = 
[
	{ Data = [320,0,4], },
	{ Data = [320,2,255], RelJump = 0 },
];

local aniset_atama = 
[
	{ Data = [306,0,6], Vector = { x=-2000, addx=100, flags=_Vector_Div } },
	{ Data = [306,1,255], },
];

local aniset_hara = 
[
	{ Data = [307,0,6], Vector = { x=-2000, addx=100, flags=_Vector_Div } },
	{ Data = [307,1,255], },
];


//垂直吹き飛び部分
t.Mv_AniSet1 <- Battle_Std.MakeMv.SetCaptureCharaAnime( { animation = aniset1 } );

//落下気味のところ
t.Mv_AniSet2 <- Battle_Std.MakeMv.SetCaptureCharaAnime( { animation = aniset2 } );

//きられた後
t.Mv_AniSet3 <- Battle_Std.MakeMv.SetCaptureCharaAnime( { animation = aniset3 } );

//地上頭やられ
t.Mv_AniSet_Atama <- Battle_Std.MakeMv.SetCaptureCharaAnime( { animation = aniset_atama } );

//地上腹やられ
t.Mv_AniSet_Hara <- Battle_Std.MakeMv.SetCaptureCharaAnime( { animation = aniset_hara } );


t.Mv_Skill_IWEXIST_Hit <-
{
	flags = def_TmplFlags_NoAddComboRate // コンボレートを加算しない
	function Init_After()
	{
		//Battle_Std.IWEXIST_CallOnePunch(); // 相手をMvBoundにする

		BSound.SE_Play( { type=_SeType_Player, num=523 } );
		
		Battle_Std.InitIWExistSkill();
		//BMvEff.SetCamera_Focus( { zoom=1.0, time=[0,360,30] } ); //カメラ固定
		//BSound.SE_Play( { type=_SeType_Player, num=520 } );

		local p = BMvCore.GetCaptureCharaData();
		if( p.IsDone )
		{
			BMvCore.PushCharaData( p ); //	
				BMvEff.SetObjectFlags( { flags=_ObjFlags_NoRender } ); //隠すテスト
			BMvCore.PopCharaData(); //	
		}

		//BMvEff.ThrowParam( { pattern=320, x=0, y=1024, } ); //埋めて隠す
		 
		BMvEff.ThrowChara_SetJoint( 0 ); //くっつけない
		
		BMvTbl.SetLP(8,0); //音声のカウンタ

		BMvTbl.SetLP(0,0); //子に伝える用の状態
	}
	function FrameUpdate_After()
	{
		local s = BMvTbl.GetMvStatus(); // ステータス取得

		//音声は別扱い
		local sound_time = BMvTbl.GetLP(8);
		BMvTbl.AddLP(8,1);
		if( sound_time==0 )
		{
			//BSound.SE_Play( { type=_SeType_Player, num=523 } );
		}
		else if( sound_time==100 )
		{
			BSound.SE_Play( { type=_SeType_Player, num=525 } );		
		}
		else if( sound_time==240 )
		{
			BSound.SE_Play( { type=_SeType_Player, num=526 } );		
		}
		
		switch( Battle_Std.GetUpdateFrameID( s ) )
		{
		case 20: //走り始め
			//BMvEff.PcAfterImage_Set( {  type=0, range=12, delay=3, color=0x8FFF0000  } );
			break;
		case 50: //きり始め
			//BMvEff.PcAfterImage_Clear(); //残像を消す
			BMvEff.ThrowParam( { pattern=320, x=600, y=0, } );
			//相手に所定位置までベクトルを与える
			local enemy = BMvCore.GetCaptureCharaData();
			if( enemy.push() )
			{
				BMvEff.EraseObjectFlags( { flags=_ObjFlags_NoRender } ); //消していたのを戻す
				BMvTbl.SetVector( { x=7000, flags=_Vector_Normal } );
				
				enemy.pop();
			}
			break;
		case 60: //乱舞部分
			BMvEff.CreateObject( { mvname="Mv_AniSet_Hara" } );
			break;
		case 65: //乱舞部分
			BMvEff.CreateObject( { mvname="Mv_AniSet_Atama" } );
			break;
		case 70: //乱舞部分
			BMvEff.CreateObject( { mvname="Mv_AniSet_Hara" } );
			break;
		case 75: //乱舞部分
			BMvEff.CreateObject( { mvname="Mv_AniSet_Atama" } );
			break;
		case 80: //乱舞部分
			BMvEff.CreateObject( { mvname="Mv_AniSet_Hara" } );
			break;
		case 85: //乱舞部分
			BMvEff.CreateObject( { mvname="Mv_AniSet_Atama" } );
			break;
		case 90: //切り上げ箇所
			BMvEff.CreateObject( { mvname="Mv_AniSet1" } ); //てすと
			break;
		case 95: //切り上げの次の絵
			local p = BMvCore.GetCaptureCharaData();
			if( p.IsDone )
			{
				//_dm("あがれー");
				BMvCore.PushCharaData( p ); //	
					//上昇ベクトルを与える
					BMvTbl.SetVector( { y=-20000 } );
					//BMvTbl.SetPattern(330);
					//BMvTbl.Frame_Proc( 2, _ValSet );						
				BMvCore.PopCharaData(); //	
			}
			BMvEff.SetCamera_Focus( { num=0, time=[0,999,30] } ); //スタート位置を今のカメラにする
			BMvEff.SetCamera_Focus( { num=1, y=-600*128, zoom=1.0, time=[10,999,30], type_in=1 } );				
			
			break;
		case 99: //ここから別パターン
			BMvEff.ResetCamera(); //カメラ初期化
			BMvEff.ResetViewCamera();				
			Battle_Std.CreateObjectEX( { datatype=1, setx=0, sety=-256, mvname="Mv_IE_scl_up", pat="scl_up", flags=_Position_ToolShift,
			objectflags=_ObjFlags_EraseParentPatChange|_ObjFlags_NoCamera, } );
			break;
		case 100: //光になって飛び上がる
			Battle_Std.CreateObjectEX( { datatype=0, setx=0, sety=-640*128, pat="IE_LightningLin",
			objectflags=_ObjFlags_EraseParentPatChange|_ObjFlags_NoGround|_ObjFlags_NoCamera,
			initfunc = function()
			{
				BMvTbl.SetVector( { y=5000 } ); //上から下にズラしてそれっぽく見せる
			}
			} );				
			break;
		case 102: //空が見え始める
			//print("\nそら？");
			BMvTbl.SetLP(0,102); //
			local p = BMvCore.GetCaptureCharaData();
			if( p.IsDone )
			{
				BMvCore.PushCharaData( p ); //	
					BMvEff.EraseObjectFlags( { flags=_ObjFlags_NoRender } ); //消していたのを戻す;
					Battle_Std.InitVector(); //ベクトルかかってたら消す
					BMvTbl.SetVector( { y=5500, addy=-250, flags=_Vector_Div } );
					BMvTbl.SetVector( { y=256, flags=_Vector_DivKeep } );
					//BMvTbl.SetVector( { y=-3600, addy=200, flags=_Vector_Div } );
					//BMvTbl.SetVector( { y=400, flags=_Vector_DivKeep } );
					//BMvTbl.SetPosition( { x=0, y=0 } ); //見た目の画面中央へ
				BMvCore.PopCharaData(); //	
			}
			
			BMvEff.ThrowParam( { x=160, y=-700, } );			
		
			/*
			Battle_Std.CreateObjectEX( { datatype=0, setx=0, sety=-256*128, pat="IWEXS_SkyBack",
			objectflags=_ObjFlags_EraseParentPatChange|_ObjFlags_NoCamera, } );
			*/
			Battle_Std.CreateObjectEX( { datatype=0, setx=0, sety=-256*128, pat="IWEXS_SkyBack",
			objectflags=_ObjFlags_NoCamera,
			objprocflags=_ObjProcFlags_EraseChangeParentMv, //行動変更で消滅
			} );
			
			
			
			Battle_Std.CreateObjectEX( { datatype=0, setx=0, sety=-256*128, pat="IWEXS_UpSky",
			objectflags=_ObjFlags_EraseParentPatChange|_ObjFlags_NoCamera, } );

			BMvEff.SetExist( { level = _Exist_NoCamera } ); //カメラから切り離し				
			break;
		case 105: //上空に出現開始
			BMvTbl.SetPosition( { y=-100*128 } );
			break;
		case 110: //あがりきった
			
			//BSound.SE_Play( { type=_SeType_Player, num=524 } );	
			BMvEff.CreateObject( { mvname="Mv_AniSet2" } ); //てすと
			
			break;
		case 150: //暗転してきるところ
			//中央に戻ろう
			local p = BMvCore.GetCaptureCharaData();
			if( p.IsDone )
			{
				BMvCore.PushCharaData( p ); //	
					Battle_Std.InitVector(); //ベクトルかかってたら消す
				BMvCore.PopCharaData(); //					
			}

			BMvTbl.SetPosition( { x=0, y=0 } );
			BMvEff.ResetCamera(); //カメラ初期化
			BMvEff.ResetViewCamera();
			BMvEff.ThrowParam( { x=0, y=-150, } );

			if( p.IsDone )
			{
				BMvCore.PushCharaData( p ); //	
					BMvEff.EraseObjectFlags( { flags=_ObjFlags_NoRender } ); //消していたのを戻す
					// BMvTbl.SetPattern(330);
					//BMvTbl.Frame_Proc( 7, _ValSet );
				BMvCore.PopCharaData(); //					
			}
			
			//アニメパターンセット


			Battle_Std.CreateObjectEX( { datatype=1, x=0, y=0, pat="LinBlackBack", flags=_Position_ToolShift,
			objectflags=_ObjFlags_EraseParentPatChange|_ObjFlags_NoCamera,
			//objprocflags=_ObjProcFlags_EraseChangeParentMv, //行動変更で消滅
			initfunc = function()
			{
				BMvTbl.SetPosition( { x=0, y=0 } );
			}
			} );
			break;
		case 190: // 暗い画面で切っている演出の残り20F部分
			BMvEff.CreateObject( { mvname="Mv_AniSet3" } ); //きられた絵にする（先に呼んでおくことでキャッシュ回避）
			break;
		case 200: //きった！ おおきいえ開始
			Battle_Std.CreateObjectEX( { datatype=0, setx=0, sety=0*128, pat="IE_BigDummy", mvname="Mv_IE_BigDummy",
			objectflags=_ObjFlags_EraseParentPatChange|_ObjFlags_NoGround|_ObjFlags_NoCamera,
			initfunc = function()
			{
				BMvTbl.SetVector( { y=64 } );
			}
			} );	
			local p = BMvCore.GetCaptureCharaData();
			if( p.IsDone )
			{
				BMvCore.PushCharaData( p ); //	
					//上昇ベクトルを与える
					BMvTbl.SetVector( { y=-64 } );
				BMvCore.PopCharaData(); //	
			}				
			
			/*
			BMvTbl.SetVector( { x=3000, y=9000, addx=-300, flags=_Vector_Div } );
			BMvTbl.SetPosition( { x=-160*128, y=-320*128, flags=_Position_ChangeMuki } );
			//BMvEff.SetObjectFlags( { flags=_ObjFlags_NoGround } );
			*/
			BMvEff.CreateObject( { mvname="Mv_IE_LastMinFire" } ); //相手チリチリ爆発
			
			break;
		case 210: //おおきいえ着地
			
			//BMvEff.SetCamera_Quake( { time=15, type=0, clear=0, } ); //揺らし
			//BMvEff.Slowmotion_Set( { time=30, power=5000 } ); //スロー
			break;
		case 220: //ぼがーん
			BMvTbl.SetLP(0,220); //後ろが光る
			break;
		case 230: //ＫＯ判定よぶ
			Battle_Std.IWExistSkill_FinishEffect(); //KOと同じような揺れやスローを呼ぶ
			break;
		case 250: //手前ホワイトアウト開始
			BMvEff.FadeProc_Set({type=0, time=[90,255,30] color=0xFFFFFF});
			BMvTbl.SetLP(0,250); //ホワイトアウト開始
			break;
		case 300: //終了タイミング・余韻時間はツール依存
			break;
		}
	}
	function Finalize()
	{
		BMvTbl.SetNextMoveTable( "Mv_Skill_IWEXIST_End" );
	}
	function LastUpdate_After()
	{
		//つかみ開放
		//BMvEff.SetCamera_Focus( { zoom=1.0, time=[0,0,30] } ); //カメラ固定
		BMvTbl.SetPosition( { y=0, } );
		BMvEff.SetExist( { level = _Exist_NoCamera, mode=_ExistMode_Erase  } ); //カメラから切り離しを戻す（念のため）
		BMvEff.FadeProc_Set({type=0, time=[0,0,30] color=0xFFFFFF});
		
		
		BMvEff.ThrowParam( { x=100, y=-1024, } );
		BMvEff.ThrowRelease( { type="斜め下バウンド", airrecover=0, flags=_ThrowRelease_NoAttackHit|_ThrowRelease_NoGroundRecover } );
		Battle_Std.FinalizeIWExistSkill();
	}	
}

t.Mv_Skill_IWEXIST_End <- {};

t.Mv_IE_scl_up <-
{
	function Init()
	{
		BMvTbl.SetLP(0,0); //スクロール終了ふらぐ
	}
	function FrameUpdate()
	{
		local p = BMvCore.GetPlayerCharaData(); // 相手情報取得
		if( p.IsDone )
		{
			BMvCore.PushCharaData( p ); //
				local oya_mode = BMvTbl.GetLP(0);
			BMvCore.PopCharaData(); //					
			
			if( oya_mode==102 && BMvTbl.GetLP(0)==0 )
			{
				//print("\n終了ー");
				BMvTbl.SetLP(0,1);
				BMvTbl.JumpFrameID(900);
			}
		}
	}
	function Finalize()
	{
		BMvTbl.SetDeleteMoveTable();
	}
}

t.Mv_IE_LastMinFire <-
{
	function Init()
	{
		BMvTbl.SetPattern("IE_LastMinFire");
		BMvEff.SetObjectFlags( { flags=_ObjFlags_EraseParentPatChange|_ObjFlags_NoGround } );
		BMvTbl.SetLP(0,0); //ばくはつフラグ		
	}
	function FrameUpdate()
	{
		//つかみ中の相手座標に固定する
		local p = BMvCore.GetCaptureCharaData();
		if( p.IsDone )
		{
			BMvCore.PushCharaData( p ); //	
				local pos = BMvTbl.GetPosition(0);
				local rc = BMvEff.GetHanteiRect ( { check=[ _Hantei_Kasanari, 0 ], flags=_HanteiFlag_NoMukiChange | _HanteiFlag_Tool  } );
				if( rc.sx != _Hantei_Error ) // 存在するか
				{
					pos.y += (rc.sy/2)*128; //重なりのまんなかあたりにする
					//_dm(" rc.sy:"+rc.sy);
				}
				else
				{
					pos.y -= (200*128); //いい加減に座標取得
				}
			BMvCore.PopCharaData(); //					
			BMvTbl.SetPosition( pos );
		}
		
		local p = BMvCore.GetPlayerCharaData(); // 相手情報取得
		if( p.IsDone )
		{
			BMvCore.PushCharaData( p ); //
				local oya_mode = BMvTbl.GetLP(0);
			BMvCore.PopCharaData(); //	
					
			if( oya_mode==220 && BMvTbl.GetLP(0)==0 )
			{
				BMvTbl.SetLP(0,1);
				BMvTbl.JumpFrameID(500);
			}
		}		
	}
	function Finalize()
	{
		BMvTbl.SetDeleteMoveTable();
	}
}

t.Mv_IE_BigDummy <-
{
	function Init()
	{
	}
	function FrameUpdate()
	{
		//ホワイトアウトにあわせて黒くなっていく？
		local mode = BMvTbl.GetLP(0);
		local p = BMvCore.GetPlayerCharaData(); // 相手情報取得
		if( p.IsDone ) // 有効かどうか一応チェック
		{
			BMvCore.PushCharaData( p ); //
				local oya_mode = BMvTbl.GetLP(0);
			BMvCore.PopCharaData(); //	
			
			//ホワイトアウト開始
			if( oya_mode==220 && mode!=220 )
			{
				BMvTbl.SetLP(0,220); //モード移行
				//黒くする？
				BMvEff.SetCharaColor( { color = 0x111111, type = 4, intime = 30, time = 255 } );
				//_dm("きてる？");
			}			
			
			//ホワイトアウト開始
			if( oya_mode==250 && mode!=250 )
			{
				BMvTbl.SetLP(0,250); //モード移行
				//黒くする？
				//_dm("きてる2？");
			}
		}
	}
	function Finalize()
	{
		BMvTbl.SetDeleteMoveTable();
	}
}


LIN_MoveTable <- Battle_Std.MakeMoveTable( t, LIN_CommandTable, Def_ChrNo_Lin );
__dofile__("./data/Lin_0/Lin_0_selist.txt"); //ＳＥ定義
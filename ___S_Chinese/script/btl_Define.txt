const Def_Sys_ChrAttackImpactParticle = 1; // キャラ別のアタックインパクトでのパーティクル処理を行う(重めなのでPS3では0)

const Def_Dbg_EXSLimit_EXSkillOki = 0; // EX技で有利をとっての起き攻めにゲージ増加制限をかけるかどうか

// Battle_Std.MakeMv.SetCaptureCharaAnime
// Throw用フラグ
const Def_SCCA_Throw_CheckFrontStage = 1; // Throwで掴む時前方のステージ端にいかないようX座標に補正をかける

//SetCaptureCharaAnime2用の定数
const Def_SCCA_HitVec_InitVec = 1; // HitVecを設定する（設定しないと引継ぎ）
const Def_SCCA_HitVec_AutoMuki = 2; // 敵の方を向き直す

//コマンドテーブル用定数
const Def_SCT_Common = 1; // 全キャラに登録するコマンド（旧"Std_"）

//属性無敵フラグ（こっちで定義したもの）
//BMvTbl.SetHitCheckFlag( { type=1, val=Def_HitCheckFlag_AirDive, time=255, flag=_ClearFlag_ChangeMv } ); // 空突無敵にスカる
// _HitCheckFlag_Head = 1
// _HitCheckFlag_Body = 2
// _HitCheckFlag_Legs = 4
// _HitCheckFlag_FireBall = 8
// _HitCheckFlag_Throw = 16
const Def_HitCheckFlag_AirDive = 64; // 空中突進技につく
const Def_HitCheckFlag_LightLegs = 128; // 下段の弱い攻撃（弱）につく

// COMの挙動定数(発動頻度)
const com_frequency0 = 1;
const com_frequency1 = 10;
const com_frequency2 = 30;
const com_frequency3 = 100;
const com_frequency4 = 300;
const com_frequencyX = 0;//9999; // デバッグ用

// cmdparam用
// どんなコマンドでMvに飛んできたか取得する
const Def_CMDP_StdComboChain = 1; // 立ちスマートステアで飛んできた
const Def_CMDP_AirComboChain = 2; // 空中スマートステアで飛んできた
const Def_CMDP_CroComboChain = 4; // しゃがみスマートステアで飛んできた
const Def_CMDP_ComboChain = 7; // スマートステアで飛んできた
const Def_CMDP_ChrCommand = 8; // キャラ別のコマンド

// Battle_Std.JumpFrameID_NotHoldButton
// Battle_Std.JumpFrameID_NotHoldAllButton
// Battle_Std.JumpFrameID_NoHoldButton_MaskCheckd
const Def_JFIDNHB_NoCheckNgTiming = 1; //
const Def_JFIDNHB_HoldForever = 2; // ずっと押して無いと失敗にする




const Def_Rule_NoDashGuard = 0; //cursed rule




// 調整
const Def_Rule_ForceFunction_UseGRD	= 0; // フォースファンクションでGRDを消費するかどうか

//デバッグ用有効化フラグ
const Def_Dbg_AssaultCansel		= 0; //アサルトキャンセルを実装するかどうか
const Def_Dbg_GuardCancelAssault	= 0; //ＧＣアサルトを実装するかどうか
const Def_Dbg_AssaultAutoVector		= 1; //アサルトを距離によって変化させるかどうか
const Def_Dbg_GuardCancelAttack		= 1; //ガードキャンセルを実装するかどうか 1:通常 2:テスト
const Def_Dbg_ExSkillABButton		= 0; //EX技をA+BにするかCにするか 0:C 1:A+B 
const Def_Dbg_SpSkillVOCSCancel		= 1; //SP技をVO中ならCS条件でキャンセルできるようにするか

const Def_Sys_MoveDownRecover_UseGRD		= 1; // 前後ダウン復帰でのGRDを消費するか　消費量

const Def_Sys_DownRecover_BigKasanari	= 1; // ダウン復帰の重なりをしたにでかいものにするかどうか
const Def_Sys_HajiShield_EnemyNockBack	= 0; // 端背負ったシールド中は相手にガードベクトルを与えるか
const Def_Sys_EXCutinNageMuteki			= 2; // EXカットイン技に強制的に投げ無敵をつけるか 0:付けない 1〜:無敵フレーム
const Def_Sys_ShieldSuccess_MinusVecTime	= 1; // シールド成功時に減らすベクトル時間
const Def_Sys_GuardShield_UseEXS		= 1; // ガードシールド発動にEXSを消費するかどうか def_SP_GuardShield_Init消費
const Def_Sys_GuardShield_PlusVecTime	= 15; // ガードシールド発動時にガードベクトルに加算するベクトル時間
const Def_Sys_ReverseBeatAnnounce		= 0; // リバースビートのアナウンスを出すかどうか
const Def_Sys_VeilOff_GRDPlus			= 0; // VO中の攻撃でGRDをモリモリ増やすか
const Def_Sys_RecoverBarrierType		= 1; // 受け身時のバリアタイプ 0:すぐ消える 1:行動可能になったら消える　※キャラ別再指定あり
const Def_Sys_VeilOff_GRDBonus			= 1; // ヴェールオフ発動時にGRDボーナスを与えるか 0:何もしない 1:色々やる
const Def_Sys_DyingIWExistAtk			= 2; // 瀕死の時だけ出せるIWE攻撃を実装するかどうか
const Def_Sys_DyingVeilOffShortCharge	= 0; // 瀕死の時VOのタメ時間を短くするかどうか
const Def_Sys_DirectDashDelay			= 0; // 生出しダッシュ攻撃の発生を何フレーム遅くするか 0:遅くしない 1〜:遅くするフレーム(Dashパターン経由)

const Def_Sys_CancelAirAtk_GuardCrouch	= 2; // キャンセルで出したジャンプ攻撃を屈ガード可能にするか 0:何もしない 1:屈ガード可能にする 2:ダメージ補正をかける

//ゲームのルールフラグ
const Def_Rule_GroundThrowType	= 0; // 0:投げスカリあり(A+D) 1:レバー入れ強

const Def_Rule_ToParentFireBallHitStatus = 1; // FireBall飛び道具のヒットを親に伝えるか
const Def_Rule_AddComboRateFireBallDamage = 1; // FireBallヒット時にコンボレートを加算するかどうか

//システム分別用（意味不明派）
const Def_Rule_EnableReverceBeat	= 1; // リバースビートの有無 0:リバビ無し
const Def_Rule_StdSmartSteerKeyType	= 0; // 立ちスマートステアのキータイプ 0:[ "0+A","4+A","6+A" ] 1:"A"
const Def_Rule_StdSmartSteer	= 1; // スマートステアの有無
const Def_Rule_CroSmartSteer	= 0; // スマートステアの有無
const Def_Rule_AirSmartSteer	= 0; // スマートステアの有無
const Def_Rule_SetThrowType		= 0; // 通常投げの相手パターン自動変更 0:UNI(何もしない) 1:304で地面 2:320で浮く
const Def_Rule_GroundBoundSlideKeep = 0; // 地上のけぞり抜けにDivKeepで慣性を残す
const Def_Rule_GroundGuardSlideKeep = 0; // 地上ガード抜けにDivKeepで慣性を残す
const Def_Rule_AirRecover_ClearAirJumpCount = 0; // 空中受け身時に二段ジャンプの回数をリセットするか
const Def_Rule_SkipRock_DownOiuti		= 0; // ダウン追い討ち時に半ロックを行わない 1:行わない 0:行う
const Def_Rule_CmdHitStatus_JumpCancel	= "Damage"; // ジャンプキャンセル条件(二段ジャンプ含む) "Hit" or "Damage"
const Def_Rule_CmdCheckMuki_MultiJump	= 0; // MultiJumpのコマンドチェックの向き設定、 0-自動(基本値) 1-向いている方向 2-振り向き予定の方向
const Def_Rule_SPSkillMvEnd_EraseCutIn = 1; // SP技のMv終了(FinとLU)タイミングでカットインを消去する
const Def_Rule_GuardPat_HitStopAnime = 6; // ガードのヒットストップ中にアニメさせるか 0:しない 1〜ガードアニメが何枚ループか

const Def_Rule_GameSystem			= 1;
	const Def_RGS_UNI				= 1;
	const Def_RGS_CLI				= 2;
const Def_Rule_CmdCancelCheck		= 1; // キャンセルチェックにMvCodeを含めるか(必殺は必殺の時不可とか)

const Def_Rule_SPCutinAura		= 1; // 超技カットイン中にキャラに縁取りオーラをつけるかどうか

// 調整デバッグ用

//CmdCheck用定数
const Def_CmdCh_GenDoujiCheck = 1; // 同時押しチェックを出すかどうか(通常技は勝手に出る)
const Def_CmdCh_KeepDoujiCheck = 2; // コマンド成立時に同時押しチェックの猶予を消さない



//キャラクター番号
const Def_ChrNo_Hyd		= 0;
const Def_ChrNo_Lin		= 1;
const Def_ChrNo_Wal		= 2;
const Def_ChrNo_Car		= 3;
const Def_ChrNo_Ori		= 4;
const Def_ChrNo_Gor		= 5;
const Def_ChrNo_Mer		= 6;
const Def_ChrNo_Vat		= 7;
const Def_ChrNo_Set		= 8;
const Def_ChrNo_Yuz		= 9;
const Def_ChrNo_Hil		= 10;
const Def_ChrNo_Elt		= 11;

const Def_ChrNo_Nan		= 12;
const Def_ChrNo_Bya		= 13;
const Def_ChrNo_Aka		= 14;
const Def_ChrNo_Cha		= 15;
const Def_ChrNo_Wag		= 16;
const Def_ChrNo_Enk		= 17;
const Def_ChrNo_Lnd		= 18;

const Def_ChrNo_Mik		= 21;
const Def_ChrNo_Pho		= 24;

//custom chardef

const Def_ChrNo_Naoto	= 23;

const Def_ChrNo_EXHyd	= 25;
const Def_ChrNo_EXLin	= 26;

const Def_ChrNo_Kuk		= 27;
const Def_ChrNo_KDash	= 28;

const Def_ChrNo_Noc		= 22;

//コンボリミット用定数、コンパイル時に変換されるので定義位置に注意
// 900〜929:弱
// 930〜959:中
// 960〜989:強

const DEF_BS_CL_STDA		= 900;
const DEF_BS_CL_STDB		= 930;
const DEF_BS_CL_STDC		= 960;
const DEF_BS_CL_CROA		= 901;
const DEF_BS_CL_CROB		= 931;
const DEF_BS_CL_CROC		= 961;
const DEF_BS_CL_AIRA		= 902;
const DEF_BS_CL_AIRB		= 932;
const DEF_BS_CL_AIRC		= 962;
const DEF_BS_CL_DASHSTDA	= 903;
const DEF_BS_CL_DASHSTDB	= 933;
const DEF_BS_CL_DASHSTDC	= 963;
const DEF_BS_CL_DASHCROA	= 904;
const DEF_BS_CL_DASHCROB	= 934;
const DEF_BS_CL_DASHCROC	= 964;

const DEF_BS_CL_ATK1A = 905;
const DEF_BS_CL_ATK1B = 935;
const DEF_BS_CL_ATK1C = 965;

const DEF_BS_CL_ATK3A = 906;
const DEF_BS_CL_ATK3B = 936;
const DEF_BS_CL_ATK3C = 966;

const DEF_BS_CL_ATK6A = 907;
const DEF_BS_CL_ATK6B = 937;
const DEF_BS_CL_ATK6C = 967;

const DEF_BS_CL_ATK4A = 908;
const DEF_BS_CL_ATK4B = 938;
const DEF_BS_CL_ATK4C = 968;

const DEF_BS_CL_ATKJ2A = 909;
const DEF_BS_CL_ATKJ2B = 939;
const DEF_BS_CL_ATKJ2C = 969;

const DEF_BS_CL_ATKJ6A = 910;
const DEF_BS_CL_ATKJ6B = 940;
const DEF_BS_CL_ATKJ6C = 970;

const DEF_BS_CL_ATKJ4A = 911;
const DEF_BS_CL_ATKJ4B = 941;
const DEF_BS_CL_ATKJ4C = 971;


const DEF_BS_CL_ATKA_A = 912;
const DEF_BS_CL_ATKB_B = 942;
const DEF_BS_CL_ATKC_C = 972;

const DEF_BS_CL_ATK2A_2A = 913;
const DEF_BS_CL_ATK2B_2B = 943;
const DEF_BS_CL_ATK2B_2B_2B = 944;
const DEF_BS_CL_ATK2C_2C = 973;

const DEF_BS_CL_ATKJA_JA = 974;
const DEF_BS_CL_ATKJB_JB = 975;
const DEF_BS_CL_ATKJC_JC = 976;


const DEF_BS_CL_ATKA_A_A = 915;
const DEF_BS_CL_ATK6B_6B = 946;

//def_CN_AtkAandB
const DEF_BS_CL_ATKAANDB = 919;
const DEF_BS_CL_ATKCAANDB = 920;
const DEF_BS_CL_ATKJAANDB = 921;

//def_CN_AtkBandC
const DEF_BS_CL_ATKBANDC = 916;
const DEF_BS_CL_ATKCBANDC = 917;
const DEF_BS_CL_ATKJBANDC = 918;

//必殺技なのにチェーンキャンセルできるような特殊なもの用コンボリミット
const DEF_BS_CL_Skill00	= 980;
const DEF_BS_CL_Skill01	= 981;
const DEF_BS_CL_Skill02	= 982;
const DEF_BS_CL_Skill03	= 983;
const DEF_BS_CL_Skill04	= 984;
const DEF_BS_CL_Skill05	= 985;
const DEF_BS_CL_Skill06	= 986;
const DEF_BS_CL_Skill07	= 987;
const DEF_BS_CL_Skill08	= 988;
const DEF_BS_CL_Skill09	= 989;
const DEF_BS_CL_Skill10	= 990;
const DEF_BS_CL_Skill11	= 991;
const DEF_BS_CL_Skill12	= 992;
const DEF_BS_CL_Skill13	= 993;
const DEF_BS_CL_Skill14	= 994;
const DEF_BS_CL_Skill15	= 995;
const DEF_BS_CL_Skill16	= 996;
const DEF_BS_CL_Skill17	= 997;
const DEF_BS_CL_Skill18	= 998;
const DEF_BS_CL_Skill19	= 999;

//見難いから小文字も使おう

//キャラクター別定数（？）
const def_CHR_Elt_BulletMax		= 13; //弾丸最大数

const def_Cha_ObjID_Dah			= 1; // ObjectID
const def_Cha_ObjID_Barrier		= 2; // ObjectID
const def_Cha_ObjID_BarrierBook	= 3; // ObjectID
const def_Cha_ObjID_IWE_RedBoard	= 8; // ObjectID
const def_Cha_ObjID_IWE_DahMoya	= 9; // ObjectID

//MvからどのMvに行ったり行かなかったりするか用フラグ
//Finalizeコードもこれ
const def_CHR_Dah_ActFlag_Stand		= 1; // 1
const def_CHR_Dah_ActFlag_Walk_F	= 2; // 2
const def_CHR_Dah_ActFlag_Walk_B	= 4; // 3
const def_CHR_Dah_ActFlag_0202A		= 8; // 4
const def_CHR_Dah_ActFlag_0202B		= 16; // 5
const def_CHR_Dah_ActFlag_RiseUp	= 32; // 6 ダハーカ立ちあがる
// const def_CHR_Dah_ActFlag_0202C		= 32; // 6
const def_CHR_Dah_ActFlag_0202EX	= 536870912; // 30
const def_CHR_Dah_ActFlag_0202D	= 1073741824; // 31 //181016追加　ダハーカその場召喚
const def_CHR_Dah_ActFlag_236A		= 64; // 7
const def_CHR_Dah_ActFlag_236B		= 128; // 8
// const def_CHR_Dah_ActFlag_236C		= 256; // 9
const def_CHR_Dah_ActFlag_236EX		= 67108864; // 27
const def_CHR_Dah_ActFlag_214A		= 512; // 10
const def_CHR_Dah_ActFlag_214B		= 1024; // 11
// const def_CHR_Dah_ActFlag_214C		= 2048; // 12
const def_CHR_Dah_ActFlag_214EX		= 134217728; // 28
const def_CHR_Dah_ActFlag_AppearAct	= 4096; // 13 消滅中の攻撃
const def_CHR_Dah_ActFlag_ChaDmgVanish	= 8192; //14 消滅
const def_CHR_Dah_ActFlag_DahDmgVanish	= 16384; //15 消滅
const def_CHR_Dah_ActFlag_DahLimitVanish	= 32768; //16 動きすぎでの消滅
const def_CHR_Dah_ActFlag_MoveFront		= 65536; // 17
const def_CHR_Dah_ActFlag_MoveBack		= 131072; // 18
// const def_CHR_Dah_ActFlag_J214C		= 262144; //19
const def_CHR_Dah_ActFlag_IW		= 524288; //20
const def_CHR_Dah_ActFlag_623A		= 1048576; //21
const def_CHR_Dah_ActFlag_623B		= 2097152; //22
// const def_CHR_Dah_ActFlag_623C		= 4194304; // 23
const def_CHR_Dah_ActFlag_623EX		= 268435456; // 29
const def_CHR_Dah_ActFlag_AirAct	= 8388608; // 24 空中の攻撃
const def_CHR_Dah_ActFlag_InputWalk	= 16777216; // 25
const def_CHR_Dah_ActFlag_HideRock	= 33554432; // 26　0202攻からの掴み

const def_PP_Cha_DahActionPointLimit		= 1000; //これをこえると動かなくなる

//BoudStatusのPower定数　※実はフラグになっている
const def_BS_Pow_LV0			= 1; //超弱（無声）やられ
const def_BS_Pow_LV1			= 2; //弱やられ
const def_BS_Pow_LV2			= 0; //デフォルトは中やられ(初期値は0なので)
const def_BS_Pow_LV3			= 4; //強やられ
const def_BS_Pow_Furimuki		= 8; // 振り向き属性（攻撃してきたものに振り向く。基本は相手操作親の向き依存。）
const def_BS_Pow_SPGuardLimit	= 16; // シールドに弱い
const def_BS_Pow_GuardFloat		= 32; // ガードで浮くやつ（無敵がつく）

//GRD_CorrectBreakTimeの定数(何パーセントの減算か)
const def_CBT_NoboriTyudanGuard			= 30;	// のぼり中段
const def_CBT_TyudanGuard 				= 4;		// 中段
const def_CBT_TyudanGuardSyodan			= 10;	// 中段初段
const def_CBT_GedanGuard 				= 4;		// 下段
const def_CBT_GedanGuardSyodan			= 6;		// 下段初段
const def_CBT_AnyCancel					= 4;		// 色々キャンセルできる必殺技
const def_CBT_AnyCancelSyodan			= 6;		// 色々キャンセルできる必殺技
const def_CBT_Guard 					= 2;		// ガード

//HP値操作関係
const def_HPV_Liberate			= 0; //100%ヴェールオフ(廃止)
const def_HPV_OverLiberate		= 0; //200%ヴェールオフ(廃止)

//座標定数
const def_POS_GamenGaiYuuyoX				= 16384;		//画面外チェックで画面内と判断される端からの猶予座標(128*128)
const def_POS_AirDashLimitHeight			= 11776;		//空中ダッシュ高度制限座標(11776　92ドット)
const def_POS_AirDashHoseiMinHeight			= 16384;		//空中ダッシュ高度補正座標(128ドットより低いと上ベクトルをかける)
const def_POS_GamenHajiX					= 262144;	//画面端までの距離　155648
const def_POS_TechOverGamenHajiX			= 278528;	//なげ掴み時に画面外に行ったと判断される距離(+128ドット)　172032
const def_POS_AboutAir					= -15000;	//これより低いと大体空中だよ

//ファイナライズコード定数
const def_FC_FireBallHit					= 30000;
const def_FC_FireBallSousai					= 30001;
const def_FC_FireBallLand					= 30002;
const def_FC_FireBallWall					= 30003;
const def_FC_FireBallGamenGai				= 30004;
const def_FC_FireBallBlocked				= 30005;
const def_FC_Lose							= 30006;
const def_FC_RoundLose						= 30007;
const def_FC_WallRecover_Sita				= 30008;
const def_FC_FireBallDamage					= 30009;
const def_FC_FireBallGuard					= 30010;
const def_FC_FireBallCeil					= 30011;

// 開幕の掛け合い用フラグ
const def_DTF_Exclude1PlayMode	= 1; // 一人用プレイを除外する

// BMvTbl.AddAirCount用定数
// AirCountSlot定数 BMvTbl.AddAirCount( num, count )
// 空中から地上にくると0になるフラグ用。空中ダッシュは7、必殺技は0〜6を使う
// 8と9はプログラムで使っているかもしれない。大丈夫らしいけど一応避ける？
// 0〜15を使っていい。16、17はプログラムで使うようになっているっぽいぞ。

const def_ACS_AirDash	= 15;
const def_AC_Assault = 15; // アサルト制限用

//Battle_Std.JumpFrameID_NotHoldButton　用フラグ
const def_JFN_SetExtendFlagPlayer = 1; // オブジェクトからの参照でエクステンドフラグを親につける

// キャラ別定数は0〜6
// BMvTbl.AddAirCount( def_ACS_MIK_236, 0 )
const def_ACS_VAT_J236A	= 0;
const def_ACS_VAT_J236B	= 1;
const def_ACS_VAT_J236C	= 2;
const def_ACS_VAT_J214A	= 3;
const def_ACS_VAT_J214B	= 4;
const def_ACS_VAT_J214C	= 5;
const def_ACS_VAT_J0202	= 6;
const def_ACS_VAT_JAB	= 7;
// 8 予約
// 9 予約
const def_ACS_VAT_J236EX	= 10;
const def_ACS_VAT_J214EX	= 11;

const def_ACS_MIK_236	= 0;
const def_ACS_MIK_236EX	= 1;

// 行動定数(この定数は親から子に引き継ぐ)
// BMvTbl.SetMvAction( def_MVA_EXSkill );
// BMvTbl.GetMvAction()
const def_MVA_None		= 0; // 未指定(0固定)
const def_MVA_Throw		= 3; // 通常投げ
const def_MVA_EXAtk		= 4; // 特殊技（FF）
const def_MVA_Skill		= 5; // 必殺技
const def_MVA_EXSkill	= 10; // EX必殺技
const def_MVA_SPSkill	= 20; // SP必殺技

//行動コード定数（Mvの最初で0になる、未設定だと0）MvCode MoveCode
// Battle_Std.MoveCode.AddFlag( def_MC_Shield );
const def_MC_None							= 0; //00 未設定
const def_MC_Atk							= 1; //01 通常技
const def_MC_Skill						= 2; //02 必殺技
const def_MC_FireBall						= 4; //03 飛び道具(CreateFireBallや自動生成されたものにつく)
const def_MC_AtkBlade						= 8; //04 攻撃判定の付いたブレード　※未使用かも
const def_MC_Recovery						= 16; //05 受け身
const def_MC_Throw						= 32; //06 投げ属性
const def_MC_EXAction						= 64; //07 ＥＸ属性（＋通常技で特殊技、＋必殺技でＥＸ必殺技）、VOにもついてる
const def_MC_SPAction						= 128; //08 ＳＰ属性（＋必殺技でＩＷ）
const def_MC_NoJumpCansel					= 256; //09 通常Ｃからジャンプキャンセルを除外する
const def_MC_DoujiCanselOK					= 512; //10 同時押しコマンドで別の技に移行が許されるか
const def_MC_NoBursted						= 1024; //11 バーストされない技
const def_MC_NoBurst						= 2048; //12 自分がバーストできない状態
const def_MC_HitStatus_Damage				= 4096; //13 Mvの攻撃でダメージしてるか※通常技、特殊技、必殺技のみ
const def_MC_HitStatus_Guard				= 8192; //14 Mvの攻撃でガードしてるか※通常技、特殊技、必殺技のみ
const def_MC_DoujiCanselNG_NormalAtk			= 16384; //15 同時押しコマンドで別の技に移行が許されない通常技
const def_MC_CharaFlag1					= 32768; // 16 キャラ別フラグ // ケイアス：指示を出し終えたモーションか ユズリハ：モード継続　ダハーカ：殴られ済の行動 アカツキ：こうせい関係のMv ビャクヤ：EX罠を破って浮かす技
const def_MC_CharaFlag2					= 65536; // 17 キャラ別フラグ // ケイアス：キャンセル可能を受け取らないモーションか
const def_MC_NoSend_ScriptKnockBackVecor		= 131072; //18 シールドなどのスクリプトによって相手から受ける特殊なノックバックベクトルの影響を親に渡さない
const def_MC_GRDLowBreak					= 262144; //19 ＧＲＤブレイクの効果が短い・カウンターによるCP増加が低い・ダハーカを壊せない・（強化セグメントを壊せない：廃止）
const def_MC_GRDBreak_FatalDmgHosei			= 524288; //20 ＧＲＤブレイクでダメージ補正がゆるくなる(130%)
const def_MC_Sousai							= 1048576; //21 攻撃判定が重なっていたら相殺される（自分が相殺したいならFrameUpdateで関数を呼ぶ）相殺時に見た目変更したいならFireBallとして呼ぶ
const def_MC_Sousai_NoSubHitCount			= 2097152; //22 def_MC_Sousaiで相殺されたときヒット数を減算しない
const def_MC_Sousai_EnemySubSuccess					= 4194304; //23 def_MC_Sousaiで相手の何かのヒット数減算に成功した
const def_MC_FireBallRect					= 8388608; // 24 飛び道具判定が含まれた操作親Mv　特殊な飛び道具反射に対応、アカツキのこうせい
// const _MoveCode0_NoMoveBasicAction			= 16777216; //25 歩き・しゃがみの基本動作に移行できない ※投げ回避できないのでジャンプを除外プログラム側で定数を宣言(トレモバグ回避用）
const def_MC_ExDamageHosei					= 33554432; // 26 ヒット時に乗算補正をかける行動（厳しすぎる崩しとか）
const def_MC_EnableAirAtkStatus				= 67108864; // 27 AirAtkStatusが有効なMv
const def_MC_Shield							= 134217728; // 28 シールドを取られたMv
const def_MC_EnableCansel_SkilltoSkill		= 268435456; //29 必殺技でも必殺Ｃで必殺技へのキャンセルを許容する
const def_MC_EnableCansel_SkilltoAtk		= 536870912; //30 必殺技の通常Ｃで通常技へのキャンセルを許容する
const def_MC_JumpCanselOnly					= 1073741824; // 31 通常Ｃをジャンプキャンセルのみにする

// def_MC_Atk
// def_MC_Skill
// def_MC_EXAction
// def_MC_SPAction

// 行動コード定数１
// Battle_Std.MoveCodeEx.AddFlag( 1, def_MC1_ChainShiftOK );
/* 00 */const def_MC1_None = 0;
/* 01 */const def_MC1_SupportChara = 1;
/* 02 */const def_MC1_Sousai_MySubSuccess = 2; //def_MC_Sousaiで自分のヒット数減算に成功した
/* 03 */const def_MC1_CharaFlag3 = 4;
/* 04 */const def_MC1_AtkLow = 8; // 弱攻撃につく（一部弱じゃないけど弱くしたい攻撃にもつく）
/* 05 */const def_MC1_AtkJump = 16; // ジャンプ攻撃につく
/* 06 */const def_MC1_AtkLegs = 32; // 足払い系につく
/* 07 */const def_MC1_AtkBall = 64; // 飛び道具系につく
/* 08 */const def_MC1_AtkImpact = 128; // インパクトスキルにつく（インパクト相殺はインパクト技には負けやすい）
/* 09 */const def_MC1_SupportMukiAuto = 256; // このMvからだされたサポートはSetMukiAutoされて生成される
/* 10 */const def_MC1_Kirifuda = 512; // 切り札（同時押し猶予とかあるし切り札状態になってるかどうかは不明）
/* 11 */const def_MC1_EnableZurasiExSpCancel = 1024; // ExやSp技ででかかり数フレーム空キャン可能なＭｖ
/* 12 */const def_MC1_SlowRocketeerAirAtk = 2048; // おそめののぼり中段ジャンプ攻撃
/* 13 */const def_MC1_VeryWeakImpactAtk = 4096; // 
/* 14 */const def_MC1_ExtendAction = 8192; // エクステンドアクションしたＭｖ
/* 15 */const def_MC1_CmdLvDZ_OK = 16384; // 同時押しで別の行動に移ってもいい
/* 16 */const def_MC1_CmdLvDZ_SP2OK = 32768; // 同時押しでIWEクラス以上なら移ってもいい
/* 17 */const def_MC1_AirAtkGuardHosei = 65536; // これから出した発生が早いジャンプ攻撃は上段になる（のぼり中段で無くてもなる）
/* 18 */const def_MC1_NoAtkCansel = 131072; // 通常Ｃから通常技キャンセルを除外する（ジャンプキャンセルのみになる）
/* 19 */const def_MC1_Shield_CanselNG = 262144; // シールドされるとキャンセル不能（EXキャンセルは可）＆行動不能に書き換わる行動
/* 20 */const def_MC1_ShieldFailed = 524288; // 失敗シールドでGRD減ったMV（失敗かどうかガードの戻りで見るだけ）
/* 21 */const def_MC1_ChainShiftOK = 1048576; // ツールで「チェインシフト可能」がある時なら空振りCS可能なMV
/* 22 */const def_MC1_DoujiEndYoyaku = 2097152; // 同時押しで別の行動に移る予約が入ったMV
/* 23 */const def_MC1_Jump = 4194304; // ジャンプ扱い（ここから技を出すとのぼり中段の制限などがかかる）
/* 24 */const def_MC1_CSAntenGaesiSkill = 8388608; // CS暗転返しから出した必殺技
/* 25 */const def_MC1_MovableInitSkill = 16777216; // 行動可能から出した必殺技
/* 26 */const def_MC1_SidouHitSkill = 33554432; // 始動であたった必殺技（Mv移行でフラグ引継ぎあり）
/* 27 */const def_MC1_GuardChainShiftOK = 67108864; // ツールで「チェインシフト可能」がある時ならガードでCS可能なMV
/* 28 */const def_MC1_GuardGRDChangeStop = 134217728; // ガード硬直中にGRDを増減させないフラグ（シールドも含む）
/* 29 */const def_MC1_AirAtkKirikaeTyudanCheckStart = 268435456; // このMvから出したジャンプ攻撃でF式チェックを行う
/* 30 */const def_MC1_TutoBallMuteki = 536870912; // チュートリアルのハイドの飛び道具を抜けるとつく
/* 31 */const def_MC1_GenFlag = 1073741824; // Mv固有フラグ（設定は共通動作のMvを指定する。チェック時はMv名と一緒に調べて使う）

// Battle_Std.MoveCodeEx.AddFlag( 2, def_MC2_NoWhiffEXCancel );
const def_MC2_CheckStartExtendAction = 1;
const def_MC2_CheckEndExtendAction = 2;
const def_MC2_ZyodanAirAtk = 4; // 上段化したジャンプ攻撃
const def_MC2_TechOP = 8; // 投げ抜け仕込み行動か。投げ抜け猶予が終わっても有効なので注意
const def_MC2_FromAssault = 16; // アサルトからのジャンプ攻撃。地上・空中問わない
const def_MC2_GuardShiled = 32; // ガードシールド発動
const def_MC2_ShiledSuccess = 64; // シールド成功
const def_MC2_CounterHit = 128; // カウンターヒット
const def_MC2_InputThrowCmd = 256; // 投げのコマンドを入れた技（投げ抜け仕込みではない）
const def_MC2_ReverseThrow = 512; // 後ろ投げ
const def_MC2_NoBreakObject = 1024; // 設置物とかオプションとか消せない判定（ダハーカとか）
const def_MC2_SkillThrow = 2048; // コマンド投げ
const def_MC2_EnableCVO_OnlyCS = 4096; // CSのみ可能な時にCVOも許可する
const def_MC2_StatusStd = 8192; // 汎用立ち（ガードで使用中）
const def_MC2_StatusCro = 16384; // 汎用しゃがみ（ガードで使用中）
const def_MC2_StatusAir = 32768; // 汎用空中（ガードで使用中）
const def_MC2_Reversal = 65536; // リバサで出した（ゲーム中はリバサ表記がでないものもある）
const def_MC2_CharaFlag4 = 131072;
const def_MC2_DashKansei = 262144; // ダッシュ慣性がついているか（ダッシュとジャンプとジャンプ攻撃にしかつかない）
const def_MC2_SysAtk = 524288; // VO、ガーキャン、通常投げの、システム的な攻撃につく
const def_MC2_EnemyAntenStop = 1048576; // 敵の暗転で自分が動けないとき
const def_MC2_DamageNoFurimuki = 2097152; // ダメージ時に相手の振り向きを行わない
const def_MC2_NotHoldForever = 4194304; // インクリース系で途中でボタン離してる
const def_MC2_NoWhiffEXCancel = 8388608; // ツールで「EXキャンセル」があっても空振り時は出せない

// Battle_Std.MoveCodeEx.AddFlag( 3, def_MC3_SPActionProduction );
const def_MC3_CallComboChainMv = 1; // 連打コンボで呼ばれたMv

//MC6系技の性能定義みたいなイメージ？現状GRD増加にのみ影響
// Battle_Std.MoveCodeEx.AddFlag( 6, def_MC6_EnableCansel_AddCommand );
const def_MC6_EnableCansel_JumpMoveable = 1;//技後空中で行動可能になる
const def_MC6_EnableCansel_AddCommand = 2;//追加技を持っている

// Battle_Std.MoveCodeEx.AddFlag( 7, def_MC7_StdAssultLimitAirAtk );
const def_MC7_StdAssult = 1;//地上アサルト制限をかけたい技
const def_MC7_AirAssult = 2;//空中アサルト
const def_MC7_StdAssultIgnoreNoMove = 4;//地上アサルトの行動不能フラグの影響を受けない　※アサルトの処理がInit_StdなのでInitBeforeで呼ぶこと
const def_MC7_LightLegsMuteki = 8;//小足属性への無敵を設定予定のMV(これがあるとSetHitMutekiで小足無敵が消えない)
const def_MC7_InActive = 16;//被CS時にインアクティブが検知される行動(これとは別に、通常技・必殺技・アサルトが検知される)
const def_MC7_StdAssultFrameAdd = 32;
const def_MC7_AnyCancelGRD = 64;//色々キャンセルできる技のGRD増加処理を既に行ったかどうか
const def_MC7_SetMutekiDamage = 128;//ダメージを与えているときは無敵にする
const def_MC7_ShieldWeakGRDAdd = 256;//被シールドでGRDが多く増加する技
const def_MC7_CompletedShieldWeakGRDAdd = 512;//被シールドでのGRD増加処理を済ませた技
const def_MC7_ThrowCounter = 1024;//硬直中を掴んだ投げ
const def_MC7_StdAssultLimitAirAtk = 2048;//地上アサルトの制限を受けた技（着地まで）

//mvtmplフラグ
const def_TmplFlags_ChangeStatusOnly		= 1; //状態の移行のみを行う（※他のフラグも入ってるような状態になるよ）
const def_TmplFlags_NoFurimuki				= 2; //振り向きを行わない(地上必殺技は基本振り向くがこれがあると振り向かない)
const def_TmplFlags_NoAddComboRate			= 4; //コンボレートの加算をしない
const def_TmplFlags_DoujiCancelOK			= 16; //同時押しでのキャンセルを認める（必殺技はこれをつけないと同時押しキャンセルできない）
const def_TmplFlags_NoDrawReversalInfo		= 32; //リバーサルアナウンスの文字表示を出さない（リバサはカウントされる）
const def_TmplFlags_PassBeforeMoveCodes		= 64; //特定のフラグを引き継ぐ
const def_TmplFlags_NoClearVector			= 128; //スクリプトによる自動ベクトル初期化を行わない

//atktmplフラグ
const def_AtkTmplFlags_Enable				= 1; //Atkでもtmpl処理をする

//fireball用tmplフラグ
const def_FBTmplFlags_NoClearVector			= 1; //スクリプトによる自動ベクトル初期化を行わない
const def_FBTmplFlags_NoChangeLandMv		= 2; //着地でＭｖ変化をしないようにする
const def_FBTmplFlags_NoEXSLimit			= 8; //EX技っぽい弾のヒットorガード時にかかるEXS制限を解除する

//FL(フレーム)定数
const def_FL_NoneDoujiCheck				= 3;		//同時押し猶予フレーム
const def_FL_SpecialDoujiCheck				= 3;		//同時押し猶予フレーム
const def_FL_ExSpecialDoujiCheck			= 3;		//同時押し猶予フレーム
//↑のフレームまでチェックオブジェクトはあるが、lastdelayで有効なのは2Fまでなので実質2F

const def_FL_NeutralWaitMin				= 420;	//待機アニメジャンプ最低フレーム(挑発)
const def_FL_NeutralWaitStep				= 240;	//↑を超えて以降、待機アニメジャンプのチェックを何フレおきにするか

//無敵時間関係
const def_FL_JumpWaitNageMuteki				= 16;	//ジャンプ待機中にかかる投げ無敵（Mv抜けると０になります）
const def_FL_F_RecoverMuteki				= 254;	//空中受身無敵時間 18
const def_FL_B_RecoverMuteki				= 254;	//空中受身無敵時間 20
const def_FL_N_RecoverMuteki				= 254;	//空中受身無敵時間 21
const def_FL_D_RecoverMuteki				= 10;	//空中受身無敵時間 10
const def_FL_DownRecoverMuteki				= 60;	//ダウン受身無敵時間（着地まで）

const def_FL_F_GroundRecoverMuteki			= 23;	//地上受身無敵時間
const def_FL_B_GroundRecoverMuteki			= 23;	//地上受身無敵時間
const def_FL_N_GroundRecoverMuteki			= 23;	//地上受身無敵時間
const def_FL_WallRecoverMuteki				= 30;	//壁受身無敵時間（抜けると解除）

const def_FL_ModoriGuardFloatDagekiMuteki	= 6;		//ガードフロート戻りの打撃無敵時間
const def_FL_ModoriGuardNageMuteki			= 8;		//ガード戻りの投げ無敵時間
const def_FL_ModoriYarareNageMuteki			= 8;		//地上やられ戻りの投げ無敵時間

const def_FL_GroundRecoverModoriNageMuteki	= 8;		//地上受身後の投げ無敵時間
const def_FL_UkiRecoverModoriNageMuteki		= 8;		//浮きやられ受身着地後の投げ無敵時間
const def_FL_OkiagariNageMuteki				= 8;		//起き上がりの投げ無敵時間

//硬直時間関係
const def_FL_GroundRecoverHane_Recovery		= 20;	//地上受け身（跳ね）硬直 メルカヴァとか20Fきっちりしかないからいじれないよ
const def_FL_WallRecoverWaitMin				= 10;	//壁受身から最速で動けるまで
const def_FL_WallRecoverWaitMax				= 10;	//壁受身の後何もしないとこのフレームで受身を取る

//投げ・投げ抜け関係
const def_FL_Tech							= 15;	//つかまれてからの投げ抜け猶予フレーム（-1すると格ゲー的猶予）
const def_FL_BoundTech						= 30;	//やられ中に強引に掴んだときの投げ抜け猶予フレーム
const def_FL_TechSenkou					= 10;	//投げコマンド入力してからの投げ抜け猶予フレーム このフレームまでは投げ抜け※def_FL_Techより小さいこと
const def_FL_TechMiss						= 34;	//投げコマンド入力してからの投げ抜け失敗フレーム このフレームまでは投げ抜けミス

const def_FL_LiberateMutekiTime				= 30;	//ヴェールオフの無敵時間
const def_FL_Liberate_LandRecovery			= 7;		//ヴェールオフの着地硬直 ver1.02:7F ver1.03loc:12F
const def_FL_LiberateHit_LandRecovery		= 2;		//ヴェールオフヒット時の着地硬直

const def_FL_ConvertMinTime				= 15;	//コンセントレーションの最低保障時間
const def_FL_ConvertMaxTime				= 1200;	//コンセントレーションの最大継続可能時間（ver1.03から追加）

const def_FL_ConvertStopTime				= 40;	//チェインシフトの時間停止・無敵時間
const def_FL_CancelSupportStopTime			= 0;	//キャンセルサポートの時間停止・無敵時間
const def_FL_CancelSupportDelayFrame		= 24;	//キャンセルサポートの全体F

const def_FL_SPCutinStopTime				= 60;	//SPカットインの時間停止(Worth)
const def_FL_EXCutinStopTime				= 20;	//EXカットインの時間停止

const def_FL_Shield_StdTime				= 14;	//立ちシールド最低保障時間（これ以上だとD離して解除）戻りが5F*2なので+10Fされる
const def_FL_Shield_CroTime				= 17;	//屈みシールド最低保障時間（これ以上だとD離して解除）戻りが5F*2なので+10Fされる
const def_FL_Shield_AirTime				= 17;	//空中シールド最低保障時間（これ以上だとD離して解除）戻りが5F*2なので+10Fされる
const def_FL_Shield_MaxTime				= 420;	//シールド最大持続可能時間（これ以上だと強制的に解除）

const def_FL_ShieldStopTime				= 0;		//シールド成功時の停止時間 Ver.1.03:6F

const def_FL_Shield_GRDPlusStartFrame 		= 20;	//シールドの何フレーム目からGRDを増やすか
const def_FL_Shield_SPCostStartFrame			= 30;	//シールドの何フレーム目からゲージを消費するか

const def_FL_ChainShift_ConvertFrame			= 200;	//チェインシフトの変換時間
const def_FL_WorthSkill_NageMutekiFrame		= 30;	//インフィニットワースに必ずつく投げ無敵時間

const def_FL_EXSLimit_EXSkill				= 300;	//EX技発動後にかかるゲージ増加制限フレーム
const def_FL_EXSLimit_IWSkill				= 180;	//IW技発動後にかかるゲージ増加制限フレーム
const def_FL_EXSLimit_IWEAtk				= 400;	//IWE攻撃発動後にかかるゲージ増加制限フレーム

//着地硬直関係(LandRecovery)
const def_FL_Jump_LandRecovery				= 2; 	//空ジャンプの着地硬直
const def_FL_Assault_LandRecovery			= 4; 	//アサルトの着地硬直 Ver.1.04:8 (アサルトからは何も出さないほうが硬直短)
const def_FL_BarrierAir_LandRecovery			= 6; 	//空中シールド着地硬直
const def_FL_BarrierAirFall_LandRecovery		= 2; 	//空中シールド終了後の着地硬直

//ジャンプ攻撃の着地硬直(特殊技も含む)※パターン変化でも解除（着地パターンは12Fまで保障して作ってある）
const def_FL_AtkAirA_LandRecovery			= 2; 	// 空振り
const def_FL_AtkAirB_LandRecovery			= 3; 	//
const def_FL_AtkAirC_LandRecovery			= 4; 	//
const def_FL_AtkAirA_LandRecovery_Shielded	= 10; 	// シールドされた
const def_FL_AtkAirB_LandRecovery_Shielded	= 10; 	//
const def_FL_AtkAirC_LandRecovery_Shielded	= 10; 	//
const def_FL_AtkAirA_LandRecovery_Damage	= 0; 	// ダメージした
const def_FL_AtkAirB_LandRecovery_Damage	= 0; 	//
const def_FL_AtkAirC_LandRecovery_Damage	= 0; 	//
const def_FL_AtkAirA_LandRecovery_Guard		= 2; 	// ガードされた
const def_FL_AtkAirB_LandRecovery_Guard		= 3; 	//
const def_FL_AtkAirC_LandRecovery_Guard		= 4; 	//

//アサルトから出した着地硬直
const def_FL_AtkAirA_LandRecovery_Assault			= 2; 	// 空振り
const def_FL_AtkAirB_LandRecovery_Assault			= 2; 	//
const def_FL_AtkAirC_LandRecovery_Assault			= 2; 	//
const def_FL_AtkAirA_LandRecovery_AssaultShielded	= 10; 	// シールドされた
const def_FL_AtkAirB_LandRecovery_AssaultShielded	= 10; 	//
const def_FL_AtkAirC_LandRecovery_AssaultShielded	= 10; 	//
const def_FL_AtkAirA_LandRecovery_AssaultDamage		= 2; 	// ダメージした
const def_FL_AtkAirB_LandRecovery_AssaultDamage		= 2; 	//
const def_FL_AtkAirC_LandRecovery_AssaultDamage		= 2; 	//
const def_FL_AtkAirA_LandRecovery_AssaultGuard		= 2; 	// ガードされた
const def_FL_AtkAirB_LandRecovery_AssaultGuard		= 2; 	//
const def_FL_AtkAirC_LandRecovery_AssaultGuard		= 2; 	//

//custom pp

const def_PP_Naoto_Bullets = 0;
const def_PP_Naoto_PersonaStatus = 1;
const def_PP_Naoto_Fate = 2;
const def_PP_Naoto_ReloadTime = 3;
const def_PP_Naoto_TrapCount = 4;
const def_PP_Naoto_ShootBuffer = 5;

//custom pp

//自由変数のどれを使うか・キャラ別定数（0〜30ぐらい）
//操作親からしかいじっちゃだめなやつ
const def_PP_Hyd_236Bakuha			= 0; //爆発
const def_PP_Hyd_236HitStatus		= 1; //236のヒット情報受け皿（コマンドチェックで使用）
const def_PP_Hyd_236BakuhaPosX		= 2; //爆発予定X座標
const def_PP_Hyd_236BakuhaPosY		= 3; //爆発予定Y座標


const def_PP_Yuz_BattouMode		= 0; //抜刀モードかどうか　0:通常 1:抜刀モード -1:クールタイム（モード移行できない状態）
const def_PP_Yuz_BattouA			= 1; //抜刀モードかどうか　0:ストックなし 1:ストックあり -1:このボタンを完全ホールド
const def_PP_Yuz_BattouB			= 2; //抜刀モードかどうか　0:ストックなし 1:ストックあり -1:このボタンを完全ホールド
const def_PP_Yuz_BattouC			= 3; //抜刀モードかどうか　0:ストックなし 1:ストックあり -1:このボタンを完全ホールド
const def_PP_Yuz_BattouD			= 4; //抜刀モードかどうか　0:ストックなし 1:ストックあり -1:このボタンを完全ホールド
const def_PP_Yuz_BattouAutoButton	= 5; //対応技のあと即ボタンを離していてもこれでどれかをホールドにする 0:A 1:B 2:C
const def_PP_Yuz_KeepBattouMv		= 6; //
const def_PP_Yuz_CoolTimeBattouCnt	= 7; //抜刀モードのクールタイム中に何回通常の必殺技を出したか

const def_PP_Wal_HitCount			= 0; //ヒット数いくつで抜けるとかに使う
const def_PP_Car_0202HS			= 0; //0202ヒットステータス
const def_PP_Car_214Hold			= 1; //214攻の設置状況 0:未設置 1:Aで設置中 2:Bで設置中 4:Cで設置中（フラグ）
const def_PP_Car_BandC_Type		= 2; //B+Cの時のレバーの向き 0:前 1:後
const def_PP_Car_BloodPoolCount		= 3; //設置してあるディゾルブ数（214はカウントしない）
const def_PP_Car_FreeMotionType = 4; // フリーモーションParam記憶
const def_PP_Car_BlodDrainObjID = 5; // 回復オブジェクトのID管理
const def_PP_Car_BlodDrainObjSt = 6; // 回復オブジェクトがでているときは1

const def_PP_Wal_BandC_Type		= 0; //B+Cの時のレバーの向き 0:前 1:後
const def_PP_Wal_DoubleCircle		= 1; //１回転を２回転で入力したかどうか

const def_PP_Mer_214				= 0; //214ヒットステータス

const def_PP_Vat_Bit_CheckObject	= 0; //ビットチェックオブジェクト出したかどうか　0:未生成 1:生成済み
const def_PP_Vat_Bit_ComboCount		= 1; //ビットが連続ヒットorガードした回数(10で１回、ガード時は10ずつ増加、ヒット時も10ずつ増加)
const def_PP_Vat_Bit_DamageCount	= 2; //ビットが連続ヒットした回数(10で１回) ガードでは増えない
const def_PP_Vat_Bit_is_Bombing		= 3; //ビットが爆発中かどうか
const def_PP_Vat_AUC_J214A			= 4; //J214Aを空中で使った回数
const def_PP_Vat_AUC_J214B			= 5; //J2145を空中で使った回数

const def_PP_Set_HitCount			= 0; //ヒット数いくつで抜けるとかに使う
const def_PP_Set_FrameCount		= 1; //フレーム数いくつで抜けるとかに使う
const def_PP_Set_214Input			= 2; //214派生の先行入力用
const def_PP_Set_214SakeStatus		= 3; //214で技を回避したら1

const def_PP_Hil_3CCommand			= 0; //2C入力時に3C入力だったかどうか
const def_PP_Hil_HoldLv			= 1; //ホールド剣のタメレベル 0:LV1 1:LV2

const def_PP_Elt_Bullet			= 0; //タマを何発うったか（最大値は…）
const def_PP_Elt_PowBullet			= 1; //強化弾丸のこり
const def_PP_Elt_ReloadTmp0		= 2; //リロード用テンポラリ
const def_PP_Elt_ReloadTmp1		= 3; //リロード用テンポラリ
const def_PP_Elt_AerialStatus		= 5; //エリアルジャンプ中は1 着地で0
const def_PP_Elt_CuttingSinkCount	= 6; //コンボ中421Bを何回入れたか　コンボ終了で0
const def_PP_Elt_FreeMotionType = 7; // フリーモーションParam記憶

const def_PP_Aka_KouseiSuccess		= 0; //こうせいせいこうフラグ
const def_PP_Aka_StdBandCType		= 1; //こうせい 0:奇数回 1:遇数回

const def_PP_Aka_Status			= 2; //汎用ステータス
	const def_PPFlag_Aka_ElectDmgCreate	= 1; //ビリビリやられ生成オブジェクト生成済みかどうか
	const def_PPFlag_Aka_KouseiHold		= 2; // こうせいB+Cホールド中かどうか
const def_PP_Aka_236HitStatus		= 3; //236攻のヒットステータス
const def_PP_Aka_Near_StdB		= 4; //近Bを使ったら1、遠Bを使ったら0

const def_PP_Cha_DirectActionType	= 4; //ケイアスのダハーカ指示アクション
const def_PP_Cha_DahMode			= 5; //ダハーカの状態(0:出現していない 1:出現中)
const def_PP_Cha_DahNormalCancel	= 6; //ダハーカのキャンセル情報(0:失敗 1:通常C可 255:行動可)
const def_PP_Cha_DahStatus			= 7; //ダハーカの汎用ステータス
	const def_PPFlag_Cha_DS_Invisible		= 1; //イベントでの非表示
	const def_PPFlag_Cha_DS_CallVanishEff 	= 2; //消滅エフェクトを出す(出した後フラグは消される)
	const def_PPFlag_Cha_DS_PowerfulMode	 	= 4; //強化状態
	const def_PPFlag_Cha_DS_Hiding			= 8; //潜伏状態
	const def_PPFlag_Cha_DS_ChangeChaMv		= 16; //ダハーカ攻撃中にケイアスのＭｖが変化したかどうか
	const def_PPFlag_Cha_DS_AliveCheckObject	= 32; //↑の監視オブジェクトがあるかどうか
	const def_PPFlag_Cha_DS_Vanishing		= 64; //消滅して消えている状態
	const def_PPFlag_Cha_DS_Rising		= 128; //備えろ中
const def_PP_Cha_DahActList		= 8; //ダハーカがコンボ中に使った技記憶
const def_PP_Cha_DahActionPoint		= 9; //ダハーカの行動ポイント(何かすると増加していって限界まで行くと消えるとか)
const def_PP_Cha_ButtonHoldFrame	= 10; //何フレーム何かのボタンを押しっぱなしにしているか
const def_PP_Cha_ButtonA_HoldFrame	= 11; //
const def_PP_Cha_ButtonB_HoldFrame	= 12; //
const def_PP_Cha_ButtonC_HoldFrame	= 13; //
const def_PP_Cha_DahHomingOffSet			= 14; // ダハーカ追尾オフセットX座標
const def_PP_Cha_DahFireBallSt			= 15; // 214の弾をだすと0、ヒットしたら1になりっぱなしになる
const def_PP_Cha_DahRiseUpYoyaku		= 16; // 備えろ先行入力

const def_PP_Mik_FreeMotionType = 0; // フリーモーションParam記憶
const def_PP_Mik_PP_J236InputType = 1; // J236を後ろ向きに出すかどうか
const def_PP_Mik_MoveAtkAddCount = 2; // 追加派生した回数
const def_PP_Mik_B_B_FromDamage = 3; // Bがヒットした後かどうか

const def_PP_Bya_LastWebTrapType = 0; // 最後に置いた罠 0:A 1:B 2:C 10:JA 11:JB 12:JC
const def_TS_Bya_WebTrap = 0; // 罠設置中の飛び道具スロット(214)
const def_TS_Bya_WebTrapAir = 3; // 罠設置中の飛び道具スロット(J214)
const def_TS_Bya_WebTrapGround = 2; // 地面罠設置中の飛び道具スロット
const def_TS_Bya_WebTrapAtk = 1; // 罠攻撃中の飛び道具スロット
const def_TS_Bya_ThrowType = 1; // 投げの追加入力情報
const def_TS_Bya_WebTrapAddJumpEnableInput = 2; // 214派生ジャンプ中の追加受付中かどうか
const def_PP_Bya_LastWebTrapPosX = 3; // 最後に置いた罠のX座標
const def_PP_Bya_LastWebTrapPosY = 4; // 最後に置いた罠のY座標
const def_PP_Bya_LastWebTrapAirPosX = 5; // 最後に置いた空中罠のX座標
const def_PP_Bya_LastWebTrapAirPosY = 6; // 最後に置いた空中罠のY座標

const def_PP_Ori_FFStickType = 0; // オリエのFFの方向記憶

const def_PP_Nan_StdBStickType = 0; // ナナセのBの方向記憶

/*
const def_PP_Vat_AirLimitFlags		= 5; //空中必殺技はそれぞれ空中で１回しか出せないようにする
	const def_PP_Vat_ALF_46A		= 1;
	const def_PP_Vat_ALF_46B		= 2;
	const def_PP_Vat_ALF_46EX		= 4;
	const def_PP_Vat_ALF_64A		= 8;
	const def_PP_Vat_ALF_64B		= 16;
	const def_PP_Vat_ALF_64EX		= 32;
	const def_PP_Vat_ALF_22A		= 64;
	const def_PP_Vat_ALF_22B		= 128;
	const def_PP_Vat_ALF_22EX		= 256;
*/

//自由変数のどれを使うか定数（20以降）
//操作親からしかいじっちゃだめなやつ
// 未使用PP
const def_PP_TMP0 = 20; // Mv内でのみ使うか、Mv一致時のみ使おうな
const def_PP_TMP1 = 21;//未使用
const def_PP_TMP2 = 22;//未使用
const def_PP_TMP3 = 23;//未使用

const def_PP_JumpFrame = 22;
const def_PP_AssultFrame = 23;
const def_PP_AssultOverHeadFrame = 24; // 100:未設定　0未満:調整値
// 未使用PP

const def_PP_COM_TMP0 = 25; // CPUが使う用１
const def_PP_COM_TMP1 = 26; // CPUが使う用２

const def_PP_GuardCancelStatus		= 27; // ガーキャン攻撃発動時

const def_PP_SousaiCount			= 24; // 相殺した回数
const def_PP_SousaiFlags			= 29; // 相殺フラグ記憶
	const def_PP_SFS_NoSousai		= 1; // 勝手に設定されるので手動で使ってはだめ
	const def_PP_SFS_NoHit		= 2; // 相殺された方を空振り扱いにする
	const def_PP_SFS_BallTarget		= 4; // 「飛び道具判定」が無いと無効にする
	const def_PP_SFS_NoGedan		= 8; // 下段を取れないようにする（デフォは全部取れる）
const def_PP_SousaiEtcHantei		= 42; // 相殺に使う特殊判定番号記憶

// 定数でいたるところで使ってるので残してあるだけ
	const def_PP_CBS_ButtonA		= 1;
	const def_PP_CBS_ButtonB		= 2;
	const def_PP_CBS_ButtonC		= 4;
	const def_PP_CBS_ButtonD		= 8;

const def_PP_GRDAction_UseGRD = 28; // B+Cでの消費GRD
	const def_PP_GAU_NoUse = 1; // 完全に消費させない
	const def_PP_GAU_NormalUse = 2;
	const def_PP_GAU_VORPALUse = 4;
	const def_PP_GAU_Used = 8;
	const def_PP_GAU_NoUpdateUse = 16; // 4F目の消費を無くす
	
const def_PP_JumpStartHeight		= 30; // ジャンプと二段ジャンプをしたときの高さが入ってる

const def_PP_SoundStatus				= 31; //SE再生のフラグ
	const def_PP_SS_NoBoundVoice		= 1;	 //やられボイスを再生しない
	const def_PP_SS_NoBoundVoiceOnce	= 2; //次のやられボイスを再生しない(BoundInitで消されます)
	
const def_PP_LastPlaySound			= 32; //最後に再生したSEの番号
const def_PP_AniSetObject			= 33; //
const def_PP_OsikomiVal			= 34; //押し込み係数が入ってる（-100←→100）

const def_PP_VeilOffGaugeType		= 35; //ヴェールオフ発動時のゲージ状態 0:100%開放 1:200%開放

const def_PP_RecoverHoldMask		= 36; //受け身に使った押しっぱなしボタン(同時押しにも対応) 1<<0:A 1<<1:B 1<<2:C 1<<3:D

const def_PP_Temp2				= 37; //割と適当に使う汎用変数
const def_PP_Temp					= 39; //割と適当に使う汎用変数
const def_PP_IWEXS_ChgVO_Hit		= 38; //IWEXSが使用可能かどうか 200%で相手が瀕死で最大ためＶＯをヒットで１

// CmdCheckの関数内でのみ使って良い
// Battle_Std.PP_AddFlag(def_PP_CmdStatus,0);
const def_PP_CmdStatus				= 40; //CmdCheck通過時(成功時)に更新されるステータス
	const def_PP_CS_MoveAble		= 1; //行動可能だったか※同時押しのズラしキャンセルがあるので注意
	const def_PP_CS_ReverseBeat	= 2; //リバースビート扱いで出そうとしてるか
	const def_PP_CS_DoujiDash_F	= 4; //6+A+Bでダッシュを入力したかどうか
	const def_PP_CS_UseGauge	= 8;
	const def_PP_CS_ExCancelOK	= 16; // Ｅｘキャンセルが出せる状態からだったか
	const def_PP_CS_SpCancelOK	= 16; // Ｓｐキャンセルが出せる状態からだったか
	const def_PP_CS_InputDoujiDash_F	= 64; //6+A+Bでダッシュを入力しようとしたか(出せないときも有効)
	const def_PP_CS_InputDoujiDash_B	= 128; //4+A+Bでダッシュを入力しようとしたか(出せないときも有効)
	
const def_PP_TechReverse			= 62; //逆投げかどうか
const def_PP_PlayerPosX 			= 59; //プレイヤーX座標記憶
const def_PP_EnemyPosX 			= 58; //相手のX座標記憶

const def_PP_NoneDouji 			= 50; //None技が無条件に出せる状態 0:出せない 1以上:のこり猶予F
const def_PP_SpecialDouji 			= 51; //Special技が無条件に出せる状態 投げとかB+Cで使用中
const def_PP_ExSpecialDouji 		= 52; //ExSpecial技が無条件に出せる状態 IWEXISTで使用中

const def_PP_CaptureCheckObject		= 53; //つかみチェックオブジェクト生成済みかどうか
const def_PP_TechHit_FrameManager	= 54; //投げ抜けフレーム管理

const def_PP_StdComboChain			= 55; //Ａ連打コンボチェック
const def_PP_CroComboChain			= 47; //Ａ連打コンボチェック
const def_PP_AirComboChain			= 49; //Ａ連打コンボチェック

const def_PP_JumpStatus			= 56; //ジャンプステータス　前後Ｎジャンプから着地まで有効
	const def_PP_JS_JumpF			= 1; //前ジャンプ状態（※二段ジャンプとかしてもフラグは消えない）
	const def_PP_JS_JumpN			= 2; //垂直ジャンプ状態
	const def_PP_JS_JumpB			= 4; //後ろジャンプ状態
	const def_PP_JS_MultiJumpF		= 8; //二段ジャンプ以降の前ジャンプ状態
	const def_PP_JS_MultiJumpN		= 16; //二段ジャンプ以降の垂直ジャンプ状態
	const def_PP_JS_MultiJumpB		= 32; //二段ジャンプ以降の後ろジャンプ状態
	const def_PP_JS_SkillLimit0		= 64; //空中必殺技制限スロット０
	const def_PP_JS_SkillLimit1		= 128; //空中必殺技制限スロット１
	const def_PP_JS_SkillLimit2		= 256; //空中必殺技制限スロット２
	const def_PP_JS_SkillLimit3		= 512; //空中必殺技制限スロット３
	
const def_PP_PlayerStatus			= 57; //汎用ステータスとか？
	//0 1 2 4 8 16 32 64 128 256 ...
//	const def_PP_PS_isAlive		= 0;
//	const def_PP_PS_isKO			= 1;		//KOされている
	const def_PP_PS_isGRDJ_Win		= 2;
	const def_PP_PS_isGRDJ_Draw	= 4;
	const def_PP_PS_isLiberate		= 8;
	const def_PP_PS_isOverLiberate	= 16;
	const def_PP_PS_AuraKanriEnd	= 32;	//オーラ管理をやめる
	const def_PP_PS_isThrowMv		= 64;	//投げ属性のモーションかどうか（このモーション中は行動不能でも投げ抜けが可能）
	const def_PP_PS_isBallSousaiMv	= 128;	//飛び道具相殺属性のモーションかどうか
	const def_PP_PS_NoAura			= 256;	//オーラを再張りしない
	//↑この辺適当なタイミングで折られてるっぽいよ

const def_PP_AuraType				= 48;	//見た目何のオーラがはられてる？
	const def_PP_AT_isNone			= 0;
	const def_PP_AT_isGRDJ_Win		= 1;
	const def_PP_AT_isGRDJ_Draw	= 2;
	const def_PP_AT_isLiberate		= 3;
	const def_PP_AT_isOverLiberate	= 4;
	const def_PP_AT_isCutin		= 5;
	const def_PP_AT_isEtc			= 6;

const def_PP_ReversalLeftTime		= 41;	//これが1以上で必殺技を出すとリバーサル扱いになる
// const def_PP_AssaultCount			= 43;	//アサルトを出したか（空中での回数制限用。地上状態になると０になる）

// Battle_Std.EnemyDamageFlag_Add( def_DF_SetedEXSLimit );
const def_DF_JumpCanseled = 1; // ジャンプキャンセルされる
const def_DF_ComboRecasted = 2; // コンボ中のリキャストをされる
const def_DF_AerialJumpCanseled = 4; // エリアルジャンプキャンセルをされる
const def_DF_Locked	= 8; //汎用ロックやられやられフラグ
const def_DF_GRD_Minused	= 16; //GRDを減らされた
const def_DF_GRD_Minused_TypeA	= 16; //GRDを減らされた
const def_DF_GRD_Plused	= 32; //GRDを増やされた
const def_DF_CSAntenGaesied	= 64; //CS暗転返し技を食らった
const def_DF_CharaFlag1	= 128;
const def_DF_UseExSkill	= 256; // EX技を使ったかどうか
const def_DF_SpHosyoHoseiSeted_DoubleEx = 512; // EXの同技
const def_DF_SpHosyoHoseiSeted_VOsukasi = 1024; // VOスカ
const def_DF_SpHosyoHoseiSeted_CVO = 2048; // CVO発動
const def_DF_GRD_Minused_TypeB	= 4096; //GRDを減らされた、別技
const def_DF_GRD_Minused_TypeC	= 8192; //GRDを減らされた、別技
const def_DF_CharaFlag2	= 16384;
const def_DF_CharaFlag3	= 32768;
//const def_DF_test = 65536;
const def_DF_EXSkillLocked		= 131072; // EXでロックする技
const def_DF_HitedVO		= 262144; // VOをあてた
const def_DF_MarkingBound		= 524288; // やられに印をつける記憶（AttackImpactのたびに消える）
const def_DF_Vorpaled			= 1048576; // VP状態でコンボを開始された
const def_DF_SetedEXSLimit	= 2097152; // EXS Limitを与えたかどうか



//const def_PP_GuadShieldCheck		= 44;	//ガードシールドフラグ
const def_PP_AirAtkStatus			= 44;	//ジャンプ攻撃のステータス（ジャンプ攻撃、ジャンプ特殊技で使う）
//	const def_PP_AAS_Hit			= 1;		//ヒットorガードした（着地の隙が無くなる）
	const def_PP_AAS_Shielded		= 2;		//シールドされた（なんか硬直とか）
	const def_PP_AAS_inAssault		= 4;		//アサルトから出されたジャンプ攻撃（地上・空中・ダッジ全部）
	const def_PP_AAS_inAirAssault	= 8;		//空中アサルトから出されたジャンプ攻撃
	const def_PP_AAS_Rocketeer		= 16;	//ジャンプ上昇中に出したかどうか
	const def_PP_AAS_Damage			= 32;		//ダメージ与えた（着地の隙が無くなる）
	const def_PP_AAS_Guard			= 64;		//ガードされた（着地の隙が減る？）
	const def_PP_AAS_Hit			= 96;		//ダメージorガード
//	const def_PP_AAS_Cancel		= 128;	// キャンセルで出した
	const def_PP_AAS_RockerteerHosei= 256;		//ロケッティア補正で上段にした
	const def_PP_AAS_KirikaeHosei	= 512;		//切り替えで低ダ補正で上段にした
	const def_PP_AAS_KirikaeHoseiClear	= 1024;		//切り替えで低ダ補正で上段にしたを消した

const def_PP_LastWallCount			= 45;	//damageimpactで更新されるwallcount記憶
const def_PP_ChainShiftStatus		= 46;	//　ノーキャンチェインシフトかどうか見る用

// Battle_Std.GS_AddFlag( def_PP_GS_KeepInActive ); // 
const def_PP_GlobalStatus			= 20; // 初期化されることの無いフラグ
	const def_PP_GS_ThrowStdC		= 1; // 投げ扱いの立ちＣ
	const def_PP_GS_DButtonHold		= 2; // Dボタンを押している
	const def_PP_GS_ThrustComboBlast	= 4; // 前に突き飛ばすコンボブラスト
	const def_PP_GS_AtkA_Rapid1		= 8; // A連1回目
	const def_PP_GS_AtkA_Rapid2		= 16; // A連2回目
	const def_PP_GS_AliveAdvGuardVec	= 32; // リフレクベクトルが残っている
	const def_PP_GS_AliveBoundingObj	= 64; // Mv_Obj_Boundingを生成済みかどうか
	const def_PP_GS_SPKanriObjFlag		= 128; // Mv_SPAfterImage_KanriObject用のフラグ
	const def_PP_GS_ThrowAtkAppeared		= 256; // Throw_Fで相殺親から攻撃判定が出た
	const def_PP_GS_BackScreenBlack			= 512; // 背景を真っ黒にするFadeProc_Setを呼んでいる
	const def_PP_GS_NoAct_Move = 1024; // 前後歩き、ダッシュ、バクステ、ジャンプ、しゃがみが使用不可になる
	const def_PP_GS_NoAct_Atk = 2048; // 攻撃全てが使用不可になる(CLAと切り札は使える)
	const def_PP_GS_TransferSupportMv_MissType1 = 4096; // サポート呼び出しが書き換え要求 Mv_SupportCharaType1 
	// const def_PP_GS_StopRecastSupport = 8192; // サポート回復がとまる？
	const def_PP_GS_DashStickHoldEnd = 16384; // 前ダッシュの後レバーを解除した？
	const def_PP_GS_SlideDashThrow = 32768; // ズラし押しダッシュ投げかどうか？
	const def_PP_GS_GuardCancelCmdCheckObj = 65536; // ガード中にガーキャンをいれたかどうかの検知オブジェクト
	const def_PP_GS_GuardCancelCmdFaild = 131072; // ガードしてから214をいれるまではこのフラグがたっていて214Dを失敗させる
	const def_PP_GS_KeepInActive = 262144; // InActive状態が継続中は1
	

//BoundのInitで初期化される
//const def_PP_BoundCansel			= 45;	//やられ中とかに何か出そうとするステータス（ヒットストップ後に発動する用）
//	const def_PP_BC_GCAssault		= 1;	//ガードキャンセルアサルト

//const def_PP_ShieldStatus			= 45;	//シールドステータス
//	const def_PP_SHS_HoldAuto		= 1;		//ホールドで自動シールド張りなおしするか
	

//オブジェクト単位（まだ使ってない）
//const def_LP_TechReverse = 0;		// 逆投げかどうか
//const def_LP_TechPlayerPosX = 1;	// プレイヤーX座標記憶
//const def_LP_TechEnemyPosX = 2;		// 相手のX座標記憶

const def_PP_CounterBufferStatus	= 50;	//　ch buffer adjustment for jumps

//FireBallオブジェクトのLP使用状況メモ
//BallのLPで使っていいのは0〜5あたり
// 0:
// 1:
// 2:
// 3:
// 4:
// 5:
// 6:def_LP_BallFlags
// 7:def_LP_MvType
// 8:def_LP_BallSlot

//FireBall用のLP定義
	
const def_LP_BallFlags				= 6;		// 飛び道具用フラグ集
	const def_BallFlags_None		= 0;		// いらないけど
	const def_BallFlags_Finalize	= 1;		// 次回ファイナライズしてね
	const def_BallFlags_SousaiSubHited	= 2;		// 相殺処理を一度でも行った（相殺でヒット数を減らされた）
	const def_BallFlags_AddComboRate	= 4;		// コンボレートをかけた
	const def_BallFlags_NoAddHitComboRate = 8;		// ヒット時にコンボレート足さない飛び道具
const def_LP_MvType				= 7;		// Mvの属性（飛び道具とかってか飛び道具にしか使ってない）
	const def_MvType_Normal		= 0;		// Mvの属性：無属性
	const def_MvType_Ball			= 536870912;		// Mvの属性：飛び道具
const def_LP_BallSlot				= 8;		// Eff6-100 101用スロット（61とか11とか）

//０〜９
const def_LP_Hyd_236_Type			= 0;		// 飛び道具ＡorＢ
const def_LP_Hyd_236_Hit			= 1;		//
const def_LP_Vat_236_Type			= 0;		// 飛び道具ＡorＢ
const def_LP_Vat_236EX_HitCount		= 1;		// EX飛び道具ヒット数

const def_LP_Car_BloodPool_Type		= 0;		// 血だまりがチェックするFireBall
const def_LP_Car_SkillLevel		= 1;		// 必殺技の弱中ＥＸ識別
const def_LP_Car_BloodPool_Grp		= 2;		// 血だまりの画像記憶 0:A 1:B 2:C 10:A(2P) 11:B(2P) 12:C(2P)

const def_LP_Ori_41236SP_LastX		= 0;

const def_LP_Dah_DirectOrder			= 8; // ケイアスから行動を呼ばれている
	// Finalizeコードが入っているはず
const def_LP_Dah_Status				= 9;	// ダハーカオブジェクトの状態
	const def_LPDSFlags_Finalized	= 1;	// ファイナライズしたUpdateタイミング（毎Updateでリセット）


//適当に弄っていいやつ
//const...

//パターン(PAT)番号（文字）
const def_PAT_Neutral			= 0;		//ニュートラル

const def_PAT_Walk_F			= 10;	//前進・前進停止
const def_PAT_Walk_B			= 11;	//後退・後退停止

const def_PAT_Crouch			= 12;	// しゃがみ移行
const def_PAT_Crouch_Wait		= 13;	// しゃがみ待機
const def_PAT_Crouch_toN		= 14;	// 立ち上がり
const def_PAT_Furimuki_S		= 15;	// 立ち振り向き
const def_PAT_Furimuki_C		= 16;	// しゃがみ振り向き

const def_PAT_GuardS			= 17;	//立ちガード・戻り
const def_PAT_GuardC			= 18;	//屈みガード・戻り
const def_PAT_GuardA			= 19;	//空中ガード・戻り

const def_PAT_Jump_F			= 35;	//前ジャンプ・待機
const def_PAT_Jump_N			= 36;	//垂直ジャンプ・待機
const def_PAT_Jump_B			= 37;	//後ろジャンプ・待機

const def_PAT_MultiJump_F		= 38;	//多段ジャンプ
const def_PAT_MultiJump_N		= 39;	//多段ジャンプ
const def_PAT_MultiJump_B		= 40;	//多段ジャンプ

const def_PAT_Dash_F			= 45;	//地上前ダッシュ・停止
const def_PAT_Dash_B			= 46;	//地上後ろダッシュ・停止

const def_PAT_Standby_1		= 50;	//登場１
const def_PAT_Standby_2		= 51;	//登場２
const def_PAT_GuardCancelAtk	= 60;	//ガーキャン攻撃

const def_PAT_AirDash_F		= 67;	//空中前ダッシュ
const def_PAT_AirDash_B		= 68;	//空中後ダッシュ

const def_PAT_Mv_Assault_Dodge	= 67;	//地上アサルト（ダッジ）
const def_PAT_Mv_Assault_Std	= 68;	//地上アサルト
const def_PAT_Mv_Assault_Air	= 68;	//空中アサルト
const def_PAT_Mv_Assault		= 68;	//各種アサルト

const def_PAT_Throw_F			= 55;	//地上前投げ
const def_PAT_Throw_F_TechWait	= 56;	//地上投げ成立〜抜けまでの待機
const def_PAT_Throw_F_Hit		= 57;	//地上投げ攻撃部分

const def_PAT_Barrier_Std		= 17;	//立ちレジスト 387
const def_PAT_Barrier_Cro		= 18;	//しゃがみレジスト 388
const def_PAT_Barrier_Air		= 19;	//空中レジスト 389

const def_PAT_VGuard_Time		= 10;	//空ガードする時間
const def_PAT_VGuard_S			= 17;	// 立ちモーション 390
const def_PAT_VGuard_C			= 18;	// しゃがみモーション 391

const def_PAT_IWEAtk			= 259;	//IWE攻撃VO
const def_PAT_Liberate			= 260;	//ヴェールオフ
const def_PAT_Convert			= 261;	//コンセントレーション＆ＩＷＥ攻撃
const def_PAT_ChainShift		= 262;	//チェインシフト

const def_PAT_StandbyWait		= 49;	// 登場ポーズ開幕待機
const def_PAT_Standby			= 50;	// 登場ポーズ
const def_PAT_Win				= 52;	// 勝利ポーズ
const def_PAT_RoundWin			= 53;	// ラウンド勝利ポーズ

const def_PAT_TimeupLose		= 248;	//時間切れ負け・引き分けポーズ


const def_PAT_Atk_StdA			= 1;		// 立ち弱
const def_PAT_Atk_StdB			= 2;		// 立ち中
const def_PAT_Atk_StdC			= 3;		// 立ち強
const def_PAT_Atk_CroA			= 4;		// しゃがみ弱
const def_PAT_Atk_CroB			= 5;		// しゃがみ中
const def_PAT_Atk_CroC			= 6;		// しゃがみ強
const def_PAT_Atk_AirA			= 7;		// ジャンプ弱 
const def_PAT_Atk_AirB			= 8;		// ジャンプ中 
const def_PAT_Atk_AirC			= 9;		// ジャンプ強

const def_PAT_Atk_DashStdA		= 401;	// ダッシュ立ち弱 ※未使用
const def_PAT_Atk_DashStdB		= 402;	// ダッシュ立ち中
const def_PAT_Atk_DashStdC		= 403;	// ダッシュ立ち強
const def_PAT_Atk_DashCroA		= 404;	// ダッシュしゃがみ弱 ※未使用
const def_PAT_Atk_DashCroB		= 405;	// ダッシュしゃがみ中 ※未使用
const def_PAT_Atk_DashCroC		= 406;	// ダッシュしゃがみ強 ※未使用
const def_PAT_Atk_DashAirA		= 407;	// ダッシュジャンプ弱 ※未使用
const def_PAT_Atk_DashAirB		= 408;	// ダッシュジャンプ中 ※未使用
const def_PAT_Atk_DashAirC		= 409;	// ダッシュジャンプ強 ※未使用

const def_PAT_EXCutinGrp		= 997;	// EX技カットイン
const def_PAT_IWCutinGrp		= 998;	// IW技カットイン
const def_PAT_IWXCutinGrp		= 999;	// IWX技カットイン



// コンボnum
//コマンド優先順位定数
// 1〜 ※0はコマンドを入れていない状態
const def_CN_CancelCallSupport4or6	= 8; // キャンセル4or6サポート（通常技より優先度を↑に）
const def_CN_CancelCallSupport	= 9; // キャンセルサポート（通常技より優先度を↑に）

const def_CN_Skill_236236EX	=  10;
const def_CN_Skill_214236EX	=  20;
const def_CN_Skill_214214EX	=  30;

const def_CN_Skill_DyingIWE	= 50; //IWE攻撃

const def_CN_Skill_DoubleCircleEX	= 100;
const def_CN_Skill_DoubleCircleC	= 101;
const def_CN_Skill_DoubleCircleB	= 102;
const def_CN_Skill_DoubleCircleA	= 103;

const def_CN_Liberate			= 104; //ヴェールオフ
const def_CN_Blast			= 104; //金ブラスト
const def_CN_ComboBlast		= 105; //ＯＭブラスト
const def_CN_BoundBlast		= 106; //青ブラスト

const def_CN_Skill_IWEXIST		= 107; //何でここなの

const def_CN_Skill_CircleEX_DZ	= 109;
const def_CN_Skill_CircleEX	= 110;
const def_CN_Skill_CircleC		= 111;
const def_CN_Skill_CircleB		= 112;
const def_CN_Skill_CircleA		= 113;

const def_CN_Skill_41236SP_ABC	= 116;
const def_CN_Skill_41236SP_DZ	= 117;
const def_CN_Skill_41236EX_DZ	= 118;
const def_CN_Skill_41236SP		= 120; //CPUが120キメ打ちしてる
const def_CN_Skill_41236EX		= 119;
const def_CN_Skill_41236C		= 121;
const def_CN_Skill_41236B		= 122;
const def_CN_Skill_41236A		= 123;

const def_CN_Skill_623EX_DZ		= 129;
const def_CN_Skill_623EX		= 130;
const def_CN_Skill_623C		= 131;
const def_CN_Skill_623B 		= 132;
const def_CN_Skill_623A 		= 133;

const def_CN_Skill_236EX_DZ		= 138;
const def_CN_Skill_236SP		= 139;
const def_CN_Skill_236EX		= 140;
const def_CN_Skill_236C		= 141;
const def_CN_Skill_236B		= 142;
const def_CN_Skill_236A		= 143;

const def_CN_Skill_63214SP_DZ	= 147;
const def_CN_Skill_63214EX_DZ	= 148;
const def_CN_Skill_63214SP		= 149;
const def_CN_Skill_63214EX		= 150;
const def_CN_Skill_63214C		= 151;
const def_CN_Skill_63214B		= 152;
const def_CN_Skill_63214A		= 153;

const def_CN_Skill_421EX_DZ 	= 159;
const def_CN_Skill_421EX 		= 160;
const def_CN_Skill_421C		= 161;
const def_CN_Skill_421B		= 162;
const def_CN_Skill_421A		= 163;

const def_CN_Skill_214EX_DZ		= 168;
const def_CN_Skill_214EX		= 170;
const def_CN_Skill_214C		= 171;
const def_CN_Skill_214B		= 172;
const def_CN_Skill_214A		= 173;

const def_CN_Skill_0202EX_DZ	= 179;
const def_CN_Skill_0202EX		= 180;
const def_CN_Skill_0202C		= 181;
const def_CN_Skill_0202B		= 182;
const def_CN_Skill_0202A		= 183;
const def_CN_Skill_0202D	= 184;//200226:AやBより優先度が高いと、22AD>ADでの先行CSがやり辛い

//この辺使ってる？
const def_CN_Skill_236A_236EX	= 195; //※
const def_CN_Skill_236A_236C	= 196; //※
const def_CN_Skill_236A_236BorC	= 196; //※
const def_CN_Skill_236A_236B	= 197; //※
const def_CN_Skill_236A_236A	= 198; //※

const def_CN_Skill_236B_236EX	= 195; //※
const def_CN_Skill_236B_236C	= 196; //※
const def_CN_Skill_236B_236BorC	= 196; //※
const def_CN_Skill_236B_236B	= 197; //※
const def_CN_Skill_236B_236A	= 198; //※

const def_CN_Skill_236A_236A_236A	= 198; // ※
const def_CN_Skill_236_236			= 198; // ※
const def_CN_Skill_236_236_236		= 199; // ※


const def_CN_Skill_J41236SP_DZ	= 217;
const def_CN_Skill_J41236EX_DZ	= 218;
const def_CN_Skill_J41236SP		= 219;
const def_CN_Skill_J41236EX		= 220;
const def_CN_Skill_J41236C		= 221;
const def_CN_Skill_J41236B	 	= 222;
const def_CN_Skill_J41236A		= 223;

const def_CN_Skill_J623EX_DZ	= 229;
const def_CN_Skill_J623EX		= 230;
const def_CN_Skill_J623C		= 231;
const def_CN_Skill_J623B 		= 232;
const def_CN_Skill_J623A 		= 233;

const def_CN_Skill_J236EX_DZ	= 238;
const def_CN_Skill_J236EX		= 240;
const def_CN_Skill_J236C		= 241;
const def_CN_Skill_J236B		= 242;
const def_CN_Skill_J236A		= 243;

const def_CN_Skill_J63214EX_DZ 	= 248;
const def_CN_Skill_J63214SP 	= 249;
const def_CN_Skill_J63214EX 	= 250;
const def_CN_Skill_J63214C		= 251;
const def_CN_Skill_J63214B 	= 252;
const def_CN_Skill_J63214A 	= 253;

const def_CN_Skill_J421EX_DZ	= 259;
const def_CN_Skill_J421EX		= 260;
const def_CN_Skill_J421C 		= 261;
const def_CN_Skill_J421B 		= 262;
const def_CN_Skill_J421A 		= 263;

const def_CN_Skill_J214EX_DZ	= 268;
const def_CN_Skill_J214EX 		= 270;
const def_CN_Skill_J214C 		= 271;
const def_CN_Skill_J214B 		= 272;
const def_CN_Skill_J214A 		= 273;

const def_CN_Skill_J0202EX_DZ 	= 279;
const def_CN_Skill_J0202EX 	= 280;
const def_CN_Skill_J0202C 		= 281;
const def_CN_Skill_J0202B 		= 282;
const def_CN_Skill_J0202A 		= 283;

//共通システム部分
const def_CN_Throw_F			= 306;
const def_CN_Throw_A			= 307;

const def_CN_Convert			= 350; //チェインシフト ver.1.02:1907→ver.1.03:350

const def_CN_AtkCBandC			= 360; // 480から変更
const def_CN_AtkBandC			= 361;
const def_CN_AtkJBandC			= 362;

const def_CN_AtkCAandB			= 363;
const def_CN_AtkAandB			= 364;
const def_CN_AtkJAandB			= 365;

const def_CN_Atk_DashStdC_Normal= 370; //行動可能時
const def_CN_Atk_DashStdB_Normal= 371;
const def_CN_Atk_DashStdC		= 380; //行動不能時
const def_CN_Atk_DashStdB		= 381;
const def_CN_Atk_DashStdC_Direct= 390; //ダッシュ攻撃生だし
const def_CN_Atk_DashStdB_Direct= 391;

const def_CN_Assault_Std		= 395;
const def_CN_Assault_Air		= 397;

const def_CN_Dash_F			= 400;
const def_CN_Dash_B			= 401;
const def_CN_Dash_F_Douji		= 402;
const def_CN_Dash_B_Douji		= 403;


//必殺技の追加コマンド系（優先度は必殺技より低い）
const def_CN_Skill_AddCommand1	= 410;
const def_CN_Skill_AddCommand2	= 411;
const def_CN_Skill_AddCommand3	= 412;
const def_CN_Skill_AddCommand4	= 413;
const def_CN_Skill_AddCommand5	= 414;
const def_CN_Skill_AddCommand6	= 415;
const def_CN_Skill_AddCommand7	= 416;
const def_CN_Skill_AddCommand8	= 417;
const def_CN_Skill_AddCommand9	= 418;
const def_CN_Skill_AddCommand10	= 419;
const def_CN_Skill_AddCommand11	= 420;
const def_CN_Skill_AddCommand12	= 421;
const def_CN_Skill_AddCommand13	= 422;
const def_CN_Skill_AddCommand14	= 423;
const def_CN_Skill_AddCommand15	= 424;
const def_CN_Skill_AddCommand16	= 425;
const def_CN_Skill_AddCommand17	= 426;
const def_CN_Skill_AddCommand18	= 427;
const def_CN_Skill_AddCommand19	= 428;
const def_CN_Skill_AddCommand20	= 429;
const def_CN_Skill_AddCommand21	= 430;
const def_CN_Skill_AddCommand22	= 431;
const def_CN_Skill_AddCommand23	= 432;
const def_CN_Skill_AddCommand24	= 433;
const def_CN_Skill_AddCommand25	= 434;
const def_CN_Skill_AddCommand26	= 435;
const def_CN_Skill_AddCommand27	= 436;
const def_CN_Skill_AddCommand28	= 437;
const def_CN_Skill_AddCommand29	= 438;
const def_CN_Skill_AddCommand30	= 439;
const def_CN_Skill_AddCommand31	= 440;
const def_CN_Skill_AddCommand32	= 441;
const def_CN_Skill_AddCommand33	= 442;
const def_CN_Skill_AddCommand34	= 443;
const def_CN_Skill_AddCommand35	= 444;
const def_CN_Skill_AddCommand36	= 445;
const def_CN_Skill_AddCommand37	= 446;
const def_CN_Skill_AddCommand38	= 447;
const def_CN_Skill_AddCommand39	= 448;
const def_CN_Skill_AddCommand40	= 449;
const def_CN_Skill_AddCommand41	= 450;
const def_CN_Skill_AddCommand42	= 451;
const def_CN_Skill_AddCommand43	= 452;
const def_CN_Skill_AddCommand44	= 453;
const def_CN_Skill_AddCommand45	= 454;
const def_CN_Skill_AddCommand46	= 455;
const def_CN_Skill_AddCommand47	= 456;
const def_CN_Skill_AddCommand48	= 457;
const def_CN_Skill_AddCommand49	= 458;

// シールド（通常技・特殊技より優先に変更）
const def_CN_Barrier_Cro		= 690;
const def_CN_Barrier_Std		= 691;
const def_CN_Barrier_Air		= 692;

// 通常技・特殊技この辺から
const def_CN_Atk1C 			= 700;
const def_CN_Atk1B 			= 701;
const def_CN_Atk1A 			= 702;
//const def_CN_Atk2C 			= 710;
//const def_CN_Atk2B 			= 711;
//const def_CN_Atk2A 			= 712;
const def_CN_Atk3C 			= 720;
const def_CN_Atk3B 			= 721;
const def_CN_Atk3A 			= 722;
const def_CN_Atk4C 			= 730;
const def_CN_Atk4B 			= 731;
const def_CN_Atk4A 			= 732;

const def_CN_Atk4Atk_Clear	= 738; // 6Aとかより前じゃないとダメ
const def_CN_Atk6Atk_Clear	= 739; // 6Aとかより前じゃないとダメ

const def_CN_Atk6C 			= 740;
const def_CN_Atk6B 			= 741;
const def_CN_Atk6A 			= 742;
const def_CN_Atk6C_Add			= 745;
const def_CN_Atk6B_Add			= 746;
const def_CN_Atk6A_Add			= 747;

const def_CN_Atk7C 			= 750;
const def_CN_Atk7B 			= 751;
const def_CN_Atk7A 			= 752;
const def_CN_Atk8C 			= 760;
const def_CN_Atk8B 			= 761;
const def_CN_Atk8A 			= 762;
const def_CN_Atk9C 			= 770;
const def_CN_Atk9B 			= 771;
const def_CN_Atk9A 			= 772;
//const def_CN_AtkC 			= 780;
//const def_CN_AtkB 			= 781;
//const def_CN_AtkA 			= 782;

const def_CN_AtkJ1C 			= 800;
const def_CN_AtkJ1B 			= 801;
const def_CN_AtkJ1A 			= 802;
const def_CN_AtkJ2C 			= 810;
const def_CN_AtkJ2B 			= 811;
const def_CN_AtkJ2A 			= 812;
const def_CN_AtkJ3C 			= 820;
const def_CN_AtkJ3B 			= 821;
const def_CN_AtkJ3A 			= 822;

const def_CN_AtkJ4Atk_Clear		= 829; // 4Aとかより前じゃないとダメ
const def_CN_AtkJ4C 			= 830;
const def_CN_AtkJ4B 			= 831;
const def_CN_AtkJ4A 			= 832;

const def_CN_AtkJ6Atk_Clear		= 838; // 6Aとかより前じゃないとダメ
const def_CN_AtkJ6C 			= 840;
const def_CN_AtkJ6B 			= 841;
const def_CN_AtkJ6A 			= 842;
const def_CN_AtkJ6C_Add		= 845;
const def_CN_AtkJ6B_Add		= 846;
const def_CN_AtkJ6A_Add		= 847;



const def_CN_AtkJ7C 			= 850;
const def_CN_AtkJ7B 			= 851;
const def_CN_AtkJ7A 			= 852;
const def_CN_AtkJ8C 			= 860;
const def_CN_AtkJ8B 			= 861;
const def_CN_AtkJ8A 			= 862;
const def_CN_AtkJ9C 			= 870;
const def_CN_AtkJ9B 			= 871;
const def_CN_AtkJ9A 			= 872;
//const def_CN_AtkJC 			= 880;
//const def_CN_AtkJB 			= 881;
//const def_CN_AtkJA 			= 882;

//1000〜1010ぐらいまではＡ連のCNがあります
//def_CN_SmartSteer_00+nで生成しているだけで00以降の定数は使ってないので注意
// n = def_CNP_SmartSteerNumMAX
const def_CNP_SmartSteerNumMAX	= 10; // 最大何個登録できるか 10*3種類でdef_CN_SmartSteer_00+30まで確保
const def_CN_SmartSteer_00		= 1000;
const def_CN_SmartSteer_01		= 1001;
const def_CN_SmartSteer_02		= 1002;
const def_CN_SmartSteer_03		= 1003;
const def_CN_SmartSteer_04		= 1004;
const def_CN_SmartSteer_05		= 1005;
const def_CN_SmartSteer_06		= 1006;
const def_CN_SmartSteer_07		= 1007;
const def_CN_SmartSteer_08		= 1008;
const def_CN_SmartSteer_09		= 1009;
const def_CN_SmartSteer_10		= 1010;

const def_CN_HighJump_F		= 1040;
const def_CN_HighJump_N		= 1041;
const def_CN_HighJump_B		= 1042;
const def_CN_HighJumpCancel_F	= 1043;
const def_CN_HighJumpCancel_N	= 1044;
const def_CN_HighJumpCancel_B	= 1045;

const def_CN_Jump_F			= 1050; //※
const def_CN_Jump_N			= 1051; //※
const def_CN_Jump_B			= 1052; //※
const def_CN_JumpCancel_F		= 1053; //※
const def_CN_JumpCancel_N		= 1054; //※
const def_CN_JumpCancel_B		= 1055; //※

const def_CN_MultiJump_F		= 1060;
const def_CN_MultiJump_N		= 1061;
const def_CN_MultiJump_B		= 1062;
const def_CN_MultiJumpCancel_F	= 1063;
const def_CN_MultiJumpCancel_N	= 1064;
const def_CN_MultiJumpCancel_B	= 1065;
const def_CN_Atk_Std6CThrow		= 1070; // 6Cでの通常投げ（6Cよりも優先度を↑に）

//通常技より優先度の高い追加コマンド
const def_CN_Atk_6B_6B			= 1090;

// 通常技
const def_CN_Atk_CroC			= 1100; //※
const def_CN_Atk_CroB			= 1101; //※
const def_CN_Atk_CroA			= 1102; //※
const def_CN_Atk_StdC			= 1110;
const def_CN_Atk_StdB			= 1111;
const def_CN_Atk_StdA			= 1112;
const def_CN_Atk_AirC			= 1120;
const def_CN_Atk_AirB			= 1121;
const def_CN_Atk_AirA			= 1122;

//通常技の追加コマンド（通常技より優先度低い）
const def_CN_Atk_2B_2B_2B		= 1129; // 仮
const def_CN_Atk_A_A			= 1130; // 595
const def_CN_Atk_B_B			= 1131; // 600
const def_CN_Atk_6B_6B_Old		= 1132; // 601
const def_CN_Atk_C_C			= 1133; // 610
const def_CN_Atk_2A_2A			= 1134; // 618
const def_CN_Atk_2B_2B			= 1135; // 620
const def_CN_Atk_2C_2C			= 1136; // 630
const def_CN_Atk_JA_JA			= 1137;
const def_CN_Atk_JB_JB			= 1138; // 640
const def_CN_Atk_JC_JC			= 1139; // 650


const def_CN_Atk_AddCommand1	= 1140;
const def_CN_Atk_AddCommand2	= 1141;
const def_CN_Atk_AddCommand3	= 1142;
const def_CN_Atk_AddCommand4	= 1143;
const def_CN_Atk_AddCommand5	= 1144;
const def_CN_Atk_AddCommand6	= 1145;
const def_CN_Atk_AddCommand7	= 1146;
const def_CN_Atk_AddCommand8	= 1147;
const def_CN_Atk_AddCommand9	= 1148;
const def_CN_Atk_AddCommand10	= 1149;
const def_CN_Atk_AddCommand11	= 1150;

const def_CN_CallSupport4or6	= 1306;
const def_CN_CallSupport		= 1307;

const def_CN_Basic_AddMove1		= 1500;
const def_CN_Basic_AddMove2		= 1501;
const def_CN_Basic_AddMove3		= 1502;
const def_CN_Basic_AddMove4		= 1503;
const def_CN_Basic_AddMove5		= 1504;
const def_CN_Basic_AddMove6		= 1505;
const def_CN_Basic_AddMove7		= 1506;
const def_CN_Basic_AddMove8		= 1507;
const def_CN_Basic_AddMove9		= 1508;
const def_CN_Basic_AddMove10	= 1509;
const def_CN_Basic_AddMove11	= 1510;
const def_CN_Basic_AddMove12	= 1511;
const def_CN_Basic_AddMove13	= 1512;
const def_CN_Basic_AddMove14	= 1513;
const def_CN_Basic_AddMove15	= 1514;
const def_CN_Basic_AddMove16	= 1515;
const def_CN_Basic_AddMove17	= 1516;
const def_CN_Basic_AddMove18	= 1517;
const def_CN_Basic_AddMove19	= 1518;
const def_CN_Basic_AddMove20	= 1519;
const def_CN_Basic_AddMove21	= 1520;
const def_CN_Basic_AddMove22	= 1521;
const def_CN_Basic_AddMove23	= 1522;
const def_CN_Basic_AddMove24	= 1523;
const def_CN_Basic_AddMove25	= 1524;

const def_CN_Crouch			= 1620;
const def_CN_Walk_F			= 1621;
const def_CN_Walk_B			= 1622;


const def_CN_ConvertCharge		= 1908; //コンセントレーション　※番号変更

const def_CN_CallEscapeSupportKirifuda	= 1950; // エスケープサポート（切り札状態）
const def_CN_CallEscapeSupport	= 1951; // エスケープサポート

const def_CN_Debug00	= 2000;
const def_CN_Debug01	= 2001;
const def_CN_Debug02	= 2002;
const def_CN_Debug03	= 2003;
const def_CN_Debug04	= 2004;
const def_CN_Debug05	= 2005;
const def_CN_Debug06	= 2006;
const def_CN_Debug07	= 2007;
const def_CN_Debug08	= 2008;

//SPCost
const def_SC_SpGauge_Max		= 20000;	// SPゲージ最大値
const def_SC_Liberate_Minus	= 20; 	// Liberate状態での減少値 ver1.06:20
const def_SC_OverLiberate_Minus	= 15;	// OverLiberate状態での減少値  ver1.06:20
const def_SC_SkillInit_Plus	= 0;	// 必殺技発動時のSP増加量基本値(100で1%)


//CmdTmplFlags
// スマートステアのアナウンスを出してボーナスを与えるタイミングの技かどうか
const def_CMDFlags_AnnounceSmaetSteer = 1;
const def_CMDFlags_AnnounceSmaetSteerCro = 2;
const def_CMDFlags_AnnounceSmaetSteerAir = 4;

//なんかゲームバランスに影響ありそうなやつ
//GRD増減値
const def_GRD_Guard_Frame					= 80;		//ガード時毎フレーム
const def_GRD_Guard_Frame_Vorpal			= -80;		//ガード時毎フレーム（ヴォーパル側）
const def_GRD_GuardSP_Frame				= 300;		//シールド成功時毎フレーム　↑と加算はされない
const def_GRD_GuardSP_Frame_Vorpal			= 150;		//シールド成功時毎フレーム　↑と加算はされない（ヴォーパル側）
const def_GRD_NiceGuard_Gedan				= 500;		//成功ガード発生時（下段をしゃがみガード※ヴォーパル時は無し）
const def_GRD_NiceGuard_GedanSyodan			= 1000;		//成功ガード発生時（下段をしゃがみガード※ヴォーパル時は無し）
const def_GRD_NiceGuard_Tyudan				= 3000;		//成功ガード発生時（中段を立ちガード※ヴォーパル時は無し）
const def_GRD_NiceGuard_TyudanSyodan			= 5000;		//成功ガード発生時（中段を立ちガード※ヴォーパル時は無し）
const def_GRD_NiceGuard_NoboriTyudan			= 5000;		//成功ガード発生時（のぼり中段を立ちガード※ヴォーパル時は無し）
const def_GRD_NiceGuard_AnyCancel				= 1000;		//成功ガード発生時（キャンセルがきく必殺技※ヴォーパル時は無し）
const def_GRD_NiceGuard_AnyCancelSyodan			= 1500;		//成功ガード発生時（キャンセルがきく必殺技※ヴォーパル時は無し）
const def_GRD_DamageSyodan					= -10000;	//ダメージ初段時
const def_GRD_BoundFU						= 0;			//やられ中毎フレーム (1.03)-50
const def_GRD_BoundFU_Vorpal				= 0;			//やられ中毎フレーム（ヴォーパル側）(1.03)-200
const def_GRD_Liberate_AttackImpactInit		= 500;		//１００％ヴェールオフ中に攻撃をガードさせた時
const def_GRD_OverLiberate_AttackImpactInit	= 1000;		//２００％ヴェールオフ中に攻撃をガードさせた時
const def_GRD_ThrowHit						= -20000;	//投げられた時
const def_GRD_ThrowMiss					= -10000;	//投げスカり時
const def_GRD_DashAtk_Init					= 1000;		//ダッシュ攻撃を出したとき
const def_GRD_BackDash						= -5000;		//バクステ発動時
const def_GRD_ReversalBackDash				= -10000;	//リバサバクステ発動時
const def_GRD_Recover						= 0;		//受身成功毎 (1.03)5000
const def_GRD_AutoRecoverLv0				= 0;			//オートリカバー(x0.5)時（def_GRD_Recoverと重ねて呼ばれる）
const def_GRD_AutoRecoverLv1				= 0;			//オートリカバー(x1.0)時（def_GRD_Recoverと重ねて呼ばれる）
const def_GRD_AutoRecoverLv2				= 5000;		//オートリカバー(x1.5)時（def_GRD_Recoverと重ねて呼ばれる）
const def_GRD_AutoRecoverLv3				= 15000;		//オートリカバー(x2.0)時（def_GRD_Recoverと重ねて呼ばれる）
const def_GRD_Assault_Init					= 10000;		//アサルトを出したとき
const def_GRD_BackGroundRecover				= -10000;	//後ろ受け身時
const def_GRD_InActive						= -10000;	//でかかりをCSされた

//コンセントレーション中（自分の増減値）
//[st]からFrameUpdateではなく1Fに１回の増加になったので、1.5倍ぐらいにする
const def_GRD_Convert_Frame					= 450;	//通常
const def_GRD_Convert_Frame_EnemyisDamage		= 300;	//相手がやられ中
const def_GRD_Convert_Frame_NoEXS				= 300;	//自分のEXSが空
const def_GRD_Convert_Frame_VeilOff				= 750;	//ヴェールオフ中

//コンセントレーション中（相手の増減値）
//[st]からFrameUpdateではなく1Fに１回の増加になったので、1.5倍ぐらいにする
const def_GRD_Convert_Frame_Enemy				= -450;	//通常
const def_GRD_Convert_Frame_EnemyisDamage_Enemy	= -225;	//相手がやられ中
const def_GRD_Convert_Frame_NoEXS_Enemy			= -150;	//自分のEXSが空
const def_GRD_Convert_Frame_VeilOff_Enemy		= -1200;	//自分がヴェールオフ中

const def_GRD_BarrierS_Frame				= 40;		//シールドモーション中
const def_GRD_BarrierC_Frame				= 20;		//シールドモーション中
const def_GRD_BarrierA_Frame				= 10;		//シールドモーション中
const def_GRD_Shield_Success				= 2500;		//シールド成功時（攻性防禦もこれ）
const def_GRD_Shield_Success_Enemy			= -20000;		//シールド成功時相手に対して

const def_GRD_Shield_Success_WeakBonus		= 10000;		//特殊な攻撃へのシールド成功時
const def_GRD_Shield_Success_WeakBonus_Enemy= -30000;		//シールド成功時相手に対して

const def_GRD_ThrowTech_Success				= 20000;		//投げ抜け成功時
const def_GRD_ThrowTech_Success_Enemy			= -20000;		//投げ抜け成功時（相手に）

const def_GRD_BMThrowTech_Success			= 30000;		//強引投げの投げ抜け成功時
const def_GRD_BMThrowTech_Success_Enemy			= -30000;		//強引投げの投げ抜け成功時（相手に）

const def_GRD_GuardShieldCost					= 1;	//ガードシールド発動コスト（失敗時に減少）
const def_GRD_GuardShieldNotEnough_Enemy			= 10000;	//↑のコストが足りないとき（相手に）

//GRD自動増加のフレーム
const def_GRD_Superiority_JudgeFrame			= 15;	//優勢だと判断され効果が出始めるフレーム
const def_GRD_Inferiority_JudgeFrame			= 45;	//劣勢だと判断され効果が出始めるフレーム


//SP増減値
const def_SP_Convert_Frame		= 0;	//コンバート毎フレーム
const def_SP_EXConvert_Frame	= 0;	//EXコンバート毎フレーム
const def_SP_Convert_Init		= 0;	//コンバート
const def_SP_EXConvert_Init	= 0;//EXコンバート
const def_SP_Assault_Init		= 0;	//アサルトを出したとき 1.06:-1000

const def_SP_GuardShield_Init	= -1000;	// ガードシールド発動時

const def_SP_BarrierS_Frame	= -10;	//シールドモーション中
const def_SP_BarrierC_Frame	= -15;	//シールドモーション中
const def_SP_BarrierA_Frame	= -12;	//シールドモーション中
const def_SP_ConvertCharge_Frame	= -4;	//シールドモーション中

const def_SP_AutoRecoverLv0	= 500;	//オートリカバー(x0.5)時 105Fまで
const def_SP_AutoRecoverLv1	= 500;	//オートリカバー(x1.0)時 210Fまで
const def_SP_AutoRecoverLv2	= 1000;	//オートリカバー(x1.5)時 420Fまで
const def_SP_AutoRecoverLv3	= 3000;	//オートリカバー(x2.0)時 それ以上

const def_SP_SmartSteerBonus	= 0; // スマートステアアナウンス発生時のボーナス（ダメージ時のみ、１コンボで１回のみ）

//SP増減係数
const def_SP_Barrier_Frame_BreakVal		= 150;	//ブレイク中消費増加係数
const def_SP_Barrier_Frame_OverBreakVal	= 200;	//ブレイク中消費増加係数
const def_SP_CVO_EXSLimitVal	= 25;	//CVOでの相手のゲージ増加量制限
const def_SP_CSCheat_EXSLimitVal = 70;	//カンニングでの相手のゲージ増加量制限


//ベクトル係数
const def_VEC_GuardSP_Xmax		= -4500;	//↓をかけた結果の加減値
const def_VEC_GuardSP_Xvec		= 100;	//バリアガード時ののガードベクトル係数 Ver.1.044:350
const def_VEC_GuardSP_Xmax_Air	= -2500;	//↓をかけた結果の加減値
const def_VEC_GuardSP_Xvec_Air	= 100;	//バリアガード時ののガードベクトル係数（空中シールドのとき）  Ver.1.044:150

const def_VEC_DashAtk_Xmax		= 4000; //ダッシュ攻撃のベクトル最大値
const def_VEC_DashAtk_Xmin		= 2500; //ダッシュ攻撃のベクトル最低値

//特殊な補正
const def_HOSEI_NoboriTyudan		= 40; //のぼり中段での上書き補正値
const def_HOSEI_BoundMutekiCapture	= 80; //強引な投げつかみ（バウンドか無敵中）での乗算補正値
const def_HOSEI_ChainShift			= 110; //チェインシフトの乗算補正値（回復値）
const def_HOSEI_ChainShiftMax		= 75; //チェインシフトでの補正回復限界値
const def_HOSEI_BreakFatalThrow		= 130; // ブレイク投げ（def_MC_GRDBreak_FatalDmgHosei属性のみ）
const def_HOSEI_AssaultHit			= 85; // アサルトから出した技で通常ヒット
const def_HOSEI_ExDamageHosei		= 85; // Def_Sys_CancelAirAtk_GuardCrouch の def_MC_ExDamageHosei での補正値 バティスタにも適用

const def_CPH_ChainShift			= 130; //チェインシフトのCPの乗算補正値（回復値）
const def_CPH_SuperChainShift		= 150; //チェインシフトのCPの乗算補正値（回復値）
const def_CPH_CounterHit			= 120; // カウンター
const def_CPH_LowCounterHit		= 105; // Low属性の技でカウンター（ほぼない）
const def_CPH_BreakHit				= 130; // GRDブレイクした

const def_CPH_AssaultHit			= 60; // アサルトから出した技で通常ヒット

const def_BGM_IWExist				= 90; //インフィニットワースイグジストの処刑ＢＧＭ

const def_VOType_NormalVO			= 0; // 通常VO
const def_VOType_MaxVO				= 1; // 最大ためVO
const def_VOType_ComboVO			= 2; // コンボVO
// ↑の定数はこっちに移行
// _LiberateType_Normal
// _LiberateType_Max
// _LiberateType_Combo

const def_NormalVO_MinusValue		= 100; // 通常VOのゲージ減少割合（１００にしとく）
const def_MaxVO_MinusValue			= 80; // 最大ためVOだとゲージの減りが遅い
const def_1stVorpalComboVO_MinusValue	= 280; // コンボVOだとゲージの減りが早い
const def_ComboVO_MinusValue		= 140; // コンボVOだとゲージの減りが早い
const def_DyingComboVO_MinusValue		= 140; // 瀕死コンボVO　※未使用

// Battle_Std.SetHosyoHosei_Multi( def_HosyoHosei_SpRecoverDoubleEx );
// この関数を使うこと
const def_HosyoHosei_ComboVO = 90; // コンボヴェールオフバウンド
const def_HosyoHosei_NormalThrow = 80; // 通常投げ
const def_HosyoHosei_SpRecoverDoubleEx = 120; // EX>EXの保証補正の低下をIWやIWEで回復する

// 90 90 70 (3.30)
// 80 60 60
const def_HosyoHosei_DyingComboVO_Init = 80; // コンボヴェールオフ、瀕死時　※CVOは瀕死の時の補正がゆるめ(キャラ差が少ないので)
const def_HosyoHosei_SuddenDyingComboVO_Init = 60; // 瀕死CVO（コンボ中にVPになった場合）
const def_HosyoHosei_NoDyingComboVO_Init = 60; // コンボヴェールオフ、瀕死じゃない時の保証補正

// ヴェールオフの保証補正。VO自体あたると追撃不能なので、実質スカしてコンボを入れた時の保証補正
// EX技のヒット途中にVOすると、EX技にも補正がかかってしまうがやむなし（フラグ式にすればある程度は解決する）
// 85 85 70 (3.30)
// 80 65 65
const def_HosyoHosei_DyingVO_Init = 80; // ヴェールオフ、瀕死時
const def_HosyoHosei_SuddenDyingVO_Init = 65; // ヴェールオフ、瀕死時
const def_HosyoHosei_NoDyingVO_Init = 65; // ヴェールオフ、瀕死じゃない時の保証補正

// 85 85 70 (3.30)
// 65 50 50
const def_HosyoHosei_DyingComboUsedExSkill_Init = 60; // コンボ中にEX技を２回出そうとしたとき
const def_HosyoHosei_SuddenDyingComboUsedExSkill_Init = 50; // コンボ中にEX技を２回出そうとしたとき
const def_HosyoHosei_NoDyingComboUsedExSkill_Init = 50; // コンボ中にEX技を２回出そうとしたとき

//const table def_test = {"a"=10, };
//GRDブレイクのフレーム
const def_GRDBF_IWE				= 600; // 10秒 イグジスト発動
const def_GRDBF_GuardCancel		= 720; // 15秒 ガーキャン発動
const def_GRDBF_GuardCancel_Max = 720; // 15秒 ガーキャン発動、200%orVO時
const def_GRDBF_LowAtkDmg		= 490; // 7秒 lowbreakの技
const def_GRDBF_NormalAtkDmg	= 600; // 10秒 通常の攻撃
const def_GRDBF_ThrowAtkDmg		= 900; // 15秒 投げでのブレイク
const def_GRDBF_VeilOffDmg		= 600; // 10秒 VOでのブレイク

//AttackInfoStringWord	
//BMvEff.AttackInfoString_Set({ word=def_AISW_CCSEXLimit,} );	
//const def_AISW_GroundRecover	= "GroundRecover 0123456" //この辺がギリギリ
//とりあえず単語は要差し替えで定義だけしていく
const def_AISW_Recover			= "Recover Success";
const def_AISW_GroundRecover	= "GroundRecover Success";
const def_AISW_WallRecover		= "WallRecover Success";
const def_AISW_AutoRecover		= "AUTO RECOVER";
const def_AISW_TechHit			= "TECH HIT";
const def_AISW_DoubleTechHit	= "DOUBLE TECH HIT";
const def_AISW_Convert			= "CHAIN SHIFT";
const def_AISW_EXConvert		= "CHAIN SHIFT";
const def_AISW_EXSkill			= "EX SKILL";
const def_AISW_WorthSkill		= "WORTH SKILL";
const def_AISW_SPGuard			= "SHIELD";
const def_AISW_FaultGuard		= "FAULT GUARD";
const def_AISW_GRDBreak		= "GRD BREAK";
const def_AISW_Reversal		= "REVERSAL";
const def_AISW_SmartSteer		= "SMART STEER"; //EXより１つ前のスマートステア発動時
const def_AISW_GuardCancel		= "GUARD THRUST"; // guard thrust
const def_AISW_ReverseBeat		= "REVERSE LINK"; // パッシングリンクのリバビ
const def_AISW_NeppaRecover		= "RECOVER";
const def_AISW_GRDAction		= "GRD SKILL"; // 仮
const def_AISW_FirstAttack		= "FIRST ATTACK";
const def_AISW_Inactive			= "INACTIVE";
const def_AISW_CCSEXLimit		= "EXS LIMIT";
const def_AISW_HitConfirmation	= "HIT CONFIRMATION";

print("\n[btl_Define読み込み完了]");